
ros_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d34  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000320  08008ebc  08008ebc  00018ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091dc  080091dc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080091dc  080091dc  000191dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091e4  080091e4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080091e4  080091e4  000191e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091ec  080091ec  000191ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080091f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00000e40  20000078  20000078  00020078  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000eb8  20000eb8  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016987  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002960  00000000  00000000  00036a2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fe8  00000000  00000000  00039390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f28  00000000  00000000  0003a378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022e1d  00000000  00000000  0003b2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011dc3  00000000  00000000  0005e0bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2e40  00000000  00000000  0006fe80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00142cc0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a68  00000000  00000000  00142d10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000078 	.word	0x20000078
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008ea4 	.word	0x08008ea4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	08008ea4 	.word	0x08008ea4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2uiz>:
 8000a84:	004a      	lsls	r2, r1, #1
 8000a86:	d211      	bcs.n	8000aac <__aeabi_d2uiz+0x28>
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d211      	bcs.n	8000ab2 <__aeabi_d2uiz+0x2e>
 8000a8e:	d50d      	bpl.n	8000aac <__aeabi_d2uiz+0x28>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d40e      	bmi.n	8000ab8 <__aeabi_d2uiz+0x34>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_d2uiz+0x3a>
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0000 	mov.w	r0, #0
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_uldivmod>:
 8000ac4:	b953      	cbnz	r3, 8000adc <__aeabi_uldivmod+0x18>
 8000ac6:	b94a      	cbnz	r2, 8000adc <__aeabi_uldivmod+0x18>
 8000ac8:	2900      	cmp	r1, #0
 8000aca:	bf08      	it	eq
 8000acc:	2800      	cmpeq	r0, #0
 8000ace:	bf1c      	itt	ne
 8000ad0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ad4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad8:	f000 b974 	b.w	8000dc4 <__aeabi_idiv0>
 8000adc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ae4:	f000 f806 	bl	8000af4 <__udivmoddi4>
 8000ae8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af0:	b004      	add	sp, #16
 8000af2:	4770      	bx	lr

08000af4 <__udivmoddi4>:
 8000af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af8:	9d08      	ldr	r5, [sp, #32]
 8000afa:	4604      	mov	r4, r0
 8000afc:	468e      	mov	lr, r1
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d14d      	bne.n	8000b9e <__udivmoddi4+0xaa>
 8000b02:	428a      	cmp	r2, r1
 8000b04:	4694      	mov	ip, r2
 8000b06:	d969      	bls.n	8000bdc <__udivmoddi4+0xe8>
 8000b08:	fab2 f282 	clz	r2, r2
 8000b0c:	b152      	cbz	r2, 8000b24 <__udivmoddi4+0x30>
 8000b0e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b12:	f1c2 0120 	rsb	r1, r2, #32
 8000b16:	fa20 f101 	lsr.w	r1, r0, r1
 8000b1a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b1e:	ea41 0e03 	orr.w	lr, r1, r3
 8000b22:	4094      	lsls	r4, r2
 8000b24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b28:	0c21      	lsrs	r1, r4, #16
 8000b2a:	fbbe f6f8 	udiv	r6, lr, r8
 8000b2e:	fa1f f78c 	uxth.w	r7, ip
 8000b32:	fb08 e316 	mls	r3, r8, r6, lr
 8000b36:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b3a:	fb06 f107 	mul.w	r1, r6, r7
 8000b3e:	4299      	cmp	r1, r3
 8000b40:	d90a      	bls.n	8000b58 <__udivmoddi4+0x64>
 8000b42:	eb1c 0303 	adds.w	r3, ip, r3
 8000b46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b4a:	f080 811f 	bcs.w	8000d8c <__udivmoddi4+0x298>
 8000b4e:	4299      	cmp	r1, r3
 8000b50:	f240 811c 	bls.w	8000d8c <__udivmoddi4+0x298>
 8000b54:	3e02      	subs	r6, #2
 8000b56:	4463      	add	r3, ip
 8000b58:	1a5b      	subs	r3, r3, r1
 8000b5a:	b2a4      	uxth	r4, r4
 8000b5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b60:	fb08 3310 	mls	r3, r8, r0, r3
 8000b64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b68:	fb00 f707 	mul.w	r7, r0, r7
 8000b6c:	42a7      	cmp	r7, r4
 8000b6e:	d90a      	bls.n	8000b86 <__udivmoddi4+0x92>
 8000b70:	eb1c 0404 	adds.w	r4, ip, r4
 8000b74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b78:	f080 810a 	bcs.w	8000d90 <__udivmoddi4+0x29c>
 8000b7c:	42a7      	cmp	r7, r4
 8000b7e:	f240 8107 	bls.w	8000d90 <__udivmoddi4+0x29c>
 8000b82:	4464      	add	r4, ip
 8000b84:	3802      	subs	r0, #2
 8000b86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b8a:	1be4      	subs	r4, r4, r7
 8000b8c:	2600      	movs	r6, #0
 8000b8e:	b11d      	cbz	r5, 8000b98 <__udivmoddi4+0xa4>
 8000b90:	40d4      	lsrs	r4, r2
 8000b92:	2300      	movs	r3, #0
 8000b94:	e9c5 4300 	strd	r4, r3, [r5]
 8000b98:	4631      	mov	r1, r6
 8000b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9e:	428b      	cmp	r3, r1
 8000ba0:	d909      	bls.n	8000bb6 <__udivmoddi4+0xc2>
 8000ba2:	2d00      	cmp	r5, #0
 8000ba4:	f000 80ef 	beq.w	8000d86 <__udivmoddi4+0x292>
 8000ba8:	2600      	movs	r6, #0
 8000baa:	e9c5 0100 	strd	r0, r1, [r5]
 8000bae:	4630      	mov	r0, r6
 8000bb0:	4631      	mov	r1, r6
 8000bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb6:	fab3 f683 	clz	r6, r3
 8000bba:	2e00      	cmp	r6, #0
 8000bbc:	d14a      	bne.n	8000c54 <__udivmoddi4+0x160>
 8000bbe:	428b      	cmp	r3, r1
 8000bc0:	d302      	bcc.n	8000bc8 <__udivmoddi4+0xd4>
 8000bc2:	4282      	cmp	r2, r0
 8000bc4:	f200 80f9 	bhi.w	8000dba <__udivmoddi4+0x2c6>
 8000bc8:	1a84      	subs	r4, r0, r2
 8000bca:	eb61 0303 	sbc.w	r3, r1, r3
 8000bce:	2001      	movs	r0, #1
 8000bd0:	469e      	mov	lr, r3
 8000bd2:	2d00      	cmp	r5, #0
 8000bd4:	d0e0      	beq.n	8000b98 <__udivmoddi4+0xa4>
 8000bd6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bda:	e7dd      	b.n	8000b98 <__udivmoddi4+0xa4>
 8000bdc:	b902      	cbnz	r2, 8000be0 <__udivmoddi4+0xec>
 8000bde:	deff      	udf	#255	; 0xff
 8000be0:	fab2 f282 	clz	r2, r2
 8000be4:	2a00      	cmp	r2, #0
 8000be6:	f040 8092 	bne.w	8000d0e <__udivmoddi4+0x21a>
 8000bea:	eba1 010c 	sub.w	r1, r1, ip
 8000bee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bf2:	fa1f fe8c 	uxth.w	lr, ip
 8000bf6:	2601      	movs	r6, #1
 8000bf8:	0c20      	lsrs	r0, r4, #16
 8000bfa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bfe:	fb07 1113 	mls	r1, r7, r3, r1
 8000c02:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c06:	fb0e f003 	mul.w	r0, lr, r3
 8000c0a:	4288      	cmp	r0, r1
 8000c0c:	d908      	bls.n	8000c20 <__udivmoddi4+0x12c>
 8000c0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000c12:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c16:	d202      	bcs.n	8000c1e <__udivmoddi4+0x12a>
 8000c18:	4288      	cmp	r0, r1
 8000c1a:	f200 80cb 	bhi.w	8000db4 <__udivmoddi4+0x2c0>
 8000c1e:	4643      	mov	r3, r8
 8000c20:	1a09      	subs	r1, r1, r0
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c28:	fb07 1110 	mls	r1, r7, r0, r1
 8000c2c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c30:	fb0e fe00 	mul.w	lr, lr, r0
 8000c34:	45a6      	cmp	lr, r4
 8000c36:	d908      	bls.n	8000c4a <__udivmoddi4+0x156>
 8000c38:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c40:	d202      	bcs.n	8000c48 <__udivmoddi4+0x154>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f200 80bb 	bhi.w	8000dbe <__udivmoddi4+0x2ca>
 8000c48:	4608      	mov	r0, r1
 8000c4a:	eba4 040e 	sub.w	r4, r4, lr
 8000c4e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c52:	e79c      	b.n	8000b8e <__udivmoddi4+0x9a>
 8000c54:	f1c6 0720 	rsb	r7, r6, #32
 8000c58:	40b3      	lsls	r3, r6
 8000c5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c62:	fa20 f407 	lsr.w	r4, r0, r7
 8000c66:	fa01 f306 	lsl.w	r3, r1, r6
 8000c6a:	431c      	orrs	r4, r3
 8000c6c:	40f9      	lsrs	r1, r7
 8000c6e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c72:	fa00 f306 	lsl.w	r3, r0, r6
 8000c76:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c7a:	0c20      	lsrs	r0, r4, #16
 8000c7c:	fa1f fe8c 	uxth.w	lr, ip
 8000c80:	fb09 1118 	mls	r1, r9, r8, r1
 8000c84:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c88:	fb08 f00e 	mul.w	r0, r8, lr
 8000c8c:	4288      	cmp	r0, r1
 8000c8e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c92:	d90b      	bls.n	8000cac <__udivmoddi4+0x1b8>
 8000c94:	eb1c 0101 	adds.w	r1, ip, r1
 8000c98:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c9c:	f080 8088 	bcs.w	8000db0 <__udivmoddi4+0x2bc>
 8000ca0:	4288      	cmp	r0, r1
 8000ca2:	f240 8085 	bls.w	8000db0 <__udivmoddi4+0x2bc>
 8000ca6:	f1a8 0802 	sub.w	r8, r8, #2
 8000caa:	4461      	add	r1, ip
 8000cac:	1a09      	subs	r1, r1, r0
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cb4:	fb09 1110 	mls	r1, r9, r0, r1
 8000cb8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cbc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cc0:	458e      	cmp	lr, r1
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x1e2>
 8000cc4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ccc:	d26c      	bcs.n	8000da8 <__udivmoddi4+0x2b4>
 8000cce:	458e      	cmp	lr, r1
 8000cd0:	d96a      	bls.n	8000da8 <__udivmoddi4+0x2b4>
 8000cd2:	3802      	subs	r0, #2
 8000cd4:	4461      	add	r1, ip
 8000cd6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cda:	fba0 9402 	umull	r9, r4, r0, r2
 8000cde:	eba1 010e 	sub.w	r1, r1, lr
 8000ce2:	42a1      	cmp	r1, r4
 8000ce4:	46c8      	mov	r8, r9
 8000ce6:	46a6      	mov	lr, r4
 8000ce8:	d356      	bcc.n	8000d98 <__udivmoddi4+0x2a4>
 8000cea:	d053      	beq.n	8000d94 <__udivmoddi4+0x2a0>
 8000cec:	b15d      	cbz	r5, 8000d06 <__udivmoddi4+0x212>
 8000cee:	ebb3 0208 	subs.w	r2, r3, r8
 8000cf2:	eb61 010e 	sbc.w	r1, r1, lr
 8000cf6:	fa01 f707 	lsl.w	r7, r1, r7
 8000cfa:	fa22 f306 	lsr.w	r3, r2, r6
 8000cfe:	40f1      	lsrs	r1, r6
 8000d00:	431f      	orrs	r7, r3
 8000d02:	e9c5 7100 	strd	r7, r1, [r5]
 8000d06:	2600      	movs	r6, #0
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	f1c2 0320 	rsb	r3, r2, #32
 8000d12:	40d8      	lsrs	r0, r3
 8000d14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d18:	fa21 f303 	lsr.w	r3, r1, r3
 8000d1c:	4091      	lsls	r1, r2
 8000d1e:	4301      	orrs	r1, r0
 8000d20:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d24:	fa1f fe8c 	uxth.w	lr, ip
 8000d28:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d2c:	fb07 3610 	mls	r6, r7, r0, r3
 8000d30:	0c0b      	lsrs	r3, r1, #16
 8000d32:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d36:	fb00 f60e 	mul.w	r6, r0, lr
 8000d3a:	429e      	cmp	r6, r3
 8000d3c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x260>
 8000d42:	eb1c 0303 	adds.w	r3, ip, r3
 8000d46:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d4a:	d22f      	bcs.n	8000dac <__udivmoddi4+0x2b8>
 8000d4c:	429e      	cmp	r6, r3
 8000d4e:	d92d      	bls.n	8000dac <__udivmoddi4+0x2b8>
 8000d50:	3802      	subs	r0, #2
 8000d52:	4463      	add	r3, ip
 8000d54:	1b9b      	subs	r3, r3, r6
 8000d56:	b289      	uxth	r1, r1
 8000d58:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d5c:	fb07 3316 	mls	r3, r7, r6, r3
 8000d60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d64:	fb06 f30e 	mul.w	r3, r6, lr
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x28a>
 8000d6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d70:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d74:	d216      	bcs.n	8000da4 <__udivmoddi4+0x2b0>
 8000d76:	428b      	cmp	r3, r1
 8000d78:	d914      	bls.n	8000da4 <__udivmoddi4+0x2b0>
 8000d7a:	3e02      	subs	r6, #2
 8000d7c:	4461      	add	r1, ip
 8000d7e:	1ac9      	subs	r1, r1, r3
 8000d80:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d84:	e738      	b.n	8000bf8 <__udivmoddi4+0x104>
 8000d86:	462e      	mov	r6, r5
 8000d88:	4628      	mov	r0, r5
 8000d8a:	e705      	b.n	8000b98 <__udivmoddi4+0xa4>
 8000d8c:	4606      	mov	r6, r0
 8000d8e:	e6e3      	b.n	8000b58 <__udivmoddi4+0x64>
 8000d90:	4618      	mov	r0, r3
 8000d92:	e6f8      	b.n	8000b86 <__udivmoddi4+0x92>
 8000d94:	454b      	cmp	r3, r9
 8000d96:	d2a9      	bcs.n	8000cec <__udivmoddi4+0x1f8>
 8000d98:	ebb9 0802 	subs.w	r8, r9, r2
 8000d9c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000da0:	3801      	subs	r0, #1
 8000da2:	e7a3      	b.n	8000cec <__udivmoddi4+0x1f8>
 8000da4:	4646      	mov	r6, r8
 8000da6:	e7ea      	b.n	8000d7e <__udivmoddi4+0x28a>
 8000da8:	4620      	mov	r0, r4
 8000daa:	e794      	b.n	8000cd6 <__udivmoddi4+0x1e2>
 8000dac:	4640      	mov	r0, r8
 8000dae:	e7d1      	b.n	8000d54 <__udivmoddi4+0x260>
 8000db0:	46d0      	mov	r8, sl
 8000db2:	e77b      	b.n	8000cac <__udivmoddi4+0x1b8>
 8000db4:	3b02      	subs	r3, #2
 8000db6:	4461      	add	r1, ip
 8000db8:	e732      	b.n	8000c20 <__udivmoddi4+0x12c>
 8000dba:	4630      	mov	r0, r6
 8000dbc:	e709      	b.n	8000bd2 <__udivmoddi4+0xde>
 8000dbe:	4464      	add	r4, ip
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	e742      	b.n	8000c4a <__udivmoddi4+0x156>

08000dc4 <__aeabi_idiv0>:
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop

08000dc8 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	0a5a      	lsrs	r2, r3, #9
 8000dd8:	490f      	ldr	r1, [pc, #60]	; (8000e18 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000dda:	fba1 1202 	umull	r1, r2, r1, r2
 8000dde:	09d2      	lsrs	r2, r2, #7
 8000de0:	490e      	ldr	r1, [pc, #56]	; (8000e1c <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000de2:	fb01 f202 	mul.w	r2, r1, r2
 8000de6:	1a9b      	subs	r3, r3, r2
 8000de8:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	0a5b      	lsrs	r3, r3, #9
 8000df0:	4a09      	ldr	r2, [pc, #36]	; (8000e18 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000df2:	fba2 2303 	umull	r2, r3, r2, r3
 8000df6:	09db      	lsrs	r3, r3, #7
 8000df8:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	441a      	add	r2, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	68fa      	ldr	r2, [r7, #12]
 8000e0a:	601a      	str	r2, [r3, #0]
}
 8000e0c:	bf00      	nop
 8000e0e:	3714      	adds	r7, #20
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	00044b83 	.word	0x00044b83
 8000e1c:	3b9aca00 	.word	0x3b9aca00

08000e20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e24:	f004 fa8c 	bl	8005340 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e28:	f000 f812 	bl	8000e50 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e2c:	f000 fa10 	bl	8001250 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000e30:	f000 f9e6 	bl	8001200 <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 8000e34:	f000 f9b6 	bl	80011a4 <_ZL19MX_USART2_UART_Initv>
  MX_TIM1_Init();
 8000e38:	f000 f87e 	bl	8000f38 <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 8000e3c:	f000 f8de 	bl	8000ffc <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 8000e40:	f000 f952 	bl	80010e8 <_ZL12MX_TIM3_Initv>
  /* USER CODE BEGIN 2 */
  setup();
 8000e44:	f003 f9d6 	bl	80041f4 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 8000e48:	f003 fa00 	bl	800424c <loop>
 8000e4c:	e7fc      	b.n	8000e48 <main+0x28>
	...

08000e50 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b094      	sub	sp, #80	; 0x50
 8000e54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e56:	f107 0320 	add.w	r3, r7, #32
 8000e5a:	2230      	movs	r2, #48	; 0x30
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f007 fe96 	bl	8008b90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e64:	f107 030c 	add.w	r3, r7, #12
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e74:	2300      	movs	r3, #0
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	4b2d      	ldr	r3, [pc, #180]	; (8000f30 <_Z18SystemClock_Configv+0xe0>)
 8000e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7c:	4a2c      	ldr	r2, [pc, #176]	; (8000f30 <_Z18SystemClock_Configv+0xe0>)
 8000e7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e82:	6413      	str	r3, [r2, #64]	; 0x40
 8000e84:	4b2a      	ldr	r3, [pc, #168]	; (8000f30 <_Z18SystemClock_Configv+0xe0>)
 8000e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e90:	2300      	movs	r3, #0
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	4b27      	ldr	r3, [pc, #156]	; (8000f34 <_Z18SystemClock_Configv+0xe4>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a26      	ldr	r2, [pc, #152]	; (8000f34 <_Z18SystemClock_Configv+0xe4>)
 8000e9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e9e:	6013      	str	r3, [r2, #0]
 8000ea0:	4b24      	ldr	r3, [pc, #144]	; (8000f34 <_Z18SystemClock_Configv+0xe4>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000eac:	2301      	movs	r3, #1
 8000eae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000eb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ec0:	2308      	movs	r3, #8
 8000ec2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ec4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ec8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ece:	2304      	movs	r3, #4
 8000ed0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed2:	f107 0320 	add.w	r3, r7, #32
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f005 f992 	bl	8006200 <HAL_RCC_OscConfig>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	bf14      	ite	ne
 8000ee2:	2301      	movne	r3, #1
 8000ee4:	2300      	moveq	r3, #0
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <_Z18SystemClock_Configv+0xa0>
  {
    Error_Handler();
 8000eec:	f000 fa10 	bl	8001310 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ef0:	230f      	movs	r3, #15
 8000ef2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000efc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f00:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f06:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f08:	f107 030c 	add.w	r3, r7, #12
 8000f0c:	2105      	movs	r1, #5
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f005 fbee 	bl	80066f0 <HAL_RCC_ClockConfig>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	bf14      	ite	ne
 8000f1a:	2301      	movne	r3, #1
 8000f1c:	2300      	moveq	r3, #0
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <_Z18SystemClock_Configv+0xd8>
  {
    Error_Handler();
 8000f24:	f000 f9f4 	bl	8001310 <Error_Handler>
  }
}
 8000f28:	bf00      	nop
 8000f2a:	3750      	adds	r7, #80	; 0x50
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40007000 	.word	0x40007000

08000f38 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08c      	sub	sp, #48	; 0x30
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f3e:	f107 030c 	add.w	r3, r7, #12
 8000f42:	2224      	movs	r2, #36	; 0x24
 8000f44:	2100      	movs	r1, #0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f007 fe22 	bl	8008b90 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f54:	4b27      	ldr	r3, [pc, #156]	; (8000ff4 <_ZL12MX_TIM1_Initv+0xbc>)
 8000f56:	4a28      	ldr	r2, [pc, #160]	; (8000ff8 <_ZL12MX_TIM1_Initv+0xc0>)
 8000f58:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f5a:	4b26      	ldr	r3, [pc, #152]	; (8000ff4 <_ZL12MX_TIM1_Initv+0xbc>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f60:	4b24      	ldr	r3, [pc, #144]	; (8000ff4 <_ZL12MX_TIM1_Initv+0xbc>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f66:	4b23      	ldr	r3, [pc, #140]	; (8000ff4 <_ZL12MX_TIM1_Initv+0xbc>)
 8000f68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f6c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f6e:	4b21      	ldr	r3, [pc, #132]	; (8000ff4 <_ZL12MX_TIM1_Initv+0xbc>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f74:	4b1f      	ldr	r3, [pc, #124]	; (8000ff4 <_ZL12MX_TIM1_Initv+0xbc>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f7a:	4b1e      	ldr	r3, [pc, #120]	; (8000ff4 <_ZL12MX_TIM1_Initv+0xbc>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f80:	2303      	movs	r3, #3
 8000f82:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f84:	2300      	movs	r3, #0
 8000f86:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f94:	2300      	movs	r3, #0
 8000f96:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000fa4:	f107 030c 	add.w	r3, r7, #12
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4812      	ldr	r0, [pc, #72]	; (8000ff4 <_ZL12MX_TIM1_Initv+0xbc>)
 8000fac:	f005 fed8 	bl	8006d60 <HAL_TIM_Encoder_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	bf14      	ite	ne
 8000fb6:	2301      	movne	r3, #1
 8000fb8:	2300      	moveq	r3, #0
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <_ZL12MX_TIM1_Initv+0x8c>
  {
    Error_Handler();
 8000fc0:	f000 f9a6 	bl	8001310 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fcc:	1d3b      	adds	r3, r7, #4
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4808      	ldr	r0, [pc, #32]	; (8000ff4 <_ZL12MX_TIM1_Initv+0xbc>)
 8000fd2:	f006 fb31 	bl	8007638 <HAL_TIMEx_MasterConfigSynchronization>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	bf14      	ite	ne
 8000fdc:	2301      	movne	r3, #1
 8000fde:	2300      	moveq	r3, #0
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <_ZL12MX_TIM1_Initv+0xb2>
  {
    Error_Handler();
 8000fe6:	f000 f993 	bl	8001310 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000fea:	bf00      	nop
 8000fec:	3730      	adds	r7, #48	; 0x30
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000094 	.word	0x20000094
 8000ff8:	40010000 	.word	0x40010000

08000ffc <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08a      	sub	sp, #40	; 0x28
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001002:	f107 0320 	add.w	r3, r7, #32
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800100c:	1d3b      	adds	r3, r7, #4
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]
 8001014:	609a      	str	r2, [r3, #8]
 8001016:	60da      	str	r2, [r3, #12]
 8001018:	611a      	str	r2, [r3, #16]
 800101a:	615a      	str	r2, [r3, #20]
 800101c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800101e:	4b31      	ldr	r3, [pc, #196]	; (80010e4 <_ZL12MX_TIM2_Initv+0xe8>)
 8001020:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001024:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42;
 8001026:	4b2f      	ldr	r3, [pc, #188]	; (80010e4 <_ZL12MX_TIM2_Initv+0xe8>)
 8001028:	222a      	movs	r2, #42	; 0x2a
 800102a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800102c:	4b2d      	ldr	r3, [pc, #180]	; (80010e4 <_ZL12MX_TIM2_Initv+0xe8>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8001032:	4b2c      	ldr	r3, [pc, #176]	; (80010e4 <_ZL12MX_TIM2_Initv+0xe8>)
 8001034:	2263      	movs	r2, #99	; 0x63
 8001036:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001038:	4b2a      	ldr	r3, [pc, #168]	; (80010e4 <_ZL12MX_TIM2_Initv+0xe8>)
 800103a:	2200      	movs	r2, #0
 800103c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800103e:	4b29      	ldr	r3, [pc, #164]	; (80010e4 <_ZL12MX_TIM2_Initv+0xe8>)
 8001040:	2200      	movs	r2, #0
 8001042:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001044:	4827      	ldr	r0, [pc, #156]	; (80010e4 <_ZL12MX_TIM2_Initv+0xe8>)
 8001046:	f005 fd73 	bl	8006b30 <HAL_TIM_PWM_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	bf14      	ite	ne
 8001050:	2301      	movne	r3, #1
 8001052:	2300      	moveq	r3, #0
 8001054:	b2db      	uxtb	r3, r3
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <_ZL12MX_TIM2_Initv+0x62>
  {
    Error_Handler();
 800105a:	f000 f959 	bl	8001310 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800105e:	2300      	movs	r3, #0
 8001060:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001062:	2300      	movs	r3, #0
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001066:	f107 0320 	add.w	r3, r7, #32
 800106a:	4619      	mov	r1, r3
 800106c:	481d      	ldr	r0, [pc, #116]	; (80010e4 <_ZL12MX_TIM2_Initv+0xe8>)
 800106e:	f006 fae3 	bl	8007638 <HAL_TIMEx_MasterConfigSynchronization>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	bf14      	ite	ne
 8001078:	2301      	movne	r3, #1
 800107a:	2300      	moveq	r3, #0
 800107c:	b2db      	uxtb	r3, r3
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <_ZL12MX_TIM2_Initv+0x8a>
  {
    Error_Handler();
 8001082:	f000 f945 	bl	8001310 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001086:	2360      	movs	r3, #96	; 0x60
 8001088:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	2200      	movs	r2, #0
 800109a:	4619      	mov	r1, r3
 800109c:	4811      	ldr	r0, [pc, #68]	; (80010e4 <_ZL12MX_TIM2_Initv+0xe8>)
 800109e:	f005 ff93 	bl	8006fc8 <HAL_TIM_PWM_ConfigChannel>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	bf14      	ite	ne
 80010a8:	2301      	movne	r3, #1
 80010aa:	2300      	moveq	r3, #0
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <_ZL12MX_TIM2_Initv+0xba>
  {
    Error_Handler();
 80010b2:	f000 f92d 	bl	8001310 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	2204      	movs	r2, #4
 80010ba:	4619      	mov	r1, r3
 80010bc:	4809      	ldr	r0, [pc, #36]	; (80010e4 <_ZL12MX_TIM2_Initv+0xe8>)
 80010be:	f005 ff83 	bl	8006fc8 <HAL_TIM_PWM_ConfigChannel>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	bf14      	ite	ne
 80010c8:	2301      	movne	r3, #1
 80010ca:	2300      	moveq	r3, #0
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <_ZL12MX_TIM2_Initv+0xda>
  {
    Error_Handler();
 80010d2:	f000 f91d 	bl	8001310 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80010d6:	4803      	ldr	r0, [pc, #12]	; (80010e4 <_ZL12MX_TIM2_Initv+0xe8>)
 80010d8:	f003 ff68 	bl	8004fac <HAL_TIM_MspPostInit>

}
 80010dc:	bf00      	nop
 80010de:	3728      	adds	r7, #40	; 0x28
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	200000dc 	.word	0x200000dc

080010e8 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08c      	sub	sp, #48	; 0x30
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010ee:	f107 030c 	add.w	r3, r7, #12
 80010f2:	2224      	movs	r2, #36	; 0x24
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f007 fd4a 	bl	8008b90 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010fc:	1d3b      	adds	r3, r7, #4
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001104:	4b25      	ldr	r3, [pc, #148]	; (800119c <_ZL12MX_TIM3_Initv+0xb4>)
 8001106:	4a26      	ldr	r2, [pc, #152]	; (80011a0 <_ZL12MX_TIM3_Initv+0xb8>)
 8001108:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800110a:	4b24      	ldr	r3, [pc, #144]	; (800119c <_ZL12MX_TIM3_Initv+0xb4>)
 800110c:	2200      	movs	r2, #0
 800110e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001110:	4b22      	ldr	r3, [pc, #136]	; (800119c <_ZL12MX_TIM3_Initv+0xb4>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001116:	4b21      	ldr	r3, [pc, #132]	; (800119c <_ZL12MX_TIM3_Initv+0xb4>)
 8001118:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800111c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800111e:	4b1f      	ldr	r3, [pc, #124]	; (800119c <_ZL12MX_TIM3_Initv+0xb4>)
 8001120:	2200      	movs	r2, #0
 8001122:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001124:	4b1d      	ldr	r3, [pc, #116]	; (800119c <_ZL12MX_TIM3_Initv+0xb4>)
 8001126:	2200      	movs	r2, #0
 8001128:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800112a:	2303      	movs	r3, #3
 800112c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001132:	2301      	movs	r3, #1
 8001134:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001136:	2300      	movs	r3, #0
 8001138:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800113e:	2300      	movs	r3, #0
 8001140:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001142:	2301      	movs	r3, #1
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001146:	2300      	movs	r3, #0
 8001148:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800114e:	f107 030c 	add.w	r3, r7, #12
 8001152:	4619      	mov	r1, r3
 8001154:	4811      	ldr	r0, [pc, #68]	; (800119c <_ZL12MX_TIM3_Initv+0xb4>)
 8001156:	f005 fe03 	bl	8006d60 <HAL_TIM_Encoder_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	bf14      	ite	ne
 8001160:	2301      	movne	r3, #1
 8001162:	2300      	moveq	r3, #0
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 800116a:	f000 f8d1 	bl	8001310 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800116e:	2300      	movs	r3, #0
 8001170:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001172:	2300      	movs	r3, #0
 8001174:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	4619      	mov	r1, r3
 800117a:	4808      	ldr	r0, [pc, #32]	; (800119c <_ZL12MX_TIM3_Initv+0xb4>)
 800117c:	f006 fa5c 	bl	8007638 <HAL_TIMEx_MasterConfigSynchronization>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	bf14      	ite	ne
 8001186:	2301      	movne	r3, #1
 8001188:	2300      	moveq	r3, #0
 800118a:	b2db      	uxtb	r3, r3
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 8001190:	f000 f8be 	bl	8001310 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001194:	bf00      	nop
 8001196:	3730      	adds	r7, #48	; 0x30
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000124 	.word	0x20000124
 80011a0:	40000400 	.word	0x40000400

080011a4 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011a8:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80011aa:	4a14      	ldr	r2, [pc, #80]	; (80011fc <_ZL19MX_USART2_UART_Initv+0x58>)
 80011ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 80011ae:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80011b0:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80011b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011b6:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011bc:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80011be:	2200      	movs	r2, #0
 80011c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011c2:	4b0d      	ldr	r3, [pc, #52]	; (80011f8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011c8:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80011ca:	220c      	movs	r2, #12
 80011cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ce:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011d4:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011da:	4807      	ldr	r0, [pc, #28]	; (80011f8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80011dc:	f006 faa8 	bl	8007730 <HAL_UART_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	bf14      	ite	ne
 80011e6:	2301      	movne	r3, #1
 80011e8:	2300      	moveq	r3, #0
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80011f0:	f000 f88e 	bl	8001310 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	2000016c 	.word	0x2000016c
 80011fc:	40004400 	.word	0x40004400

08001200 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	607b      	str	r3, [r7, #4]
 800120a:	4b10      	ldr	r3, [pc, #64]	; (800124c <_ZL11MX_DMA_Initv+0x4c>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a0f      	ldr	r2, [pc, #60]	; (800124c <_ZL11MX_DMA_Initv+0x4c>)
 8001210:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b0d      	ldr	r3, [pc, #52]	; (800124c <_ZL11MX_DMA_Initv+0x4c>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800121e:	607b      	str	r3, [r7, #4]
 8001220:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001222:	2200      	movs	r2, #0
 8001224:	2100      	movs	r1, #0
 8001226:	2010      	movs	r0, #16
 8001228:	f004 f9fb 	bl	8005622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800122c:	2010      	movs	r0, #16
 800122e:	f004 fa14 	bl	800565a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2100      	movs	r1, #0
 8001236:	2011      	movs	r0, #17
 8001238:	f004 f9f3 	bl	8005622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800123c:	2011      	movs	r0, #17
 800123e:	f004 fa0c 	bl	800565a <HAL_NVIC_EnableIRQ>

}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40023800 	.word	0x40023800

08001250 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08a      	sub	sp, #40	; 0x28
 8001254:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001256:	f107 0314 	add.w	r3, r7, #20
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	4b27      	ldr	r3, [pc, #156]	; (8001308 <_ZL12MX_GPIO_Initv+0xb8>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a26      	ldr	r2, [pc, #152]	; (8001308 <_ZL12MX_GPIO_Initv+0xb8>)
 8001270:	f043 0304 	orr.w	r3, r3, #4
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
 8001276:	4b24      	ldr	r3, [pc, #144]	; (8001308 <_ZL12MX_GPIO_Initv+0xb8>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f003 0304 	and.w	r3, r3, #4
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	4b20      	ldr	r3, [pc, #128]	; (8001308 <_ZL12MX_GPIO_Initv+0xb8>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	4a1f      	ldr	r2, [pc, #124]	; (8001308 <_ZL12MX_GPIO_Initv+0xb8>)
 800128c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001290:	6313      	str	r3, [r2, #48]	; 0x30
 8001292:	4b1d      	ldr	r3, [pc, #116]	; (8001308 <_ZL12MX_GPIO_Initv+0xb8>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	4b19      	ldr	r3, [pc, #100]	; (8001308 <_ZL12MX_GPIO_Initv+0xb8>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a18      	ldr	r2, [pc, #96]	; (8001308 <_ZL12MX_GPIO_Initv+0xb8>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b16      	ldr	r3, [pc, #88]	; (8001308 <_ZL12MX_GPIO_Initv+0xb8>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	60bb      	str	r3, [r7, #8]
 80012b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	607b      	str	r3, [r7, #4]
 80012be:	4b12      	ldr	r3, [pc, #72]	; (8001308 <_ZL12MX_GPIO_Initv+0xb8>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a11      	ldr	r2, [pc, #68]	; (8001308 <_ZL12MX_GPIO_Initv+0xb8>)
 80012c4:	f043 0310 	orr.w	r3, r3, #16
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <_ZL12MX_GPIO_Initv+0xb8>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0310 	and.w	r3, r3, #16
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80012d6:	2200      	movs	r2, #0
 80012d8:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80012dc:	480b      	ldr	r0, [pc, #44]	; (800130c <_ZL12MX_GPIO_Initv+0xbc>)
 80012de:	f004 ff75 	bl	80061cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80012e2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80012e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e8:	2301      	movs	r3, #1
 80012ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2300      	movs	r3, #0
 80012f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	4619      	mov	r1, r3
 80012fa:	4804      	ldr	r0, [pc, #16]	; (800130c <_ZL12MX_GPIO_Initv+0xbc>)
 80012fc:	f004 fdca 	bl	8005e94 <HAL_GPIO_Init>

}
 8001300:	bf00      	nop
 8001302:	3728      	adds	r7, #40	; 0x28
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40023800 	.word	0x40023800
 800130c:	40020800 	.word	0x40020800

08001310 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001314:	b672      	cpsid	i
}
 8001316:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001318:	e7fe      	b.n	8001318 <Error_Handler+0x8>

0800131a <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800131a:	b480      	push	{r7}
 800131c:	b083      	sub	sp, #12
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2200      	movs	r2, #0
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4618      	mov	r0, r3
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	4a04      	ldr	r2, [pc, #16]	; (8001358 <_ZN3ros3MsgC1Ev+0x1c>)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4618      	mov	r0, r3
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	080091ac 	.word	0x080091ac

0800135c <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
      data()
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff ffe8 	bl	800133c <_ZN3ros3MsgC1Ev>
 800136c:	4a06      	ldr	r2, [pc, #24]	; (8001388 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	3304      	adds	r3, #4
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff ffcf 	bl	800131a <_ZN3ros4TimeC1Ev>
    {
    }
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4618      	mov	r0, r3
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	08009194 	.word	0x08009194

0800138c <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6859      	ldr	r1, [r3, #4]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	683a      	ldr	r2, [r7, #0]
 80013a2:	4413      	add	r3, r2
 80013a4:	b2ca      	uxtb	r2, r1
 80013a6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	0a19      	lsrs	r1, r3, #8
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	3301      	adds	r3, #1
 80013b2:	683a      	ldr	r2, [r7, #0]
 80013b4:	4413      	add	r3, r2
 80013b6:	b2ca      	uxtb	r2, r1
 80013b8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	0c19      	lsrs	r1, r3, #16
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	3302      	adds	r3, #2
 80013c4:	683a      	ldr	r2, [r7, #0]
 80013c6:	4413      	add	r3, r2
 80013c8:	b2ca      	uxtb	r2, r1
 80013ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	0e19      	lsrs	r1, r3, #24
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	3303      	adds	r3, #3
 80013d6:	683a      	ldr	r2, [r7, #0]
 80013d8:	4413      	add	r3, r2
 80013da:	b2ca      	uxtb	r2, r1
 80013dc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	3304      	adds	r3, #4
 80013e2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6899      	ldr	r1, [r3, #8]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	683a      	ldr	r2, [r7, #0]
 80013ec:	4413      	add	r3, r2
 80013ee:	b2ca      	uxtb	r2, r1
 80013f0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	0a19      	lsrs	r1, r3, #8
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	3301      	adds	r3, #1
 80013fc:	683a      	ldr	r2, [r7, #0]
 80013fe:	4413      	add	r3, r2
 8001400:	b2ca      	uxtb	r2, r1
 8001402:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	0c19      	lsrs	r1, r3, #16
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	3302      	adds	r3, #2
 800140e:	683a      	ldr	r2, [r7, #0]
 8001410:	4413      	add	r3, r2
 8001412:	b2ca      	uxtb	r2, r1
 8001414:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	0e19      	lsrs	r1, r3, #24
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	3303      	adds	r3, #3
 8001420:	683a      	ldr	r2, [r7, #0]
 8001422:	4413      	add	r3, r2
 8001424:	b2ca      	uxtb	r2, r1
 8001426:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	3304      	adds	r3, #4
 800142c:	60fb      	str	r3, [r7, #12]
      return offset;
 800142e:	68fb      	ldr	r3, [r7, #12]
    }
 8001430:	4618      	mov	r0, r3
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	4413      	add	r3, r2
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	461a      	mov	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685a      	ldr	r2, [r3, #4]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	3301      	adds	r3, #1
 8001460:	6839      	ldr	r1, [r7, #0]
 8001462:	440b      	add	r3, r1
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	021b      	lsls	r3, r3, #8
 8001468:	431a      	orrs	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685a      	ldr	r2, [r3, #4]
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	3302      	adds	r3, #2
 8001476:	6839      	ldr	r1, [r7, #0]
 8001478:	440b      	add	r3, r1
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	041b      	lsls	r3, r3, #16
 800147e:	431a      	orrs	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685a      	ldr	r2, [r3, #4]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	3303      	adds	r3, #3
 800148c:	6839      	ldr	r1, [r7, #0]
 800148e:	440b      	add	r3, r1
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	061b      	lsls	r3, r3, #24
 8001494:	431a      	orrs	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	3304      	adds	r3, #4
 800149e:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	683a      	ldr	r2, [r7, #0]
 80014a4:	4413      	add	r3, r2
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	461a      	mov	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	689a      	ldr	r2, [r3, #8]
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	3301      	adds	r3, #1
 80014b6:	6839      	ldr	r1, [r7, #0]
 80014b8:	440b      	add	r3, r1
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	021b      	lsls	r3, r3, #8
 80014be:	431a      	orrs	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689a      	ldr	r2, [r3, #8]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	3302      	adds	r3, #2
 80014cc:	6839      	ldr	r1, [r7, #0]
 80014ce:	440b      	add	r3, r1
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	041b      	lsls	r3, r3, #16
 80014d4:	431a      	orrs	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	689a      	ldr	r2, [r3, #8]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	3303      	adds	r3, #3
 80014e2:	6839      	ldr	r1, [r7, #0]
 80014e4:	440b      	add	r3, r1
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	061b      	lsls	r3, r3, #24
 80014ea:	431a      	orrs	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	3304      	adds	r3, #4
 80014f4:	60fb      	str	r3, [r7, #12]
     return offset;
 80014f6:	68fb      	ldr	r3, [r7, #12]
    }
 80014f8:	4618      	mov	r0, r3
 80014fa:	3714      	adds	r7, #20
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	4b03      	ldr	r3, [pc, #12]	; (800151c <_ZN8std_msgs4Time7getTypeEv+0x18>)
 800150e:	4618      	mov	r0, r3
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	08008ebc 	.word	0x08008ebc

08001520 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	4b03      	ldr	r3, [pc, #12]	; (8001538 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800152a:	4618      	mov	r0, r3
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	08008ecc 	.word	0x08008ecc

0800153c <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff fef8 	bl	800133c <_ZN3ros3MsgC1Ev>
 800154c:	4a0b      	ldr	r2, [pc, #44]	; (800157c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	809a      	strh	r2, [r3, #4]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a09      	ldr	r2, [pc, #36]	; (8001580 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800155c:	609a      	str	r2, [r3, #8]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a07      	ldr	r2, [pc, #28]	; (8001580 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001562:	60da      	str	r2, [r3, #12]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4a06      	ldr	r2, [pc, #24]	; (8001580 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001568:	611a      	str	r2, [r3, #16]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	615a      	str	r2, [r3, #20]
    {
    }
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4618      	mov	r0, r3
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	0800917c 	.word	0x0800917c
 8001580:	08008ef0 	.word	0x08008ef0

08001584 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001584:	b580      	push	{r7, lr}
 8001586:	b088      	sub	sp, #32
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800158e:	2300      	movs	r3, #0
 8001590:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	8899      	ldrh	r1, [r3, #4]
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	683a      	ldr	r2, [r7, #0]
 800159a:	4413      	add	r3, r2
 800159c:	b2ca      	uxtb	r2, r1
 800159e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	889b      	ldrh	r3, [r3, #4]
 80015a4:	0a1b      	lsrs	r3, r3, #8
 80015a6:	b299      	uxth	r1, r3
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	3301      	adds	r3, #1
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	4413      	add	r3, r2
 80015b0:	b2ca      	uxtb	r2, r1
 80015b2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	3302      	adds	r3, #2
 80015b8:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	4618      	mov	r0, r3
 80015c0:	f7fe fe02 	bl	80001c8 <strlen>
 80015c4:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	4413      	add	r3, r2
 80015cc:	69b9      	ldr	r1, [r7, #24]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f002 fe54 	bl	800427c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	3304      	adds	r3, #4
 80015d8:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	683a      	ldr	r2, [r7, #0]
 80015de:	18d0      	adds	r0, r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	4619      	mov	r1, r3
 80015e8:	f007 fac4 	bl	8008b74 <memcpy>
      offset += length_topic_name;
 80015ec:	69fa      	ldr	r2, [r7, #28]
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	4413      	add	r3, r2
 80015f2:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7fe fde5 	bl	80001c8 <strlen>
 80015fe:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	683a      	ldr	r2, [r7, #0]
 8001604:	4413      	add	r3, r2
 8001606:	6979      	ldr	r1, [r7, #20]
 8001608:	4618      	mov	r0, r3
 800160a:	f002 fe37 	bl	800427c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3304      	adds	r3, #4
 8001612:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	683a      	ldr	r2, [r7, #0]
 8001618:	18d0      	adds	r0, r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	697a      	ldr	r2, [r7, #20]
 8001620:	4619      	mov	r1, r3
 8001622:	f007 faa7 	bl	8008b74 <memcpy>
      offset += length_message_type;
 8001626:	69fa      	ldr	r2, [r7, #28]
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	4413      	add	r3, r2
 800162c:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	4618      	mov	r0, r3
 8001634:	f7fe fdc8 	bl	80001c8 <strlen>
 8001638:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	4413      	add	r3, r2
 8001640:	6939      	ldr	r1, [r7, #16]
 8001642:	4618      	mov	r0, r3
 8001644:	f002 fe1a 	bl	800427c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	3304      	adds	r3, #4
 800164c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	18d0      	adds	r0, r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	691b      	ldr	r3, [r3, #16]
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	4619      	mov	r1, r3
 800165c:	f007 fa8a 	bl	8008b74 <memcpy>
      offset += length_md5sum;
 8001660:	69fa      	ldr	r2, [r7, #28]
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	4413      	add	r3, r2
 8001666:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	695b      	ldr	r3, [r3, #20]
 800166c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800166e:	68f9      	ldr	r1, [r7, #12]
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	4413      	add	r3, r2
 8001676:	b2ca      	uxtb	r2, r1
 8001678:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	0a19      	lsrs	r1, r3, #8
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	3301      	adds	r3, #1
 8001682:	683a      	ldr	r2, [r7, #0]
 8001684:	4413      	add	r3, r2
 8001686:	b2ca      	uxtb	r2, r1
 8001688:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	0c19      	lsrs	r1, r3, #16
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	3302      	adds	r3, #2
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	4413      	add	r3, r2
 8001696:	b2ca      	uxtb	r2, r1
 8001698:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	0e19      	lsrs	r1, r3, #24
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	3303      	adds	r3, #3
 80016a2:	683a      	ldr	r2, [r7, #0]
 80016a4:	4413      	add	r3, r2
 80016a6:	b2ca      	uxtb	r2, r1
 80016a8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	3304      	adds	r3, #4
 80016ae:	61fb      	str	r3, [r7, #28]
      return offset;
 80016b0:	69fb      	ldr	r3, [r7, #28]
    }
 80016b2:	4618      	mov	r0, r3
 80016b4:	3720      	adds	r7, #32
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b08a      	sub	sp, #40	; 0x28
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
 80016c2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	4413      	add	r3, r2
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	889b      	ldrh	r3, [r3, #4]
 80016da:	b21a      	sxth	r2, r3
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	3301      	adds	r3, #1
 80016e0:	6839      	ldr	r1, [r7, #0]
 80016e2:	440b      	add	r3, r1
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	021b      	lsls	r3, r3, #8
 80016e8:	b21b      	sxth	r3, r3
 80016ea:	4313      	orrs	r3, r2
 80016ec:	b21b      	sxth	r3, r3
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	3302      	adds	r3, #2
 80016f8:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	441a      	add	r2, r3
 8001700:	f107 0314 	add.w	r3, r7, #20
 8001704:	4611      	mov	r1, r2
 8001706:	4618      	mov	r0, r3
 8001708:	f002 fdd6 	bl	80042b8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	3304      	adds	r3, #4
 8001710:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	627b      	str	r3, [r7, #36]	; 0x24
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	4413      	add	r3, r2
 800171c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800171e:	429a      	cmp	r2, r3
 8001720:	d20c      	bcs.n	800173c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8001722:	683a      	ldr	r2, [r7, #0]
 8001724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001726:	441a      	add	r2, r3
 8001728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172a:	3b01      	subs	r3, #1
 800172c:	6839      	ldr	r1, [r7, #0]
 800172e:	440b      	add	r3, r1
 8001730:	7812      	ldrb	r2, [r2, #0]
 8001732:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001736:	3301      	adds	r3, #1
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
 800173a:	e7ec      	b.n	8001716 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	4413      	add	r3, r2
 8001742:	3b01      	subs	r3, #1
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	4413      	add	r3, r2
 8001748:	2200      	movs	r2, #0
 800174a:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	3b01      	subs	r3, #1
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	441a      	add	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	4413      	add	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	441a      	add	r2, r3
 8001766:	f107 0310 	add.w	r3, r7, #16
 800176a:	4611      	mov	r1, r2
 800176c:	4618      	mov	r0, r3
 800176e:	f002 fda3 	bl	80042b8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	3304      	adds	r3, #4
 8001776:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	623b      	str	r3, [r7, #32]
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	4413      	add	r3, r2
 8001782:	6a3a      	ldr	r2, [r7, #32]
 8001784:	429a      	cmp	r2, r3
 8001786:	d20c      	bcs.n	80017a2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	6a3b      	ldr	r3, [r7, #32]
 800178c:	441a      	add	r2, r3
 800178e:	6a3b      	ldr	r3, [r7, #32]
 8001790:	3b01      	subs	r3, #1
 8001792:	6839      	ldr	r1, [r7, #0]
 8001794:	440b      	add	r3, r1
 8001796:	7812      	ldrb	r2, [r2, #0]
 8001798:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800179a:	6a3b      	ldr	r3, [r7, #32]
 800179c:	3301      	adds	r3, #1
 800179e:	623b      	str	r3, [r7, #32]
 80017a0:	e7ec      	b.n	800177c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	4413      	add	r3, r2
 80017a8:	3b01      	subs	r3, #1
 80017aa:	683a      	ldr	r2, [r7, #0]
 80017ac:	4413      	add	r3, r2
 80017ae:	2200      	movs	r2, #0
 80017b0:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	3b01      	subs	r3, #1
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	441a      	add	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	4413      	add	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	441a      	add	r2, r3
 80017cc:	f107 030c 	add.w	r3, r7, #12
 80017d0:	4611      	mov	r1, r2
 80017d2:	4618      	mov	r0, r3
 80017d4:	f002 fd70 	bl	80042b8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	3304      	adds	r3, #4
 80017dc:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	61fb      	str	r3, [r7, #28]
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	4413      	add	r3, r2
 80017e8:	69fa      	ldr	r2, [r7, #28]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d20c      	bcs.n	8001808 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 80017ee:	683a      	ldr	r2, [r7, #0]
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	441a      	add	r2, r3
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	6839      	ldr	r1, [r7, #0]
 80017fa:	440b      	add	r3, r1
 80017fc:	7812      	ldrb	r2, [r2, #0]
 80017fe:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	3301      	adds	r3, #1
 8001804:	61fb      	str	r3, [r7, #28]
 8001806:	e7ec      	b.n	80017e2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	4413      	add	r3, r2
 800180e:	3b01      	subs	r3, #1
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	4413      	add	r3, r2
 8001814:	2200      	movs	r2, #0
 8001816:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	3b01      	subs	r3, #1
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	441a      	add	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	4413      	add	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 800182c:	2300      	movs	r3, #0
 800182e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	6839      	ldr	r1, [r7, #0]
 8001836:	440a      	add	r2, r1
 8001838:	7812      	ldrb	r2, [r2, #0]
 800183a:	4313      	orrs	r3, r2
 800183c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800183e:	68ba      	ldr	r2, [r7, #8]
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	3301      	adds	r3, #1
 8001844:	6839      	ldr	r1, [r7, #0]
 8001846:	440b      	add	r3, r1
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	021b      	lsls	r3, r3, #8
 800184c:	4313      	orrs	r3, r2
 800184e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001850:	68ba      	ldr	r2, [r7, #8]
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	3302      	adds	r3, #2
 8001856:	6839      	ldr	r1, [r7, #0]
 8001858:	440b      	add	r3, r1
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	041b      	lsls	r3, r3, #16
 800185e:	4313      	orrs	r3, r2
 8001860:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001862:	68ba      	ldr	r2, [r7, #8]
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	3303      	adds	r3, #3
 8001868:	6839      	ldr	r1, [r7, #0]
 800186a:	440b      	add	r3, r1
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	061b      	lsls	r3, r3, #24
 8001870:	4313      	orrs	r3, r2
 8001872:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001874:	68ba      	ldr	r2, [r7, #8]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	3304      	adds	r3, #4
 800187e:	61bb      	str	r3, [r7, #24]
     return offset;
 8001880:	69bb      	ldr	r3, [r7, #24]
    }
 8001882:	4618      	mov	r0, r3
 8001884:	3728      	adds	r7, #40	; 0x28
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
	...

0800188c <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	4b03      	ldr	r3, [pc, #12]	; (80018a4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001896:	4618      	mov	r0, r3
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	08008ef4 	.word	0x08008ef4

080018a8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	4b03      	ldr	r3, [pc, #12]	; (80018c0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80018b2:	4618      	mov	r0, r3
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	08008f10 	.word	0x08008f10

080018c4 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff fd34 	bl	800133c <_ZN3ros3MsgC1Ev>
 80018d4:	4a06      	ldr	r2, [pc, #24]	; (80018f0 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	711a      	strb	r2, [r3, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4a04      	ldr	r2, [pc, #16]	; (80018f4 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80018e4:	609a      	str	r2, [r3, #8]
    {
    }
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4618      	mov	r0, r3
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	08009164 	.word	0x08009164
 80018f4:	08008ef0 	.word	0x08008ef0

080018f8 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	4413      	add	r3, r2
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	7912      	ldrb	r2, [r2, #4]
 8001910:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	3301      	adds	r3, #1
 8001916:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	4618      	mov	r0, r3
 800191e:	f7fe fc53 	bl	80001c8 <strlen>
 8001922:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	4413      	add	r3, r2
 800192a:	68b9      	ldr	r1, [r7, #8]
 800192c:	4618      	mov	r0, r3
 800192e:	f002 fca5 	bl	800427c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	3304      	adds	r3, #4
 8001936:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	683a      	ldr	r2, [r7, #0]
 800193c:	18d0      	adds	r0, r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	4619      	mov	r1, r3
 8001946:	f007 f915 	bl	8008b74 <memcpy>
      offset += length_msg;
 800194a:	68fa      	ldr	r2, [r7, #12]
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	4413      	add	r3, r2
 8001950:	60fb      	str	r3, [r7, #12]
      return offset;
 8001952:	68fb      	ldr	r3, [r7, #12]
    }
 8001954:	4618      	mov	r0, r3
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001966:	2300      	movs	r3, #0
 8001968:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	4413      	add	r3, r2
 8001970:	781a      	ldrb	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	3301      	adds	r3, #1
 800197a:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	441a      	add	r2, r3
 8001982:	f107 030c 	add.w	r3, r7, #12
 8001986:	4611      	mov	r1, r2
 8001988:	4618      	mov	r0, r3
 800198a:	f002 fc95 	bl	80042b8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	3304      	adds	r3, #4
 8001992:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	617b      	str	r3, [r7, #20]
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	4413      	add	r3, r2
 800199e:	697a      	ldr	r2, [r7, #20]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d20c      	bcs.n	80019be <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 80019a4:	683a      	ldr	r2, [r7, #0]
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	441a      	add	r2, r3
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	3b01      	subs	r3, #1
 80019ae:	6839      	ldr	r1, [r7, #0]
 80019b0:	440b      	add	r3, r1
 80019b2:	7812      	ldrb	r2, [r2, #0]
 80019b4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	3301      	adds	r3, #1
 80019ba:	617b      	str	r3, [r7, #20]
 80019bc:	e7ec      	b.n	8001998 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	4413      	add	r3, r2
 80019c4:	3b01      	subs	r3, #1
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	4413      	add	r3, r2
 80019ca:	2200      	movs	r2, #0
 80019cc:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	3b01      	subs	r3, #1
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	441a      	add	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	4413      	add	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
     return offset;
 80019e2:	693b      	ldr	r3, [r7, #16]
    }
 80019e4:	4618      	mov	r0, r3
 80019e6:	3718      	adds	r7, #24
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	4b03      	ldr	r3, [pc, #12]	; (8001a04 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80019f6:	4618      	mov	r0, r3
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	08008f34 	.word	0x08008f34

08001a08 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	4b03      	ldr	r3, [pc, #12]	; (8001a20 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001a12:	4618      	mov	r0, r3
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	08008f48 	.word	0x08008f48

08001a24 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff fc84 	bl	800133c <_ZN3ros3MsgC1Ev>
 8001a34:	4a11      	ldr	r2, [pc, #68]	; (8001a7c <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	605a      	str	r2, [r3, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	60da      	str	r2, [r3, #12]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	611a      	str	r2, [r3, #16]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f04f 0200 	mov.w	r2, #0
 8001a58:	615a      	str	r2, [r3, #20]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	619a      	str	r2, [r3, #24]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	61da      	str	r2, [r3, #28]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	621a      	str	r2, [r3, #32]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4618      	mov	r0, r3
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	0800914c 	.word	0x0800914c

08001a80 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08a      	sub	sp, #40	; 0x28
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6859      	ldr	r1, [r3, #4]
 8001a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a94:	683a      	ldr	r2, [r7, #0]
 8001a96:	4413      	add	r3, r2
 8001a98:	b2ca      	uxtb	r2, r1
 8001a9a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	0a19      	lsrs	r1, r3, #8
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	b2ca      	uxtb	r2, r1
 8001aac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	0c19      	lsrs	r1, r3, #16
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab6:	3302      	adds	r3, #2
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	4413      	add	r3, r2
 8001abc:	b2ca      	uxtb	r2, r1
 8001abe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	0e19      	lsrs	r1, r3, #24
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	3303      	adds	r3, #3
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	4413      	add	r3, r2
 8001ace:	b2ca      	uxtb	r2, r1
 8001ad0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad4:	3304      	adds	r3, #4
 8001ad6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001ad8:	2300      	movs	r3, #0
 8001ada:	623b      	str	r3, [r7, #32]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	6a3a      	ldr	r2, [r7, #32]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d22b      	bcs.n	8001b3e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	68da      	ldr	r2, [r3, #12]
 8001aea:	6a3b      	ldr	r3, [r7, #32]
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4413      	add	r3, r2
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001af4:	6939      	ldr	r1, [r7, #16]
 8001af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	4413      	add	r3, r2
 8001afc:	b2ca      	uxtb	r2, r1
 8001afe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	0a19      	lsrs	r1, r3, #8
 8001b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b06:	3301      	adds	r3, #1
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	b2ca      	uxtb	r2, r1
 8001b0e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	0c19      	lsrs	r1, r3, #16
 8001b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b16:	3302      	adds	r3, #2
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	b2ca      	uxtb	r2, r1
 8001b1e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	0e19      	lsrs	r1, r3, #24
 8001b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b26:	3303      	adds	r3, #3
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	b2ca      	uxtb	r2, r1
 8001b2e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b32:	3304      	adds	r3, #4
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001b36:	6a3b      	ldr	r3, [r7, #32]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	623b      	str	r3, [r7, #32]
 8001b3c:	e7ce      	b.n	8001adc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6919      	ldr	r1, [r3, #16]
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	4413      	add	r3, r2
 8001b48:	b2ca      	uxtb	r2, r1
 8001b4a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	0a19      	lsrs	r1, r3, #8
 8001b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b54:	3301      	adds	r3, #1
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	4413      	add	r3, r2
 8001b5a:	b2ca      	uxtb	r2, r1
 8001b5c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	0c19      	lsrs	r1, r3, #16
 8001b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b66:	3302      	adds	r3, #2
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	b2ca      	uxtb	r2, r1
 8001b6e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	0e19      	lsrs	r1, r3, #24
 8001b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b78:	3303      	adds	r3, #3
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	b2ca      	uxtb	r2, r1
 8001b80:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b84:	3304      	adds	r3, #4
 8001b86:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61fb      	str	r3, [r7, #28]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	69fa      	ldr	r2, [r7, #28]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d22b      	bcs.n	8001bee <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	699a      	ldr	r2, [r3, #24]
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	4413      	add	r3, r2
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001ba4:	68f9      	ldr	r1, [r7, #12]
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	4413      	add	r3, r2
 8001bac:	b2ca      	uxtb	r2, r1
 8001bae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	0a19      	lsrs	r1, r3, #8
 8001bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	4413      	add	r3, r2
 8001bbc:	b2ca      	uxtb	r2, r1
 8001bbe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	0c19      	lsrs	r1, r3, #16
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc6:	3302      	adds	r3, #2
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	4413      	add	r3, r2
 8001bcc:	b2ca      	uxtb	r2, r1
 8001bce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	0e19      	lsrs	r1, r3, #24
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd6:	3303      	adds	r3, #3
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	4413      	add	r3, r2
 8001bdc:	b2ca      	uxtb	r2, r1
 8001bde:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be2:	3304      	adds	r3, #4
 8001be4:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	3301      	adds	r3, #1
 8001bea:	61fb      	str	r3, [r7, #28]
 8001bec:	e7ce      	b.n	8001b8c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69d9      	ldr	r1, [r3, #28]
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	b2ca      	uxtb	r2, r1
 8001bfa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	69db      	ldr	r3, [r3, #28]
 8001c00:	0a19      	lsrs	r1, r3, #8
 8001c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c04:	3301      	adds	r3, #1
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	4413      	add	r3, r2
 8001c0a:	b2ca      	uxtb	r2, r1
 8001c0c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	0c19      	lsrs	r1, r3, #16
 8001c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c16:	3302      	adds	r3, #2
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	b2ca      	uxtb	r2, r1
 8001c1e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	69db      	ldr	r3, [r3, #28]
 8001c24:	0e19      	lsrs	r1, r3, #24
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	3303      	adds	r3, #3
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	b2ca      	uxtb	r2, r1
 8001c30:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	3304      	adds	r3, #4
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001c38:	2300      	movs	r3, #0
 8001c3a:	61bb      	str	r3, [r7, #24]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	69db      	ldr	r3, [r3, #28]
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d228      	bcs.n	8001c98 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	4413      	add	r3, r2
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7fe fab8 	bl	80001c8 <strlen>
 8001c58:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	4413      	add	r3, r2
 8001c60:	6979      	ldr	r1, [r7, #20]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f002 fb0a 	bl	800427c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6a:	3304      	adds	r3, #4
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	18d0      	adds	r0, r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4413      	add	r3, r2
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	697a      	ldr	r2, [r7, #20]
 8001c82:	4619      	mov	r1, r3
 8001c84:	f006 ff76 	bl	8008b74 <memcpy>
      offset += length_stringsi;
 8001c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	3301      	adds	r3, #1
 8001c94:	61bb      	str	r3, [r7, #24]
 8001c96:	e7d1      	b.n	8001c3c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3728      	adds	r7, #40	; 0x28
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b08e      	sub	sp, #56	; 0x38
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
 8001caa:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001cac:	2300      	movs	r3, #0
 8001cae:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	683a      	ldr	r2, [r7, #0]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	021b      	lsls	r3, r3, #8
 8001cc6:	6a3a      	ldr	r2, [r7, #32]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cce:	3302      	adds	r3, #2
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	041b      	lsls	r3, r3, #16
 8001cd8:	6a3a      	ldr	r2, [r7, #32]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ce0:	3303      	adds	r3, #3
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	061b      	lsls	r3, r3, #24
 8001cea:	6a3a      	ldr	r2, [r7, #32]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cf2:	3304      	adds	r3, #4
 8001cf4:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	6a3a      	ldr	r2, [r7, #32]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d90a      	bls.n	8001d16 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	68da      	ldr	r2, [r3, #12]
 8001d04:	6a3b      	ldr	r3, [r7, #32]
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4610      	mov	r0, r2
 8001d0c:	f006 ff48 	bl	8008ba0 <realloc>
 8001d10:	4602      	mov	r2, r0
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a3a      	ldr	r2, [r7, #32]
 8001d1a:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	633b      	str	r3, [r7, #48]	; 0x30
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d236      	bcs.n	8001d98 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d32:	6839      	ldr	r1, [r7, #0]
 8001d34:	440a      	add	r2, r1
 8001d36:	7812      	ldrb	r2, [r2, #0]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001d3c:	697a      	ldr	r2, [r7, #20]
 8001d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d40:	3301      	adds	r3, #1
 8001d42:	6839      	ldr	r1, [r7, #0]
 8001d44:	440b      	add	r3, r1
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	021b      	lsls	r3, r3, #8
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001d4e:	697a      	ldr	r2, [r7, #20]
 8001d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d52:	3302      	adds	r3, #2
 8001d54:	6839      	ldr	r1, [r7, #0]
 8001d56:	440b      	add	r3, r1
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	041b      	lsls	r3, r3, #16
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001d60:	697a      	ldr	r2, [r7, #20]
 8001d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d64:	3303      	adds	r3, #3
 8001d66:	6839      	ldr	r1, [r7, #0]
 8001d68:	440b      	add	r3, r1
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	061b      	lsls	r3, r3, #24
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d7a:	3304      	adds	r3, #4
 8001d7c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	68da      	ldr	r2, [r3, #12]
 8001d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4413      	add	r3, r2
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	3208      	adds	r2, #8
 8001d8c:	6812      	ldr	r2, [r2, #0]
 8001d8e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d92:	3301      	adds	r3, #1
 8001d94:	633b      	str	r3, [r7, #48]	; 0x30
 8001d96:	e7c3      	b.n	8001d20 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001da4:	3301      	adds	r3, #1
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	4413      	add	r3, r2
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	021b      	lsls	r3, r3, #8
 8001dae:	69fa      	ldr	r2, [r7, #28]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001db6:	3302      	adds	r3, #2
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	4413      	add	r3, r2
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	041b      	lsls	r3, r3, #16
 8001dc0:	69fa      	ldr	r2, [r7, #28]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dc8:	3303      	adds	r3, #3
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	4413      	add	r3, r2
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	061b      	lsls	r3, r3, #24
 8001dd2:	69fa      	ldr	r2, [r7, #28]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dda:	3304      	adds	r3, #4
 8001ddc:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	69fa      	ldr	r2, [r7, #28]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d90a      	bls.n	8001dfe <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	699a      	ldr	r2, [r3, #24]
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	4619      	mov	r1, r3
 8001df2:	4610      	mov	r0, r2
 8001df4:	f006 fed4 	bl	8008ba0 <realloc>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	69fa      	ldr	r2, [r7, #28]
 8001e02:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001e04:	2300      	movs	r3, #0
 8001e06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d236      	bcs.n	8001e80 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001e12:	2300      	movs	r3, #0
 8001e14:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e1a:	6839      	ldr	r1, [r7, #0]
 8001e1c:	440a      	add	r2, r1
 8001e1e:	7812      	ldrb	r2, [r2, #0]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e28:	3301      	adds	r3, #1
 8001e2a:	6839      	ldr	r1, [r7, #0]
 8001e2c:	440b      	add	r3, r1
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	021b      	lsls	r3, r3, #8
 8001e32:	4313      	orrs	r3, r2
 8001e34:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e3a:	3302      	adds	r3, #2
 8001e3c:	6839      	ldr	r1, [r7, #0]
 8001e3e:	440b      	add	r3, r1
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	041b      	lsls	r3, r3, #16
 8001e44:	4313      	orrs	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e4c:	3303      	adds	r3, #3
 8001e4e:	6839      	ldr	r1, [r7, #0]
 8001e50:	440b      	add	r3, r1
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	061b      	lsls	r3, r3, #24
 8001e56:	4313      	orrs	r3, r2
 8001e58:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e62:	3304      	adds	r3, #4
 8001e64:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	699a      	ldr	r2, [r3, #24]
 8001e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4413      	add	r3, r2
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	3214      	adds	r2, #20
 8001e74:	6812      	ldr	r2, [r2, #0]
 8001e76:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e7e:	e7c3      	b.n	8001e08 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	4413      	add	r3, r2
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	4413      	add	r3, r2
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	021b      	lsls	r3, r3, #8
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e9e:	3302      	adds	r3, #2
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	041b      	lsls	r3, r3, #16
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eb0:	3303      	adds	r3, #3
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	061b      	lsls	r3, r3, #24
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ec2:	3304      	adds	r3, #4
 8001ec4:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d90a      	bls.n	8001ee6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4610      	mov	r0, r2
 8001edc:	f006 fe60 	bl	8008ba0 <realloc>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001eec:	2300      	movs	r3, #0
 8001eee:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d23f      	bcs.n	8001f7a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	441a      	add	r2, r3
 8001f00:	f107 030c 	add.w	r3, r7, #12
 8001f04:	4611      	mov	r1, r2
 8001f06:	4618      	mov	r0, r3
 8001f08:	f002 f9d6 	bl	80042b8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f0e:	3304      	adds	r3, #4
 8001f10:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f14:	627b      	str	r3, [r7, #36]	; 0x24
 8001f16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d20c      	bcs.n	8001f3c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f26:	441a      	add	r2, r3
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	6839      	ldr	r1, [r7, #0]
 8001f2e:	440b      	add	r3, r1
 8001f30:	7812      	ldrb	r2, [r2, #0]
 8001f32:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f36:	3301      	adds	r3, #1
 8001f38:	627b      	str	r3, [r7, #36]	; 0x24
 8001f3a:	e7ec      	b.n	8001f16 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001f3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	4413      	add	r3, r2
 8001f42:	3b01      	subs	r3, #1
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	4413      	add	r3, r2
 8001f48:	2200      	movs	r2, #0
 8001f4a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	441a      	add	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001f58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	4413      	add	r3, r2
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	3220      	adds	r2, #32
 8001f6e:	6812      	ldr	r2, [r2, #0]
 8001f70:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f74:	3301      	adds	r3, #1
 8001f76:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f78:	e7ba      	b.n	8001ef0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8001f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3738      	adds	r7, #56	; 0x38
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	4b03      	ldr	r3, [pc, #12]	; (8001f9c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8001f8e:	4618      	mov	r0, r3
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	08009088 	.word	0x08009088

08001fa0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	4b03      	ldr	r3, [pc, #12]	; (8001fb8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001faa:	4618      	mov	r0, r3
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	08008f6c 	.word	0x08008f6c

08001fbc <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
 8001fc8:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	68ba      	ldr	r2, [r7, #8]
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	611a      	str	r2, [r3, #16]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b082      	sub	sp, #8
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
 8001ff2:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68d8      	ldr	r0, [r3, #12]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	6891      	ldr	r1, [r2, #8]
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	4798      	blx	r3
 8002008:	4603      	mov	r3, r0
  };
 800200a:	4618      	mov	r0, r3
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	691b      	ldr	r3, [r3, #16]
  }
 800201e:	4618      	mov	r0, r3
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002040:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002044:	4618      	mov	r0, r3
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a0a      	ldr	r2, [pc, #40]	; (8002084 <_ZN13STM32HardwareC1Ev+0x34>)
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4618      	mov	r0, r3
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	2000016c 	.word	0x2000016c

08002088 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 f804 	bl	800209e <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 800209e:	b580      	push	{r7, lr}
 80020a0:	b082      	sub	sp, #8
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6818      	ldr	r0, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	3304      	adds	r3, #4
 80020ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020b2:	4619      	mov	r1, r3
 80020b4:	f005 fc08 	bl	80078c8 <HAL_UART_Receive_DMA>
    }
 80020b8:	bf00      	nop
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <_ZN13STM32Hardware4readEv>:

    int read(){
 80020c0:	b590      	push	{r4, r7, lr}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
      int c = -1;
 80020c8:	f04f 33ff 	mov.w	r3, #4294967295
 80020cc:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f7ff ffa8 	bl	800202a <_ZN13STM32Hardware10getRdmaIndEv>
 80020da:	4603      	mov	r3, r0
 80020dc:	429c      	cmp	r4, r3
 80020de:	bf14      	ite	ne
 80020e0:	2301      	movne	r3, #1
 80020e2:	2300      	moveq	r3, #0
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d012      	beq.n	8002110 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80020f0:	1c59      	adds	r1, r3, #1
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	4413      	add	r3, r2
 80020fc:	791b      	ldrb	r3, [r3, #4]
 80020fe:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002106:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8002110:	68fb      	ldr	r3, [r7, #12]
    }
 8002112:	4618      	mov	r0, r3
 8002114:	3714      	adds	r7, #20
 8002116:	46bd      	mov	sp, r7
 8002118:	bd90      	pop	{r4, r7, pc}
	...

0800211c <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b20      	cmp	r3, #32
 8002130:	d108      	bne.n	8002144 <_ZN13STM32Hardware5flushEv+0x28>
 8002132:	4b28      	ldr	r3, [pc, #160]	; (80021d4 <_ZN13STM32Hardware5flushEv+0xb8>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	f083 0301 	eor.w	r3, r3, #1
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <_ZN13STM32Hardware5flushEv+0x28>
 8002140:	2301      	movs	r3, #1
 8002142:	e000      	b.n	8002146 <_ZN13STM32Hardware5flushEv+0x2a>
 8002144:	2300      	movs	r3, #0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d03f      	beq.n	80021ca <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 800214a:	4b22      	ldr	r3, [pc, #136]	; (80021d4 <_ZN13STM32Hardware5flushEv+0xb8>)
 800214c:	2201      	movs	r2, #1
 800214e:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800215c:	429a      	cmp	r2, r3
 800215e:	d031      	beq.n	80021c4 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800216c:	429a      	cmp	r2, r3
 800216e:	d20a      	bcs.n	8002186 <_ZN13STM32Hardware5flushEv+0x6a>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002176:	b29a      	uxth	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800217e:	b29b      	uxth	r3, r3
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	b29b      	uxth	r3, r3
 8002184:	e006      	b.n	8002194 <_ZN13STM32Hardware5flushEv+0x78>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800218c:	b29b      	uxth	r3, r3
 800218e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002192:	b29b      	uxth	r3, r3
 8002194:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6818      	ldr	r0, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80021a0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	4413      	add	r3, r2
 80021a8:	89fa      	ldrh	r2, [r7, #14]
 80021aa:	4619      	mov	r1, r3
 80021ac:	f005 fb0e 	bl	80077cc <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80021b6:	89fb      	ldrh	r3, [r7, #14]
 80021b8:	4413      	add	r3, r2
 80021ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 80021c4:	4b03      	ldr	r3, [pc, #12]	; (80021d4 <_ZN13STM32Hardware5flushEv+0xb8>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	701a      	strb	r2, [r3, #0]
      }
    }
 80021ca:	bf00      	nop
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	20000270 	.word	0x20000270

080021d8 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
      int n = length;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021ee:	bfa8      	it	ge
 80021f0:	f44f 7300 	movge.w	r3, #512	; 0x200
 80021f4:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80021fc:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	4293      	cmp	r3, r2
 8002204:	bf28      	it	cs
 8002206:	4613      	movcs	r3, r2
 8002208:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002210:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	4413      	add	r3, r2
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	68b9      	ldr	r1, [r7, #8]
 800221c:	4618      	mov	r0, r3
 800221e:	f006 fca9 	bl	8008b74 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	4413      	add	r3, r2
 800222c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8002236:	697a      	ldr	r2, [r7, #20]
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	429a      	cmp	r2, r3
 800223c:	d00b      	beq.n	8002256 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	68ba      	ldr	r2, [r7, #8]
 8002248:	18d1      	adds	r1, r2, r3
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	461a      	mov	r2, r3
 8002252:	f006 fc8f 	bl	8008b74 <memcpy>
      }

      flush();
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f7ff ff60 	bl	800211c <_ZN13STM32Hardware5flushEv>
    }
 800225c:	bf00      	nop
 800225e:	3718      	adds	r7, #24
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	f003 f8ce 	bl	800540c <HAL_GetTick>
 8002270:	4603      	mov	r3, r0
 8002272:	4618      	mov	r0, r3
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
	...

0800227c <_ZN8std_msgs7Float64C1Ev>:
  {
    public:
      typedef double _data_type;
      _data_type data;

    Float64():
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
      data(0)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff f858 	bl	800133c <_ZN3ros3MsgC1Ev>
 800228c:	4a07      	ldr	r2, [pc, #28]	; (80022ac <_ZN8std_msgs7Float64C1Ev+0x30>)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	f04f 0200 	mov.w	r2, #0
 8002298:	f04f 0300 	mov.w	r3, #0
 800229c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    {
    }
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4618      	mov	r0, r3
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	08009108 	.word	0x08009108

080022b0 <_ZNK8std_msgs7Float649serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80022b0:	b480      	push	{r7}
 80022b2:	b087      	sub	sp, #28
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80022ba:	2300      	movs	r3, #0
 80022bc:	617b      	str	r3, [r7, #20]
      union {
        double real;
        uint64_t base;
      } u_data;
      u_data.real = this->data;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80022c4:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 80022c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022cc:	6979      	ldr	r1, [r7, #20]
 80022ce:	6838      	ldr	r0, [r7, #0]
 80022d0:	4401      	add	r1, r0
 80022d2:	b2d3      	uxtb	r3, r2
 80022d4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 80022d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80022da:	f04f 0200 	mov.w	r2, #0
 80022de:	f04f 0300 	mov.w	r3, #0
 80022e2:	0a02      	lsrs	r2, r0, #8
 80022e4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80022e8:	0a0b      	lsrs	r3, r1, #8
 80022ea:	6979      	ldr	r1, [r7, #20]
 80022ec:	3101      	adds	r1, #1
 80022ee:	6838      	ldr	r0, [r7, #0]
 80022f0:	4401      	add	r1, r0
 80022f2:	b2d3      	uxtb	r3, r2
 80022f4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 80022f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80022fa:	f04f 0200 	mov.w	r2, #0
 80022fe:	f04f 0300 	mov.w	r3, #0
 8002302:	0c02      	lsrs	r2, r0, #16
 8002304:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002308:	0c0b      	lsrs	r3, r1, #16
 800230a:	6979      	ldr	r1, [r7, #20]
 800230c:	3102      	adds	r1, #2
 800230e:	6838      	ldr	r0, [r7, #0]
 8002310:	4401      	add	r1, r0
 8002312:	b2d3      	uxtb	r3, r2
 8002314:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 8002316:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800231a:	f04f 0200 	mov.w	r2, #0
 800231e:	f04f 0300 	mov.w	r3, #0
 8002322:	0e02      	lsrs	r2, r0, #24
 8002324:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002328:	0e0b      	lsrs	r3, r1, #24
 800232a:	6979      	ldr	r1, [r7, #20]
 800232c:	3103      	adds	r1, #3
 800232e:	6838      	ldr	r0, [r7, #0]
 8002330:	4401      	add	r1, r0
 8002332:	b2d3      	uxtb	r3, r2
 8002334:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_data.base >> (8 * 4)) & 0xFF;
 8002336:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800233a:	f04f 0200 	mov.w	r2, #0
 800233e:	f04f 0300 	mov.w	r3, #0
 8002342:	000a      	movs	r2, r1
 8002344:	2300      	movs	r3, #0
 8002346:	6979      	ldr	r1, [r7, #20]
 8002348:	3104      	adds	r1, #4
 800234a:	6838      	ldr	r0, [r7, #0]
 800234c:	4401      	add	r1, r0
 800234e:	b2d3      	uxtb	r3, r2
 8002350:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_data.base >> (8 * 5)) & 0xFF;
 8002352:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002356:	f04f 0200 	mov.w	r2, #0
 800235a:	f04f 0300 	mov.w	r3, #0
 800235e:	0a0a      	lsrs	r2, r1, #8
 8002360:	2300      	movs	r3, #0
 8002362:	6979      	ldr	r1, [r7, #20]
 8002364:	3105      	adds	r1, #5
 8002366:	6838      	ldr	r0, [r7, #0]
 8002368:	4401      	add	r1, r0
 800236a:	b2d3      	uxtb	r3, r2
 800236c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_data.base >> (8 * 6)) & 0xFF;
 800236e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002372:	f04f 0200 	mov.w	r2, #0
 8002376:	f04f 0300 	mov.w	r3, #0
 800237a:	0c0a      	lsrs	r2, r1, #16
 800237c:	2300      	movs	r3, #0
 800237e:	6979      	ldr	r1, [r7, #20]
 8002380:	3106      	adds	r1, #6
 8002382:	6838      	ldr	r0, [r7, #0]
 8002384:	4401      	add	r1, r0
 8002386:	b2d3      	uxtb	r3, r2
 8002388:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_data.base >> (8 * 7)) & 0xFF;
 800238a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800238e:	f04f 0200 	mov.w	r2, #0
 8002392:	f04f 0300 	mov.w	r3, #0
 8002396:	0e0a      	lsrs	r2, r1, #24
 8002398:	2300      	movs	r3, #0
 800239a:	6979      	ldr	r1, [r7, #20]
 800239c:	3107      	adds	r1, #7
 800239e:	6838      	ldr	r0, [r7, #0]
 80023a0:	4401      	add	r1, r0
 80023a2:	b2d3      	uxtb	r3, r2
 80023a4:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	3308      	adds	r3, #8
 80023aa:	617b      	str	r3, [r7, #20]
      return offset;
 80023ac:	697b      	ldr	r3, [r7, #20]
    }
 80023ae:	4618      	mov	r0, r3
 80023b0:	371c      	adds	r7, #28
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <_ZN8std_msgs7Float6411deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80023ba:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80023be:	b0a3      	sub	sp, #140	; 0x8c
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6778      	str	r0, [r7, #116]	; 0x74
 80023c4:	6739      	str	r1, [r7, #112]	; 0x70
    {
      int offset = 0;
 80023c6:	2300      	movs	r3, #0
 80023c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      union {
        double real;
        uint64_t base;
      } u_data;
      u_data.base = 0;
 80023cc:	f04f 0200 	mov.w	r2, #0
 80023d0:	f04f 0300 	mov.w	r3, #0
 80023d4:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80023d8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80023dc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80023e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023e2:	4413      	add	r3, r2
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2200      	movs	r2, #0
 80023ea:	461c      	mov	r4, r3
 80023ec:	4615      	mov	r5, r2
 80023ee:	ea40 0804 	orr.w	r8, r0, r4
 80023f2:	ea41 0905 	orr.w	r9, r1, r5
 80023f6:	e9c7 891e 	strd	r8, r9, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80023fa:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80023fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002402:	1c5a      	adds	r2, r3, #1
 8002404:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002406:	4413      	add	r3, r2
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	b2db      	uxtb	r3, r3
 800240c:	2200      	movs	r2, #0
 800240e:	469a      	mov	sl, r3
 8002410:	4693      	mov	fp, r2
 8002412:	f04f 0200 	mov.w	r2, #0
 8002416:	f04f 0300 	mov.w	r3, #0
 800241a:	ea4f 230b 	mov.w	r3, fp, lsl #8
 800241e:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8002422:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8002426:	ea40 0402 	orr.w	r4, r0, r2
 800242a:	66bc      	str	r4, [r7, #104]	; 0x68
 800242c:	430b      	orrs	r3, r1
 800242e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002430:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8002434:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002438:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800243c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002440:	1c9a      	adds	r2, r3, #2
 8002442:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002444:	4413      	add	r3, r2
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2200      	movs	r2, #0
 800244c:	663b      	str	r3, [r7, #96]	; 0x60
 800244e:	667a      	str	r2, [r7, #100]	; 0x64
 8002450:	f04f 0200 	mov.w	r2, #0
 8002454:	f04f 0300 	mov.w	r3, #0
 8002458:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800245c:	464c      	mov	r4, r9
 800245e:	0423      	lsls	r3, r4, #16
 8002460:	4644      	mov	r4, r8
 8002462:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002466:	4644      	mov	r4, r8
 8002468:	0422      	lsls	r2, r4, #16
 800246a:	ea40 0402 	orr.w	r4, r0, r2
 800246e:	65bc      	str	r4, [r7, #88]	; 0x58
 8002470:	430b      	orrs	r3, r1
 8002472:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002474:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8002478:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800247c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002480:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002484:	1cda      	adds	r2, r3, #3
 8002486:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002488:	4413      	add	r3, r2
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2200      	movs	r2, #0
 8002490:	653b      	str	r3, [r7, #80]	; 0x50
 8002492:	657a      	str	r2, [r7, #84]	; 0x54
 8002494:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002498:	4623      	mov	r3, r4
 800249a:	0a1b      	lsrs	r3, r3, #8
 800249c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800249e:	4623      	mov	r3, r4
 80024a0:	061b      	lsls	r3, r3, #24
 80024a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80024a4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80024a8:	4623      	mov	r3, r4
 80024aa:	4303      	orrs	r3, r0
 80024ac:	643b      	str	r3, [r7, #64]	; 0x40
 80024ae:	462b      	mov	r3, r5
 80024b0:	430b      	orrs	r3, r1
 80024b2:	647b      	str	r3, [r7, #68]	; 0x44
 80024b4:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80024b8:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80024bc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80024c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024c4:	1d1a      	adds	r2, r3, #4
 80024c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024c8:	4413      	add	r3, r2
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2200      	movs	r2, #0
 80024d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80024d2:	63fa      	str	r2, [r7, #60]	; 0x3c
 80024d4:	f04f 0200 	mov.w	r2, #0
 80024d8:	f04f 0300 	mov.w	r3, #0
 80024dc:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 80024de:	0023      	movs	r3, r4
 80024e0:	2200      	movs	r2, #0
 80024e2:	ea40 0402 	orr.w	r4, r0, r2
 80024e6:	633c      	str	r4, [r7, #48]	; 0x30
 80024e8:	430b      	orrs	r3, r1
 80024ea:	637b      	str	r3, [r7, #52]	; 0x34
 80024ec:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80024f0:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80024f4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80024f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024fc:	1d5a      	adds	r2, r3, #5
 80024fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002500:	4413      	add	r3, r2
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2200      	movs	r2, #0
 8002508:	62bb      	str	r3, [r7, #40]	; 0x28
 800250a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800250c:	f04f 0200 	mov.w	r2, #0
 8002510:	f04f 0300 	mov.w	r3, #0
 8002514:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8002516:	0223      	lsls	r3, r4, #8
 8002518:	2200      	movs	r2, #0
 800251a:	ea40 0402 	orr.w	r4, r0, r2
 800251e:	623c      	str	r4, [r7, #32]
 8002520:	430b      	orrs	r3, r1
 8002522:	627b      	str	r3, [r7, #36]	; 0x24
 8002524:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002528:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800252c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002530:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002534:	3306      	adds	r3, #6
 8002536:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002538:	4413      	add	r3, r2
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2200      	movs	r2, #0
 8002540:	61bb      	str	r3, [r7, #24]
 8002542:	61fa      	str	r2, [r7, #28]
 8002544:	f04f 0200 	mov.w	r2, #0
 8002548:	f04f 0300 	mov.w	r3, #0
 800254c:	69bc      	ldr	r4, [r7, #24]
 800254e:	0423      	lsls	r3, r4, #16
 8002550:	2200      	movs	r2, #0
 8002552:	ea40 0402 	orr.w	r4, r0, r2
 8002556:	613c      	str	r4, [r7, #16]
 8002558:	430b      	orrs	r3, r1
 800255a:	617b      	str	r3, [r7, #20]
 800255c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002560:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002564:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002568:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800256c:	3307      	adds	r3, #7
 800256e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002570:	4413      	add	r3, r2
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2200      	movs	r2, #0
 8002578:	60bb      	str	r3, [r7, #8]
 800257a:	60fa      	str	r2, [r7, #12]
 800257c:	f04f 0200 	mov.w	r2, #0
 8002580:	f04f 0300 	mov.w	r3, #0
 8002584:	68bc      	ldr	r4, [r7, #8]
 8002586:	0623      	lsls	r3, r4, #24
 8002588:	2200      	movs	r2, #0
 800258a:	ea40 0402 	orr.w	r4, r0, r2
 800258e:	603c      	str	r4, [r7, #0]
 8002590:	430b      	orrs	r3, r1
 8002592:	607b      	str	r3, [r7, #4]
 8002594:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002598:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      this->data = u_data.real;
 800259c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80025a0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80025a2:	e9c1 2302 	strd	r2, r3, [r1, #8]
      offset += sizeof(this->data);
 80025a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025aa:	3308      	adds	r3, #8
 80025ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
     return offset;
 80025b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    }
 80025b4:	4618      	mov	r0, r3
 80025b6:	378c      	adds	r7, #140	; 0x8c
 80025b8:	46bd      	mov	sp, r7
 80025ba:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80025be:	4770      	bx	lr

080025c0 <_ZN8std_msgs7Float647getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Float64"; };
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	4b03      	ldr	r3, [pc, #12]	; (80025d8 <_ZN8std_msgs7Float647getTypeEv+0x18>)
 80025ca:	4618      	mov	r0, r3
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	08008f90 	.word	0x08008f90

080025dc <_ZN8std_msgs7Float646getMD5Ev>:
    virtual const char * getMD5() override { return "fdb28210bfa9d7c91146260178d9a584"; };
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	4b03      	ldr	r3, [pc, #12]	; (80025f4 <_ZN8std_msgs7Float646getMD5Ev+0x18>)
 80025e6:	4618      	mov	r0, r3
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	08008fa4 	.word	0x08008fa4

080025f8 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4618      	mov	r0, r3
 8002604:	f7fe fe9a 	bl	800133c <_ZN3ros3MsgC1Ev>
 8002608:	4a0e      	ldr	r2, [pc, #56]	; (8002644 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	601a      	str	r2, [r3, #0]
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	f04f 0200 	mov.w	r2, #0
 8002614:	f04f 0300 	mov.w	r3, #0
 8002618:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800261c:	6879      	ldr	r1, [r7, #4]
 800261e:	f04f 0200 	mov.w	r2, #0
 8002622:	f04f 0300 	mov.w	r3, #0
 8002626:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	f04f 0200 	mov.w	r2, #0
 8002630:	f04f 0300 	mov.w	r3, #0
 8002634:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4618      	mov	r0, r3
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	080090f0 	.word	0x080090f0

08002648 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002648:	b480      	push	{r7}
 800264a:	b08b      	sub	sp, #44	; 0x2c
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002652:	2300      	movs	r3, #0
 8002654:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800265c:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8002660:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002664:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002666:	6838      	ldr	r0, [r7, #0]
 8002668:	4401      	add	r1, r0
 800266a:	b2d3      	uxtb	r3, r2
 800266c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 800266e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002672:	f04f 0200 	mov.w	r2, #0
 8002676:	f04f 0300 	mov.w	r3, #0
 800267a:	0a02      	lsrs	r2, r0, #8
 800267c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002680:	0a0b      	lsrs	r3, r1, #8
 8002682:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002684:	3101      	adds	r1, #1
 8002686:	6838      	ldr	r0, [r7, #0]
 8002688:	4401      	add	r1, r0
 800268a:	b2d3      	uxtb	r3, r2
 800268c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 800268e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002692:	f04f 0200 	mov.w	r2, #0
 8002696:	f04f 0300 	mov.w	r3, #0
 800269a:	0c02      	lsrs	r2, r0, #16
 800269c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80026a0:	0c0b      	lsrs	r3, r1, #16
 80026a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026a4:	3102      	adds	r1, #2
 80026a6:	6838      	ldr	r0, [r7, #0]
 80026a8:	4401      	add	r1, r0
 80026aa:	b2d3      	uxtb	r3, r2
 80026ac:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 80026ae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80026b2:	f04f 0200 	mov.w	r2, #0
 80026b6:	f04f 0300 	mov.w	r3, #0
 80026ba:	0e02      	lsrs	r2, r0, #24
 80026bc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80026c0:	0e0b      	lsrs	r3, r1, #24
 80026c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026c4:	3103      	adds	r1, #3
 80026c6:	6838      	ldr	r0, [r7, #0]
 80026c8:	4401      	add	r1, r0
 80026ca:	b2d3      	uxtb	r3, r2
 80026cc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80026ce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80026d2:	f04f 0200 	mov.w	r2, #0
 80026d6:	f04f 0300 	mov.w	r3, #0
 80026da:	000a      	movs	r2, r1
 80026dc:	2300      	movs	r3, #0
 80026de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026e0:	3104      	adds	r1, #4
 80026e2:	6838      	ldr	r0, [r7, #0]
 80026e4:	4401      	add	r1, r0
 80026e6:	b2d3      	uxtb	r3, r2
 80026e8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80026ea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80026ee:	f04f 0200 	mov.w	r2, #0
 80026f2:	f04f 0300 	mov.w	r3, #0
 80026f6:	0a0a      	lsrs	r2, r1, #8
 80026f8:	2300      	movs	r3, #0
 80026fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026fc:	3105      	adds	r1, #5
 80026fe:	6838      	ldr	r0, [r7, #0]
 8002700:	4401      	add	r1, r0
 8002702:	b2d3      	uxtb	r3, r2
 8002704:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8002706:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800270a:	f04f 0200 	mov.w	r2, #0
 800270e:	f04f 0300 	mov.w	r3, #0
 8002712:	0c0a      	lsrs	r2, r1, #16
 8002714:	2300      	movs	r3, #0
 8002716:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002718:	3106      	adds	r1, #6
 800271a:	6838      	ldr	r0, [r7, #0]
 800271c:	4401      	add	r1, r0
 800271e:	b2d3      	uxtb	r3, r2
 8002720:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8002722:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002726:	f04f 0200 	mov.w	r2, #0
 800272a:	f04f 0300 	mov.w	r3, #0
 800272e:	0e0a      	lsrs	r2, r1, #24
 8002730:	2300      	movs	r3, #0
 8002732:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002734:	3107      	adds	r1, #7
 8002736:	6838      	ldr	r0, [r7, #0]
 8002738:	4401      	add	r1, r0
 800273a:	b2d3      	uxtb	r3, r2
 800273c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	3308      	adds	r3, #8
 8002742:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800274a:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 800274e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002752:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002754:	6838      	ldr	r0, [r7, #0]
 8002756:	4401      	add	r1, r0
 8002758:	b2d3      	uxtb	r3, r2
 800275a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 800275c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002760:	f04f 0200 	mov.w	r2, #0
 8002764:	f04f 0300 	mov.w	r3, #0
 8002768:	0a02      	lsrs	r2, r0, #8
 800276a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800276e:	0a0b      	lsrs	r3, r1, #8
 8002770:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002772:	3101      	adds	r1, #1
 8002774:	6838      	ldr	r0, [r7, #0]
 8002776:	4401      	add	r1, r0
 8002778:	b2d3      	uxtb	r3, r2
 800277a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 800277c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002780:	f04f 0200 	mov.w	r2, #0
 8002784:	f04f 0300 	mov.w	r3, #0
 8002788:	0c02      	lsrs	r2, r0, #16
 800278a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800278e:	0c0b      	lsrs	r3, r1, #16
 8002790:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002792:	3102      	adds	r1, #2
 8002794:	6838      	ldr	r0, [r7, #0]
 8002796:	4401      	add	r1, r0
 8002798:	b2d3      	uxtb	r3, r2
 800279a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 800279c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027a0:	f04f 0200 	mov.w	r2, #0
 80027a4:	f04f 0300 	mov.w	r3, #0
 80027a8:	0e02      	lsrs	r2, r0, #24
 80027aa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80027ae:	0e0b      	lsrs	r3, r1, #24
 80027b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027b2:	3103      	adds	r1, #3
 80027b4:	6838      	ldr	r0, [r7, #0]
 80027b6:	4401      	add	r1, r0
 80027b8:	b2d3      	uxtb	r3, r2
 80027ba:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 80027bc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027c0:	f04f 0200 	mov.w	r2, #0
 80027c4:	f04f 0300 	mov.w	r3, #0
 80027c8:	000a      	movs	r2, r1
 80027ca:	2300      	movs	r3, #0
 80027cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027ce:	3104      	adds	r1, #4
 80027d0:	6838      	ldr	r0, [r7, #0]
 80027d2:	4401      	add	r1, r0
 80027d4:	b2d3      	uxtb	r3, r2
 80027d6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80027d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027dc:	f04f 0200 	mov.w	r2, #0
 80027e0:	f04f 0300 	mov.w	r3, #0
 80027e4:	0a0a      	lsrs	r2, r1, #8
 80027e6:	2300      	movs	r3, #0
 80027e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027ea:	3105      	adds	r1, #5
 80027ec:	6838      	ldr	r0, [r7, #0]
 80027ee:	4401      	add	r1, r0
 80027f0:	b2d3      	uxtb	r3, r2
 80027f2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80027f4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027f8:	f04f 0200 	mov.w	r2, #0
 80027fc:	f04f 0300 	mov.w	r3, #0
 8002800:	0c0a      	lsrs	r2, r1, #16
 8002802:	2300      	movs	r3, #0
 8002804:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002806:	3106      	adds	r1, #6
 8002808:	6838      	ldr	r0, [r7, #0]
 800280a:	4401      	add	r1, r0
 800280c:	b2d3      	uxtb	r3, r2
 800280e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8002810:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002814:	f04f 0200 	mov.w	r2, #0
 8002818:	f04f 0300 	mov.w	r3, #0
 800281c:	0e0a      	lsrs	r2, r1, #24
 800281e:	2300      	movs	r3, #0
 8002820:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002822:	3107      	adds	r1, #7
 8002824:	6838      	ldr	r0, [r7, #0]
 8002826:	4401      	add	r1, r0
 8002828:	b2d3      	uxtb	r3, r2
 800282a:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 800282c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282e:	3308      	adds	r3, #8
 8002830:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002838:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 800283c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002840:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002842:	6838      	ldr	r0, [r7, #0]
 8002844:	4401      	add	r1, r0
 8002846:	b2d3      	uxtb	r3, r2
 8002848:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 800284a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800284e:	f04f 0200 	mov.w	r2, #0
 8002852:	f04f 0300 	mov.w	r3, #0
 8002856:	0a02      	lsrs	r2, r0, #8
 8002858:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800285c:	0a0b      	lsrs	r3, r1, #8
 800285e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002860:	3101      	adds	r1, #1
 8002862:	6838      	ldr	r0, [r7, #0]
 8002864:	4401      	add	r1, r0
 8002866:	b2d3      	uxtb	r3, r2
 8002868:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 800286a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800286e:	f04f 0200 	mov.w	r2, #0
 8002872:	f04f 0300 	mov.w	r3, #0
 8002876:	0c02      	lsrs	r2, r0, #16
 8002878:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800287c:	0c0b      	lsrs	r3, r1, #16
 800287e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002880:	3102      	adds	r1, #2
 8002882:	6838      	ldr	r0, [r7, #0]
 8002884:	4401      	add	r1, r0
 8002886:	b2d3      	uxtb	r3, r2
 8002888:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 800288a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800288e:	f04f 0200 	mov.w	r2, #0
 8002892:	f04f 0300 	mov.w	r3, #0
 8002896:	0e02      	lsrs	r2, r0, #24
 8002898:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800289c:	0e0b      	lsrs	r3, r1, #24
 800289e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028a0:	3103      	adds	r1, #3
 80028a2:	6838      	ldr	r0, [r7, #0]
 80028a4:	4401      	add	r1, r0
 80028a6:	b2d3      	uxtb	r3, r2
 80028a8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 80028aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028ae:	f04f 0200 	mov.w	r2, #0
 80028b2:	f04f 0300 	mov.w	r3, #0
 80028b6:	000a      	movs	r2, r1
 80028b8:	2300      	movs	r3, #0
 80028ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028bc:	3104      	adds	r1, #4
 80028be:	6838      	ldr	r0, [r7, #0]
 80028c0:	4401      	add	r1, r0
 80028c2:	b2d3      	uxtb	r3, r2
 80028c4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 80028c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028ca:	f04f 0200 	mov.w	r2, #0
 80028ce:	f04f 0300 	mov.w	r3, #0
 80028d2:	0a0a      	lsrs	r2, r1, #8
 80028d4:	2300      	movs	r3, #0
 80028d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028d8:	3105      	adds	r1, #5
 80028da:	6838      	ldr	r0, [r7, #0]
 80028dc:	4401      	add	r1, r0
 80028de:	b2d3      	uxtb	r3, r2
 80028e0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 80028e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028e6:	f04f 0200 	mov.w	r2, #0
 80028ea:	f04f 0300 	mov.w	r3, #0
 80028ee:	0c0a      	lsrs	r2, r1, #16
 80028f0:	2300      	movs	r3, #0
 80028f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028f4:	3106      	adds	r1, #6
 80028f6:	6838      	ldr	r0, [r7, #0]
 80028f8:	4401      	add	r1, r0
 80028fa:	b2d3      	uxtb	r3, r2
 80028fc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 80028fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002902:	f04f 0200 	mov.w	r2, #0
 8002906:	f04f 0300 	mov.w	r3, #0
 800290a:	0e0a      	lsrs	r2, r1, #24
 800290c:	2300      	movs	r3, #0
 800290e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002910:	3107      	adds	r1, #7
 8002912:	6838      	ldr	r0, [r7, #0]
 8002914:	4401      	add	r1, r0
 8002916:	b2d3      	uxtb	r3, r2
 8002918:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	3308      	adds	r3, #8
 800291e:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8002920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002922:	4618      	mov	r0, r3
 8002924:	372c      	adds	r7, #44	; 0x2c
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800292e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002932:	b0eb      	sub	sp, #428	; 0x1ac
 8002934:	af00      	add	r7, sp, #0
 8002936:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 800293a:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 800293e:	2300      	movs	r3, #0
 8002940:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8002944:	f04f 0200 	mov.w	r2, #0
 8002948:	f04f 0300 	mov.w	r3, #0
 800294c:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002950:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002954:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002958:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800295c:	4413      	add	r3, r2
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2200      	movs	r2, #0
 8002964:	461c      	mov	r4, r3
 8002966:	4615      	mov	r5, r2
 8002968:	ea40 0804 	orr.w	r8, r0, r4
 800296c:	ea41 0905 	orr.w	r9, r1, r5
 8002970:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002974:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002978:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800297c:	1c5a      	adds	r2, r3, #1
 800297e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002982:	4413      	add	r3, r2
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	b2db      	uxtb	r3, r3
 8002988:	2200      	movs	r2, #0
 800298a:	469a      	mov	sl, r3
 800298c:	4693      	mov	fp, r2
 800298e:	f04f 0200 	mov.w	r2, #0
 8002992:	f04f 0300 	mov.w	r3, #0
 8002996:	ea4f 230b 	mov.w	r3, fp, lsl #8
 800299a:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800299e:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80029a2:	ea40 0402 	orr.w	r4, r0, r2
 80029a6:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 80029aa:	430b      	orrs	r3, r1
 80029ac:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80029b0:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 80029b4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80029b8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80029bc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80029c0:	1c9a      	adds	r2, r3, #2
 80029c2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80029c6:	4413      	add	r3, r2
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2200      	movs	r2, #0
 80029ce:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80029d2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 80029d6:	f04f 0200 	mov.w	r2, #0
 80029da:	f04f 0300 	mov.w	r3, #0
 80029de:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 80029e2:	464c      	mov	r4, r9
 80029e4:	0423      	lsls	r3, r4, #16
 80029e6:	4644      	mov	r4, r8
 80029e8:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80029ec:	4644      	mov	r4, r8
 80029ee:	0422      	lsls	r2, r4, #16
 80029f0:	ea40 0402 	orr.w	r4, r0, r2
 80029f4:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 80029f8:	430b      	orrs	r3, r1
 80029fa:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80029fe:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8002a02:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002a06:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002a0a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a0e:	1cda      	adds	r2, r3, #3
 8002a10:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a14:	4413      	add	r3, r2
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002a20:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8002a24:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8002a28:	4623      	mov	r3, r4
 8002a2a:	0a1b      	lsrs	r3, r3, #8
 8002a2c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002a30:	4623      	mov	r3, r4
 8002a32:	061b      	lsls	r3, r3, #24
 8002a34:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002a38:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8002a3c:	4623      	mov	r3, r4
 8002a3e:	4303      	orrs	r3, r0
 8002a40:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002a44:	462b      	mov	r3, r5
 8002a46:	430b      	orrs	r3, r1
 8002a48:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002a4c:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8002a50:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002a54:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002a58:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a5c:	1d1a      	adds	r2, r3, #4
 8002a5e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a62:	4413      	add	r3, r2
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8002a6e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002a72:	f04f 0200 	mov.w	r2, #0
 8002a76:	f04f 0300 	mov.w	r3, #0
 8002a7a:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8002a7e:	0023      	movs	r3, r4
 8002a80:	2200      	movs	r2, #0
 8002a82:	ea40 0402 	orr.w	r4, r0, r2
 8002a86:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8002a8a:	430b      	orrs	r3, r1
 8002a8c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002a90:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8002a94:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002a98:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002a9c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002aa0:	1d5a      	adds	r2, r3, #5
 8002aa2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002aa6:	4413      	add	r3, r2
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2200      	movs	r2, #0
 8002aae:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002ab2:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8002ab6:	f04f 0200 	mov.w	r2, #0
 8002aba:	f04f 0300 	mov.w	r3, #0
 8002abe:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8002ac2:	0223      	lsls	r3, r4, #8
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	ea40 0402 	orr.w	r4, r0, r2
 8002aca:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8002ace:	430b      	orrs	r3, r1
 8002ad0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002ad4:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8002ad8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002adc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002ae0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ae4:	1d9a      	adds	r2, r3, #6
 8002ae6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002aea:	4413      	add	r3, r2
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2200      	movs	r2, #0
 8002af2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002af6:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8002afa:	f04f 0200 	mov.w	r2, #0
 8002afe:	f04f 0300 	mov.w	r3, #0
 8002b02:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8002b06:	0423      	lsls	r3, r4, #16
 8002b08:	2200      	movs	r2, #0
 8002b0a:	ea40 0402 	orr.w	r4, r0, r2
 8002b0e:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8002b12:	430b      	orrs	r3, r1
 8002b14:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002b18:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8002b1c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002b20:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002b24:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b28:	1dda      	adds	r2, r3, #7
 8002b2a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b2e:	4413      	add	r3, r2
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2200      	movs	r2, #0
 8002b36:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002b3a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002b3e:	f04f 0200 	mov.w	r2, #0
 8002b42:	f04f 0300 	mov.w	r3, #0
 8002b46:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8002b4a:	0623      	lsls	r3, r4, #24
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	ea40 0402 	orr.w	r4, r0, r2
 8002b52:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8002b56:	430b      	orrs	r3, r1
 8002b58:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002b5c:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8002b60:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8002b64:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002b68:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002b6c:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8002b70:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b74:	3308      	adds	r3, #8
 8002b76:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8002b7a:	f04f 0200 	mov.w	r2, #0
 8002b7e:	f04f 0300 	mov.w	r3, #0
 8002b82:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002b86:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002b8a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002b8e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b92:	4413      	add	r3, r2
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002b9e:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8002ba2:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8002ba6:	4623      	mov	r3, r4
 8002ba8:	4303      	orrs	r3, r0
 8002baa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002bae:	462b      	mov	r3, r5
 8002bb0:	430b      	orrs	r3, r1
 8002bb2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002bb6:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8002bba:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002bbe:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002bc2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002bc6:	1c5a      	adds	r2, r3, #1
 8002bc8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002bcc:	4413      	add	r3, r2
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002bd8:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8002bdc:	f04f 0200 	mov.w	r2, #0
 8002be0:	f04f 0300 	mov.w	r3, #0
 8002be4:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8002be8:	464c      	mov	r4, r9
 8002bea:	0223      	lsls	r3, r4, #8
 8002bec:	4644      	mov	r4, r8
 8002bee:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002bf2:	4644      	mov	r4, r8
 8002bf4:	0222      	lsls	r2, r4, #8
 8002bf6:	ea40 0402 	orr.w	r4, r0, r2
 8002bfa:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8002bfe:	430b      	orrs	r3, r1
 8002c00:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002c04:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8002c08:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002c0c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002c10:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c14:	1c9a      	adds	r2, r3, #2
 8002c16:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c1a:	4413      	add	r3, r2
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2200      	movs	r2, #0
 8002c22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002c26:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002c2a:	f04f 0200 	mov.w	r2, #0
 8002c2e:	f04f 0300 	mov.w	r3, #0
 8002c32:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8002c36:	464c      	mov	r4, r9
 8002c38:	0423      	lsls	r3, r4, #16
 8002c3a:	4644      	mov	r4, r8
 8002c3c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002c40:	4644      	mov	r4, r8
 8002c42:	0422      	lsls	r2, r4, #16
 8002c44:	ea40 0402 	orr.w	r4, r0, r2
 8002c48:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8002c4c:	430b      	orrs	r3, r1
 8002c4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002c52:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8002c56:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002c5a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002c5e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c62:	1cda      	adds	r2, r3, #3
 8002c64:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c68:	4413      	add	r3, r2
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002c74:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002c78:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002c7c:	4623      	mov	r3, r4
 8002c7e:	0a1b      	lsrs	r3, r3, #8
 8002c80:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002c84:	4623      	mov	r3, r4
 8002c86:	061b      	lsls	r3, r3, #24
 8002c88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c8c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002c90:	4623      	mov	r3, r4
 8002c92:	4303      	orrs	r3, r0
 8002c94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c98:	462b      	mov	r3, r5
 8002c9a:	430b      	orrs	r3, r1
 8002c9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ca0:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8002ca4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002ca8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002cac:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002cb0:	1d1a      	adds	r2, r3, #4
 8002cb2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002cb6:	4413      	add	r3, r2
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002cc2:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002cc6:	f04f 0200 	mov.w	r2, #0
 8002cca:	f04f 0300 	mov.w	r3, #0
 8002cce:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8002cd2:	0023      	movs	r3, r4
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	ea40 0402 	orr.w	r4, r0, r2
 8002cda:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8002cde:	430b      	orrs	r3, r1
 8002ce0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002ce4:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8002ce8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002cec:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002cf0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002cf4:	1d5a      	adds	r2, r3, #5
 8002cf6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002cfa:	4413      	add	r3, r2
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	2200      	movs	r2, #0
 8002d02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d06:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002d0a:	f04f 0200 	mov.w	r2, #0
 8002d0e:	f04f 0300 	mov.w	r3, #0
 8002d12:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8002d16:	0223      	lsls	r3, r4, #8
 8002d18:	2200      	movs	r2, #0
 8002d1a:	ea40 0402 	orr.w	r4, r0, r2
 8002d1e:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8002d22:	430b      	orrs	r3, r1
 8002d24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002d28:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8002d2c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002d30:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002d34:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d38:	1d9a      	adds	r2, r3, #6
 8002d3a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d3e:	4413      	add	r3, r2
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2200      	movs	r2, #0
 8002d46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002d4a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002d4e:	f04f 0200 	mov.w	r2, #0
 8002d52:	f04f 0300 	mov.w	r3, #0
 8002d56:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8002d5a:	0423      	lsls	r3, r4, #16
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	ea40 0402 	orr.w	r4, r0, r2
 8002d62:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8002d66:	430b      	orrs	r3, r1
 8002d68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002d6c:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8002d70:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002d74:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002d78:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d7c:	1dda      	adds	r2, r3, #7
 8002d7e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d82:	4413      	add	r3, r2
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d8e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d92:	f04f 0200 	mov.w	r2, #0
 8002d96:	f04f 0300 	mov.w	r3, #0
 8002d9a:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8002d9e:	0623      	lsls	r3, r4, #24
 8002da0:	2200      	movs	r2, #0
 8002da2:	ea40 0402 	orr.w	r4, r0, r2
 8002da6:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8002daa:	430b      	orrs	r3, r1
 8002dac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002db0:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8002db4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8002db8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002dbc:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002dc0:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8002dc4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002dc8:	3308      	adds	r3, #8
 8002dca:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8002dce:	f04f 0200 	mov.w	r2, #0
 8002dd2:	f04f 0300 	mov.w	r3, #0
 8002dd6:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002dda:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002dde:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002de2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002de6:	4413      	add	r3, r2
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2200      	movs	r2, #0
 8002dee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002df2:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002df6:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8002dfa:	4623      	mov	r3, r4
 8002dfc:	4303      	orrs	r3, r0
 8002dfe:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e00:	462b      	mov	r3, r5
 8002e02:	430b      	orrs	r3, r1
 8002e04:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e06:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8002e0a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002e0e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002e12:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e16:	1c5a      	adds	r2, r3, #1
 8002e18:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e1c:	4413      	add	r3, r2
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2200      	movs	r2, #0
 8002e24:	673b      	str	r3, [r7, #112]	; 0x70
 8002e26:	677a      	str	r2, [r7, #116]	; 0x74
 8002e28:	f04f 0200 	mov.w	r2, #0
 8002e2c:	f04f 0300 	mov.w	r3, #0
 8002e30:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002e34:	464c      	mov	r4, r9
 8002e36:	0223      	lsls	r3, r4, #8
 8002e38:	4644      	mov	r4, r8
 8002e3a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002e3e:	4644      	mov	r4, r8
 8002e40:	0222      	lsls	r2, r4, #8
 8002e42:	ea40 0402 	orr.w	r4, r0, r2
 8002e46:	66bc      	str	r4, [r7, #104]	; 0x68
 8002e48:	430b      	orrs	r3, r1
 8002e4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e4c:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8002e50:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002e54:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002e58:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e5c:	1c9a      	adds	r2, r3, #2
 8002e5e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e62:	4413      	add	r3, r2
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2200      	movs	r2, #0
 8002e6a:	663b      	str	r3, [r7, #96]	; 0x60
 8002e6c:	667a      	str	r2, [r7, #100]	; 0x64
 8002e6e:	f04f 0200 	mov.w	r2, #0
 8002e72:	f04f 0300 	mov.w	r3, #0
 8002e76:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002e7a:	464c      	mov	r4, r9
 8002e7c:	0423      	lsls	r3, r4, #16
 8002e7e:	4644      	mov	r4, r8
 8002e80:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002e84:	4644      	mov	r4, r8
 8002e86:	0422      	lsls	r2, r4, #16
 8002e88:	ea40 0402 	orr.w	r4, r0, r2
 8002e8c:	65bc      	str	r4, [r7, #88]	; 0x58
 8002e8e:	430b      	orrs	r3, r1
 8002e90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e92:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8002e96:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002e9a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002e9e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ea2:	1cda      	adds	r2, r3, #3
 8002ea4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ea8:	4413      	add	r3, r2
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2200      	movs	r2, #0
 8002eb0:	653b      	str	r3, [r7, #80]	; 0x50
 8002eb2:	657a      	str	r2, [r7, #84]	; 0x54
 8002eb4:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002eb8:	4623      	mov	r3, r4
 8002eba:	0a1b      	lsrs	r3, r3, #8
 8002ebc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ebe:	4623      	mov	r3, r4
 8002ec0:	061b      	lsls	r3, r3, #24
 8002ec2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ec4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002ec8:	4623      	mov	r3, r4
 8002eca:	4303      	orrs	r3, r0
 8002ecc:	643b      	str	r3, [r7, #64]	; 0x40
 8002ece:	462b      	mov	r3, r5
 8002ed0:	430b      	orrs	r3, r1
 8002ed2:	647b      	str	r3, [r7, #68]	; 0x44
 8002ed4:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002ed8:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002edc:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002ee0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ee4:	1d1a      	adds	r2, r3, #4
 8002ee6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002eea:	4413      	add	r3, r2
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ef4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002ef6:	f04f 0200 	mov.w	r2, #0
 8002efa:	f04f 0300 	mov.w	r3, #0
 8002efe:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8002f00:	0023      	movs	r3, r4
 8002f02:	2200      	movs	r2, #0
 8002f04:	ea40 0402 	orr.w	r4, r0, r2
 8002f08:	633c      	str	r4, [r7, #48]	; 0x30
 8002f0a:	430b      	orrs	r3, r1
 8002f0c:	637b      	str	r3, [r7, #52]	; 0x34
 8002f0e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002f12:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002f16:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002f1a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f1e:	1d5a      	adds	r2, r3, #5
 8002f20:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f24:	4413      	add	r3, r2
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f30:	f04f 0200 	mov.w	r2, #0
 8002f34:	f04f 0300 	mov.w	r3, #0
 8002f38:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8002f3a:	0223      	lsls	r3, r4, #8
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	ea40 0402 	orr.w	r4, r0, r2
 8002f42:	623c      	str	r4, [r7, #32]
 8002f44:	430b      	orrs	r3, r1
 8002f46:	627b      	str	r3, [r7, #36]	; 0x24
 8002f48:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002f4c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002f50:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002f54:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f58:	3306      	adds	r3, #6
 8002f5a:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002f5e:	4413      	add	r3, r2
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2200      	movs	r2, #0
 8002f66:	61bb      	str	r3, [r7, #24]
 8002f68:	61fa      	str	r2, [r7, #28]
 8002f6a:	f04f 0200 	mov.w	r2, #0
 8002f6e:	f04f 0300 	mov.w	r3, #0
 8002f72:	69bc      	ldr	r4, [r7, #24]
 8002f74:	0423      	lsls	r3, r4, #16
 8002f76:	2200      	movs	r2, #0
 8002f78:	ea40 0402 	orr.w	r4, r0, r2
 8002f7c:	613c      	str	r4, [r7, #16]
 8002f7e:	430b      	orrs	r3, r1
 8002f80:	617b      	str	r3, [r7, #20]
 8002f82:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002f86:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002f8a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002f8e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f92:	3307      	adds	r3, #7
 8002f94:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002f98:	4413      	add	r3, r2
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	60bb      	str	r3, [r7, #8]
 8002fa2:	60fa      	str	r2, [r7, #12]
 8002fa4:	f04f 0200 	mov.w	r2, #0
 8002fa8:	f04f 0300 	mov.w	r3, #0
 8002fac:	68bc      	ldr	r4, [r7, #8]
 8002fae:	0623      	lsls	r3, r4, #24
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	ea40 0402 	orr.w	r4, r0, r2
 8002fb6:	603c      	str	r4, [r7, #0]
 8002fb8:	430b      	orrs	r3, r1
 8002fba:	607b      	str	r3, [r7, #4]
 8002fbc:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002fc0:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8002fc4:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8002fc8:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8002fcc:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8002fd0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002fd4:	3308      	adds	r3, #8
 8002fd6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8002fda:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002fea:	4770      	bx	lr

08002fec <_ZN13geometry_msgs7Vector37getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Vector3"; };
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	4b03      	ldr	r3, [pc, #12]	; (8003004 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	08008fc8 	.word	0x08008fc8

08003008 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	4b03      	ldr	r3, [pc, #12]	; (8003020 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8003012:	4618      	mov	r0, r3
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	08008fe0 	.word	0x08008fe0

08003024 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4618      	mov	r0, r3
 8003030:	f7fe f984 	bl	800133c <_ZN3ros3MsgC1Ev>
 8003034:	4a08      	ldr	r2, [pc, #32]	; (8003058 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	601a      	str	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	3308      	adds	r3, #8
 800303e:	4618      	mov	r0, r3
 8003040:	f7ff fada 	bl	80025f8 <_ZN13geometry_msgs7Vector3C1Ev>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3328      	adds	r3, #40	; 0x28
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff fad5 	bl	80025f8 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4618      	mov	r0, r3
 8003052:	3708      	adds	r7, #8
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	080090d8 	.word	0x080090d8

0800305c <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003066:	2300      	movs	r3, #0
 8003068:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f103 0008 	add.w	r0, r3, #8
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	4413      	add	r3, r2
 8003076:	4619      	mov	r1, r3
 8003078:	f7ff fae6 	bl	8002648 <_ZNK13geometry_msgs7Vector39serializeEPh>
 800307c:	4602      	mov	r2, r0
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	4413      	add	r3, r2
 8003082:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	4413      	add	r3, r2
 8003090:	4619      	mov	r1, r3
 8003092:	f7ff fad9 	bl	8002648 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003096:	4602      	mov	r2, r0
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	4413      	add	r3, r2
 800309c:	60fb      	str	r3, [r7, #12]
      return offset;
 800309e:	68fb      	ldr	r3, [r7, #12]
    }
 80030a0:	4618      	mov	r0, r3
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80030b2:	2300      	movs	r3, #0
 80030b4:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f103 0008 	add.w	r0, r3, #8
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	4413      	add	r3, r2
 80030c2:	4619      	mov	r1, r3
 80030c4:	f7ff fc33 	bl	800292e <_ZN13geometry_msgs7Vector311deserializeEPh>
 80030c8:	4602      	mov	r2, r0
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	4413      	add	r3, r2
 80030ce:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	4413      	add	r3, r2
 80030dc:	4619      	mov	r1, r3
 80030de:	f7ff fc26 	bl	800292e <_ZN13geometry_msgs7Vector311deserializeEPh>
 80030e2:	4602      	mov	r2, r0
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	4413      	add	r3, r2
 80030e8:	60fb      	str	r3, [r7, #12]
     return offset;
 80030ea:	68fb      	ldr	r3, [r7, #12]
    }
 80030ec:	4618      	mov	r0, r3
 80030ee:	3710      	adds	r7, #16
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <_ZN13geometry_msgs5Twist7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Twist"; };
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	4b03      	ldr	r3, [pc, #12]	; (800310c <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 80030fe:	4618      	mov	r0, r3
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	08009004 	.word	0x08009004

08003110 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    virtual const char * getMD5() override { return "9f195f881246fdfa2798d1d3eebca84a"; };
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	4b03      	ldr	r3, [pc, #12]	; (8003128 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 800311a:	4618      	mov	r0, r3
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	08009018 	.word	0x08009018

0800312c <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	4a04      	ldr	r2, [pc, #16]	; (8003148 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	601a      	str	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4618      	mov	r0, r3
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr
 8003148:	08009138 	.word	0x08009138

0800314c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4618      	mov	r0, r3
 8003158:	f7ff ffe8 	bl	800312c <_ZN3ros15NodeHandleBase_C1Ev>
 800315c:	4a36      	ldr	r2, [pc, #216]	; (8003238 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	601a      	str	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	3304      	adds	r3, #4
 8003166:	4618      	mov	r0, r3
 8003168:	f7fe ff72 	bl	8002050 <_ZN13STM32HardwareC1Ev>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003192:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003196:	2100      	movs	r1, #0
 8003198:	4618      	mov	r0, r3
 800319a:	f005 fcf9 	bl	8008b90 <memset>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80031a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031a8:	2100      	movs	r1, #0
 80031aa:	4618      	mov	r0, r3
 80031ac:	f005 fcf0 	bl	8008b90 <memset>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f603 0324 	addw	r3, r3, #2084	; 0x824
 80031b6:	2264      	movs	r2, #100	; 0x64
 80031b8:	2100      	movs	r1, #0
 80031ba:	4618      	mov	r0, r3
 80031bc:	f005 fce8 	bl	8008b90 <memset>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f603 0388 	addw	r3, r3, #2184	; 0x888
 80031c6:	2264      	movs	r2, #100	; 0x64
 80031c8:	2100      	movs	r1, #0
 80031ca:	4618      	mov	r0, r3
 80031cc:	f005 fce0 	bl	8008b90 <memset>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8003226:	4618      	mov	r0, r3
 8003228:	f7fe fbfc 	bl	8001a24 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4618      	mov	r0, r3
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	080090c4 	.word	0x080090c4
 800323c:	00000000 	.word	0x00000000

08003240 <_Z10rpm_to_mpsdd>:
double alpha2, beta2;
double u21, u22;
int time_parameter = 0;

double rpm_to_mps(double rpm, double R)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	ed87 0b02 	vstr	d0, [r7, #8]
 800324a:	ed87 1b00 	vstr	d1, [r7]
	return rpm*2*M_PI*R/60;
 800324e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003252:	4602      	mov	r2, r0
 8003254:	460b      	mov	r3, r1
 8003256:	f7fc ffc5 	bl	80001e4 <__adddf3>
 800325a:	4602      	mov	r2, r0
 800325c:	460b      	mov	r3, r1
 800325e:	4610      	mov	r0, r2
 8003260:	4619      	mov	r1, r3
 8003262:	a312      	add	r3, pc, #72	; (adr r3, 80032ac <_Z10rpm_to_mpsdd+0x6c>)
 8003264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003268:	f7fd f972 	bl	8000550 <__aeabi_dmul>
 800326c:	4602      	mov	r2, r0
 800326e:	460b      	mov	r3, r1
 8003270:	4610      	mov	r0, r2
 8003272:	4619      	mov	r1, r3
 8003274:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003278:	f7fd f96a 	bl	8000550 <__aeabi_dmul>
 800327c:	4602      	mov	r2, r0
 800327e:	460b      	mov	r3, r1
 8003280:	4610      	mov	r0, r2
 8003282:	4619      	mov	r1, r3
 8003284:	f04f 0200 	mov.w	r2, #0
 8003288:	4b07      	ldr	r3, [pc, #28]	; (80032a8 <_Z10rpm_to_mpsdd+0x68>)
 800328a:	f7fd fa8b 	bl	80007a4 <__aeabi_ddiv>
 800328e:	4602      	mov	r2, r0
 8003290:	460b      	mov	r3, r1
 8003292:	ec43 2b17 	vmov	d7, r2, r3
}
 8003296:	eeb0 0a47 	vmov.f32	s0, s14
 800329a:	eef0 0a67 	vmov.f32	s1, s15
 800329e:	3710      	adds	r7, #16
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	f3af 8000 	nop.w
 80032a8:	404e0000 	.word	0x404e0000
 80032ac:	54442d18 	.word	0x54442d18
 80032b0:	400921fb 	.word	0x400921fb
 80032b4:	00000000 	.word	0x00000000

080032b8 <_Z10mps_to_rpmdd>:

double mps_to_rpm(double mps, double R)
{
 80032b8:	b5b0      	push	{r4, r5, r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	ed87 0b02 	vstr	d0, [r7, #8]
 80032c2:	ed87 1b00 	vstr	d1, [r7]
	return 60*mps/(2*M_PI*R);
 80032c6:	f04f 0200 	mov.w	r2, #0
 80032ca:	4b13      	ldr	r3, [pc, #76]	; (8003318 <_Z10mps_to_rpmdd+0x60>)
 80032cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80032d0:	f7fd f93e 	bl	8000550 <__aeabi_dmul>
 80032d4:	4602      	mov	r2, r0
 80032d6:	460b      	mov	r3, r1
 80032d8:	4614      	mov	r4, r2
 80032da:	461d      	mov	r5, r3
 80032dc:	a30c      	add	r3, pc, #48	; (adr r3, 8003310 <_Z10mps_to_rpmdd+0x58>)
 80032de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032e6:	f7fd f933 	bl	8000550 <__aeabi_dmul>
 80032ea:	4602      	mov	r2, r0
 80032ec:	460b      	mov	r3, r1
 80032ee:	4620      	mov	r0, r4
 80032f0:	4629      	mov	r1, r5
 80032f2:	f7fd fa57 	bl	80007a4 <__aeabi_ddiv>
 80032f6:	4602      	mov	r2, r0
 80032f8:	460b      	mov	r3, r1
 80032fa:	ec43 2b17 	vmov	d7, r2, r3
}
 80032fe:	eeb0 0a47 	vmov.f32	s0, s14
 8003302:	eef0 0a67 	vmov.f32	s1, s15
 8003306:	3710      	adds	r7, #16
 8003308:	46bd      	mov	sp, r7
 800330a:	bdb0      	pop	{r4, r5, r7, pc}
 800330c:	f3af 8000 	nop.w
 8003310:	54442d18 	.word	0x54442d18
 8003314:	401921fb 	.word	0x401921fb
 8003318:	404e0000 	.word	0x404e0000
 800331c:	00000000 	.word	0x00000000

08003320 <_Z4_runv>:

void _run(void)
{
 8003320:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003324:	af00      	add	r7, sp, #0
	// Left wheel
	N1 = __HAL_TIM_GET_COUNTER(&htim1);
 8003326:	4bc0      	ldr	r3, [pc, #768]	; (8003628 <_Z4_runv+0x308>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332c:	b21a      	sxth	r2, r3
 800332e:	4bbf      	ldr	r3, [pc, #764]	; (800362c <_Z4_runv+0x30c>)
 8003330:	801a      	strh	r2, [r3, #0]
	if(abs((int)(N1 - preN1)) < 40000) y13 = ((N1 - preN1)*60.0*100/4000);
 8003332:	4bbe      	ldr	r3, [pc, #760]	; (800362c <_Z4_runv+0x30c>)
 8003334:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003338:	461a      	mov	r2, r3
 800333a:	4bbd      	ldr	r3, [pc, #756]	; (8003630 <_Z4_runv+0x310>)
 800333c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	bfb8      	it	lt
 8003346:	425b      	neglt	r3, r3
 8003348:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800334c:	4293      	cmp	r3, r2
 800334e:	dc26      	bgt.n	800339e <_Z4_runv+0x7e>
 8003350:	4bb6      	ldr	r3, [pc, #728]	; (800362c <_Z4_runv+0x30c>)
 8003352:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003356:	461a      	mov	r2, r3
 8003358:	4bb5      	ldr	r3, [pc, #724]	; (8003630 <_Z4_runv+0x310>)
 800335a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	4618      	mov	r0, r3
 8003362:	f7fd f88b 	bl	800047c <__aeabi_i2d>
 8003366:	f04f 0200 	mov.w	r2, #0
 800336a:	4bb2      	ldr	r3, [pc, #712]	; (8003634 <_Z4_runv+0x314>)
 800336c:	f7fd f8f0 	bl	8000550 <__aeabi_dmul>
 8003370:	4602      	mov	r2, r0
 8003372:	460b      	mov	r3, r1
 8003374:	4610      	mov	r0, r2
 8003376:	4619      	mov	r1, r3
 8003378:	f04f 0200 	mov.w	r2, #0
 800337c:	4bae      	ldr	r3, [pc, #696]	; (8003638 <_Z4_runv+0x318>)
 800337e:	f7fd f8e7 	bl	8000550 <__aeabi_dmul>
 8003382:	4602      	mov	r2, r0
 8003384:	460b      	mov	r3, r1
 8003386:	4610      	mov	r0, r2
 8003388:	4619      	mov	r1, r3
 800338a:	f04f 0200 	mov.w	r2, #0
 800338e:	4bab      	ldr	r3, [pc, #684]	; (800363c <_Z4_runv+0x31c>)
 8003390:	f7fd fa08 	bl	80007a4 <__aeabi_ddiv>
 8003394:	4602      	mov	r2, r0
 8003396:	460b      	mov	r3, r1
 8003398:	49a9      	ldr	r1, [pc, #676]	; (8003640 <_Z4_runv+0x320>)
 800339a:	e9c1 2300 	strd	r2, r3, [r1]
//	y13 = 20;
	y11.data = 0.9753*y12 + 0.02469*y14;
 800339e:	4ba9      	ldr	r3, [pc, #676]	; (8003644 <_Z4_runv+0x324>)
 80033a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033a4:	a38e      	add	r3, pc, #568	; (adr r3, 80035e0 <_Z4_runv+0x2c0>)
 80033a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033aa:	f7fd f8d1 	bl	8000550 <__aeabi_dmul>
 80033ae:	4602      	mov	r2, r0
 80033b0:	460b      	mov	r3, r1
 80033b2:	4692      	mov	sl, r2
 80033b4:	469b      	mov	fp, r3
 80033b6:	4ba4      	ldr	r3, [pc, #656]	; (8003648 <_Z4_runv+0x328>)
 80033b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033bc:	a38a      	add	r3, pc, #552	; (adr r3, 80035e8 <_Z4_runv+0x2c8>)
 80033be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c2:	f7fd f8c5 	bl	8000550 <__aeabi_dmul>
 80033c6:	4602      	mov	r2, r0
 80033c8:	460b      	mov	r3, r1
 80033ca:	4650      	mov	r0, sl
 80033cc:	4659      	mov	r1, fp
 80033ce:	f7fc ff09 	bl	80001e4 <__adddf3>
 80033d2:	4602      	mov	r2, r0
 80033d4:	460b      	mov	r3, r1
 80033d6:	499d      	ldr	r1, [pc, #628]	; (800364c <_Z4_runv+0x32c>)
 80033d8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	y12 = y11.data; y14 = y13;
 80033dc:	4b9b      	ldr	r3, [pc, #620]	; (800364c <_Z4_runv+0x32c>)
 80033de:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80033e2:	4998      	ldr	r1, [pc, #608]	; (8003644 <_Z4_runv+0x324>)
 80033e4:	e9c1 2300 	strd	r2, r3, [r1]
 80033e8:	4b95      	ldr	r3, [pc, #596]	; (8003640 <_Z4_runv+0x320>)
 80033ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ee:	4996      	ldr	r1, [pc, #600]	; (8003648 <_Z4_runv+0x328>)
 80033f0:	e9c1 2300 	strd	r2, r3, [r1]
	preN1 = N1;
 80033f4:	4b8d      	ldr	r3, [pc, #564]	; (800362c <_Z4_runv+0x30c>)
 80033f6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80033fa:	4b8d      	ldr	r3, [pc, #564]	; (8003630 <_Z4_runv+0x310>)
 80033fc:	801a      	strh	r2, [r3, #0]
	y11_lin.data = rpm_to_mps(y11.data, R);
 80033fe:	4b93      	ldr	r3, [pc, #588]	; (800364c <_Z4_runv+0x32c>)
 8003400:	ed93 7b02 	vldr	d7, [r3, #8]
 8003404:	ed9f 1b7a 	vldr	d1, [pc, #488]	; 80035f0 <_Z4_runv+0x2d0>
 8003408:	eeb0 0a47 	vmov.f32	s0, s14
 800340c:	eef0 0a67 	vmov.f32	s1, s15
 8003410:	f7ff ff16 	bl	8003240 <_Z10rpm_to_mpsdd>
 8003414:	eeb0 7a40 	vmov.f32	s14, s0
 8003418:	eef0 7a60 	vmov.f32	s15, s1
 800341c:	4b8c      	ldr	r3, [pc, #560]	; (8003650 <_Z4_runv+0x330>)
 800341e:	ed83 7b02 	vstr	d7, [r3, #8]
	ec11 = set1_ang.data - y11.data;
 8003422:	4b8c      	ldr	r3, [pc, #560]	; (8003654 <_Z4_runv+0x334>)
 8003424:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003428:	4b88      	ldr	r3, [pc, #544]	; (800364c <_Z4_runv+0x32c>)
 800342a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800342e:	f7fc fed7 	bl	80001e0 <__aeabi_dsub>
 8003432:	4602      	mov	r2, r0
 8003434:	460b      	mov	r3, r1
 8003436:	4988      	ldr	r1, [pc, #544]	; (8003658 <_Z4_runv+0x338>)
 8003438:	e9c1 2300 	strd	r2, r3, [r1]
	ym11 = 0.00122*set1_ang.data + 0.00078*set1_ang.data + 1.921*ym12 - 0.923*ym13;
 800343c:	4b85      	ldr	r3, [pc, #532]	; (8003654 <_Z4_runv+0x334>)
 800343e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003442:	a36d      	add	r3, pc, #436	; (adr r3, 80035f8 <_Z4_runv+0x2d8>)
 8003444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003448:	f7fd f882 	bl	8000550 <__aeabi_dmul>
 800344c:	4602      	mov	r2, r0
 800344e:	460b      	mov	r3, r1
 8003450:	4692      	mov	sl, r2
 8003452:	469b      	mov	fp, r3
 8003454:	4b7f      	ldr	r3, [pc, #508]	; (8003654 <_Z4_runv+0x334>)
 8003456:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800345a:	a369      	add	r3, pc, #420	; (adr r3, 8003600 <_Z4_runv+0x2e0>)
 800345c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003460:	f7fd f876 	bl	8000550 <__aeabi_dmul>
 8003464:	4602      	mov	r2, r0
 8003466:	460b      	mov	r3, r1
 8003468:	4650      	mov	r0, sl
 800346a:	4659      	mov	r1, fp
 800346c:	f7fc feba 	bl	80001e4 <__adddf3>
 8003470:	4602      	mov	r2, r0
 8003472:	460b      	mov	r3, r1
 8003474:	4692      	mov	sl, r2
 8003476:	469b      	mov	fp, r3
 8003478:	4b78      	ldr	r3, [pc, #480]	; (800365c <_Z4_runv+0x33c>)
 800347a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800347e:	a362      	add	r3, pc, #392	; (adr r3, 8003608 <_Z4_runv+0x2e8>)
 8003480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003484:	f7fd f864 	bl	8000550 <__aeabi_dmul>
 8003488:	4602      	mov	r2, r0
 800348a:	460b      	mov	r3, r1
 800348c:	4650      	mov	r0, sl
 800348e:	4659      	mov	r1, fp
 8003490:	f7fc fea8 	bl	80001e4 <__adddf3>
 8003494:	4602      	mov	r2, r0
 8003496:	460b      	mov	r3, r1
 8003498:	4692      	mov	sl, r2
 800349a:	469b      	mov	fp, r3
 800349c:	4b70      	ldr	r3, [pc, #448]	; (8003660 <_Z4_runv+0x340>)
 800349e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034a2:	a35b      	add	r3, pc, #364	; (adr r3, 8003610 <_Z4_runv+0x2f0>)
 80034a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a8:	f7fd f852 	bl	8000550 <__aeabi_dmul>
 80034ac:	4602      	mov	r2, r0
 80034ae:	460b      	mov	r3, r1
 80034b0:	4650      	mov	r0, sl
 80034b2:	4659      	mov	r1, fp
 80034b4:	f7fc fe94 	bl	80001e0 <__aeabi_dsub>
 80034b8:	4602      	mov	r2, r0
 80034ba:	460b      	mov	r3, r1
 80034bc:	4969      	ldr	r1, [pc, #420]	; (8003664 <_Z4_runv+0x344>)
 80034be:	e9c1 2300 	strd	r2, r3, [r1]
	em11 = y11.data - ym11;
 80034c2:	4b62      	ldr	r3, [pc, #392]	; (800364c <_Z4_runv+0x32c>)
 80034c4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80034c8:	4b66      	ldr	r3, [pc, #408]	; (8003664 <_Z4_runv+0x344>)
 80034ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ce:	f7fc fe87 	bl	80001e0 <__aeabi_dsub>
 80034d2:	4602      	mov	r2, r0
 80034d4:	460b      	mov	r3, r1
 80034d6:	4964      	ldr	r1, [pc, #400]	; (8003668 <_Z4_runv+0x348>)
 80034d8:	e9c1 2300 	strd	r2, r3, [r1]
	delkp11 = 1.921*delkp12 - 0.923*delkp13 + 0.07685*ec12 - 0.07685*ec13;
 80034dc:	4b63      	ldr	r3, [pc, #396]	; (800366c <_Z4_runv+0x34c>)
 80034de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034e2:	a349      	add	r3, pc, #292	; (adr r3, 8003608 <_Z4_runv+0x2e8>)
 80034e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e8:	f7fd f832 	bl	8000550 <__aeabi_dmul>
 80034ec:	4602      	mov	r2, r0
 80034ee:	460b      	mov	r3, r1
 80034f0:	4692      	mov	sl, r2
 80034f2:	469b      	mov	fp, r3
 80034f4:	4b5e      	ldr	r3, [pc, #376]	; (8003670 <_Z4_runv+0x350>)
 80034f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034fa:	a345      	add	r3, pc, #276	; (adr r3, 8003610 <_Z4_runv+0x2f0>)
 80034fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003500:	f7fd f826 	bl	8000550 <__aeabi_dmul>
 8003504:	4602      	mov	r2, r0
 8003506:	460b      	mov	r3, r1
 8003508:	4650      	mov	r0, sl
 800350a:	4659      	mov	r1, fp
 800350c:	f7fc fe68 	bl	80001e0 <__aeabi_dsub>
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	4692      	mov	sl, r2
 8003516:	469b      	mov	fp, r3
 8003518:	4b56      	ldr	r3, [pc, #344]	; (8003674 <_Z4_runv+0x354>)
 800351a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800351e:	a33e      	add	r3, pc, #248	; (adr r3, 8003618 <_Z4_runv+0x2f8>)
 8003520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003524:	f7fd f814 	bl	8000550 <__aeabi_dmul>
 8003528:	4602      	mov	r2, r0
 800352a:	460b      	mov	r3, r1
 800352c:	4650      	mov	r0, sl
 800352e:	4659      	mov	r1, fp
 8003530:	f7fc fe58 	bl	80001e4 <__adddf3>
 8003534:	4602      	mov	r2, r0
 8003536:	460b      	mov	r3, r1
 8003538:	4692      	mov	sl, r2
 800353a:	469b      	mov	fp, r3
 800353c:	4b4e      	ldr	r3, [pc, #312]	; (8003678 <_Z4_runv+0x358>)
 800353e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003542:	a335      	add	r3, pc, #212	; (adr r3, 8003618 <_Z4_runv+0x2f8>)
 8003544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003548:	f7fd f802 	bl	8000550 <__aeabi_dmul>
 800354c:	4602      	mov	r2, r0
 800354e:	460b      	mov	r3, r1
 8003550:	4650      	mov	r0, sl
 8003552:	4659      	mov	r1, fp
 8003554:	f7fc fe44 	bl	80001e0 <__aeabi_dsub>
 8003558:	4602      	mov	r2, r0
 800355a:	460b      	mov	r3, r1
 800355c:	4947      	ldr	r1, [pc, #284]	; (800367c <_Z4_runv+0x35c>)
 800355e:	e9c1 2300 	strd	r2, r3, [r1]
	Kp1 += -gammap1*em11*delkp11;
 8003562:	4b41      	ldr	r3, [pc, #260]	; (8003668 <_Z4_runv+0x348>)
 8003564:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003568:	a32d      	add	r3, pc, #180	; (adr r3, 8003620 <_Z4_runv+0x300>)
 800356a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800356e:	f7fc ffef 	bl	8000550 <__aeabi_dmul>
 8003572:	4602      	mov	r2, r0
 8003574:	460b      	mov	r3, r1
 8003576:	4610      	mov	r0, r2
 8003578:	4619      	mov	r1, r3
 800357a:	4b40      	ldr	r3, [pc, #256]	; (800367c <_Z4_runv+0x35c>)
 800357c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003580:	f7fc ffe6 	bl	8000550 <__aeabi_dmul>
 8003584:	4602      	mov	r2, r0
 8003586:	460b      	mov	r3, r1
 8003588:	4610      	mov	r0, r2
 800358a:	4619      	mov	r1, r3
 800358c:	4b3c      	ldr	r3, [pc, #240]	; (8003680 <_Z4_runv+0x360>)
 800358e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003592:	f7fc fe27 	bl	80001e4 <__adddf3>
 8003596:	4602      	mov	r2, r0
 8003598:	460b      	mov	r3, r1
 800359a:	4939      	ldr	r1, [pc, #228]	; (8003680 <_Z4_runv+0x360>)
 800359c:	e9c1 2300 	strd	r2, r3, [r1]
	delki11 = 1.921*delki12 - 0.923*delki13 + 0.00039*ec12 + 0.00025*ec13;
 80035a0:	4b38      	ldr	r3, [pc, #224]	; (8003684 <_Z4_runv+0x364>)
 80035a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035a6:	a318      	add	r3, pc, #96	; (adr r3, 8003608 <_Z4_runv+0x2e8>)
 80035a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ac:	f7fc ffd0 	bl	8000550 <__aeabi_dmul>
 80035b0:	4602      	mov	r2, r0
 80035b2:	460b      	mov	r3, r1
 80035b4:	4692      	mov	sl, r2
 80035b6:	469b      	mov	fp, r3
 80035b8:	4b33      	ldr	r3, [pc, #204]	; (8003688 <_Z4_runv+0x368>)
 80035ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035be:	a314      	add	r3, pc, #80	; (adr r3, 8003610 <_Z4_runv+0x2f0>)
 80035c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c4:	f7fc ffc4 	bl	8000550 <__aeabi_dmul>
 80035c8:	4602      	mov	r2, r0
 80035ca:	460b      	mov	r3, r1
 80035cc:	4650      	mov	r0, sl
 80035ce:	4659      	mov	r1, fp
 80035d0:	f7fc fe06 	bl	80001e0 <__aeabi_dsub>
 80035d4:	4602      	mov	r2, r0
 80035d6:	460b      	mov	r3, r1
 80035d8:	4692      	mov	sl, r2
 80035da:	e057      	b.n	800368c <_Z4_runv+0x36c>
 80035dc:	f3af 8000 	nop.w
 80035e0:	58793dd9 	.word	0x58793dd9
 80035e4:	3fef35a8 	.word	0x3fef35a8
 80035e8:	da272863 	.word	0xda272863
 80035ec:	3f994855 	.word	0x3f994855
 80035f0:	cccccccd 	.word	0xcccccccd
 80035f4:	3fc4cccc 	.word	0x3fc4cccc
 80035f8:	0678c005 	.word	0x0678c005
 80035fc:	3f53fd0d 	.word	0x3f53fd0d
 8003600:	3ed527e5 	.word	0x3ed527e5
 8003604:	3f498f1d 	.word	0x3f498f1d
 8003608:	7ef9db23 	.word	0x7ef9db23
 800360c:	3ffebc6a 	.word	0x3ffebc6a
 8003610:	4bc6a7f0 	.word	0x4bc6a7f0
 8003614:	3fed8937 	.word	0x3fed8937
 8003618:	0cb295ea 	.word	0x0cb295ea
 800361c:	3fb3ac71 	.word	0x3fb3ac71
 8003620:	eb1c432d 	.word	0xeb1c432d
 8003624:	bf0a36e2 	.word	0xbf0a36e2
 8003628:	20000094 	.word	0x20000094
 800362c:	20000c98 	.word	0x20000c98
 8003630:	20000c9a 	.word	0x20000c9a
 8003634:	404e0000 	.word	0x404e0000
 8003638:	40590000 	.word	0x40590000
 800363c:	40af4000 	.word	0x40af4000
 8003640:	20000ca8 	.word	0x20000ca8
 8003644:	20000ca0 	.word	0x20000ca0
 8003648:	20000cb0 	.word	0x20000cb0
 800364c:	20000c58 	.word	0x20000c58
 8003650:	20000c78 	.word	0x20000c78
 8003654:	20000c18 	.word	0x20000c18
 8003658:	20000cd0 	.word	0x20000cd0
 800365c:	20000cc0 	.word	0x20000cc0
 8003660:	20000cc8 	.word	0x20000cc8
 8003664:	20000cb8 	.word	0x20000cb8
 8003668:	20000ce8 	.word	0x20000ce8
 800366c:	20000d08 	.word	0x20000d08
 8003670:	20000d10 	.word	0x20000d10
 8003674:	20000cd8 	.word	0x20000cd8
 8003678:	20000ce0 	.word	0x20000ce0
 800367c:	20000d00 	.word	0x20000d00
 8003680:	20000d30 	.word	0x20000d30
 8003684:	20000d20 	.word	0x20000d20
 8003688:	20000d28 	.word	0x20000d28
 800368c:	469b      	mov	fp, r3
 800368e:	4b66      	ldr	r3, [pc, #408]	; (8003828 <_Z4_runv+0x508>)
 8003690:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003694:	a35c      	add	r3, pc, #368	; (adr r3, 8003808 <_Z4_runv+0x4e8>)
 8003696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369a:	f7fc ff59 	bl	8000550 <__aeabi_dmul>
 800369e:	4602      	mov	r2, r0
 80036a0:	460b      	mov	r3, r1
 80036a2:	4650      	mov	r0, sl
 80036a4:	4659      	mov	r1, fp
 80036a6:	f7fc fd9d 	bl	80001e4 <__adddf3>
 80036aa:	4602      	mov	r2, r0
 80036ac:	460b      	mov	r3, r1
 80036ae:	4692      	mov	sl, r2
 80036b0:	469b      	mov	fp, r3
 80036b2:	4b5e      	ldr	r3, [pc, #376]	; (800382c <_Z4_runv+0x50c>)
 80036b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036b8:	a355      	add	r3, pc, #340	; (adr r3, 8003810 <_Z4_runv+0x4f0>)
 80036ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036be:	f7fc ff47 	bl	8000550 <__aeabi_dmul>
 80036c2:	4602      	mov	r2, r0
 80036c4:	460b      	mov	r3, r1
 80036c6:	4650      	mov	r0, sl
 80036c8:	4659      	mov	r1, fp
 80036ca:	f7fc fd8b 	bl	80001e4 <__adddf3>
 80036ce:	4602      	mov	r2, r0
 80036d0:	460b      	mov	r3, r1
 80036d2:	4957      	ldr	r1, [pc, #348]	; (8003830 <_Z4_runv+0x510>)
 80036d4:	e9c1 2300 	strd	r2, r3, [r1]
	Ki1 += -gammai1*em11*delki11;
 80036d8:	4b56      	ldr	r3, [pc, #344]	; (8003834 <_Z4_runv+0x514>)
 80036da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036de:	a34e      	add	r3, pc, #312	; (adr r3, 8003818 <_Z4_runv+0x4f8>)
 80036e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e4:	f7fc ff34 	bl	8000550 <__aeabi_dmul>
 80036e8:	4602      	mov	r2, r0
 80036ea:	460b      	mov	r3, r1
 80036ec:	4610      	mov	r0, r2
 80036ee:	4619      	mov	r1, r3
 80036f0:	4b4f      	ldr	r3, [pc, #316]	; (8003830 <_Z4_runv+0x510>)
 80036f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f6:	f7fc ff2b 	bl	8000550 <__aeabi_dmul>
 80036fa:	4602      	mov	r2, r0
 80036fc:	460b      	mov	r3, r1
 80036fe:	4610      	mov	r0, r2
 8003700:	4619      	mov	r1, r3
 8003702:	4b4d      	ldr	r3, [pc, #308]	; (8003838 <_Z4_runv+0x518>)
 8003704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003708:	f7fc fd6c 	bl	80001e4 <__adddf3>
 800370c:	4602      	mov	r2, r0
 800370e:	460b      	mov	r3, r1
 8003710:	4949      	ldr	r1, [pc, #292]	; (8003838 <_Z4_runv+0x518>)
 8003712:	e9c1 2300 	strd	r2, r3, [r1]

	alpha1 = Kp1*(ec11 - ec12);
 8003716:	4b49      	ldr	r3, [pc, #292]	; (800383c <_Z4_runv+0x51c>)
 8003718:	e9d3 0100 	ldrd	r0, r1, [r3]
 800371c:	4b42      	ldr	r3, [pc, #264]	; (8003828 <_Z4_runv+0x508>)
 800371e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003722:	f7fc fd5d 	bl	80001e0 <__aeabi_dsub>
 8003726:	4602      	mov	r2, r0
 8003728:	460b      	mov	r3, r1
 800372a:	4610      	mov	r0, r2
 800372c:	4619      	mov	r1, r3
 800372e:	4b44      	ldr	r3, [pc, #272]	; (8003840 <_Z4_runv+0x520>)
 8003730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003734:	f7fc ff0c 	bl	8000550 <__aeabi_dmul>
 8003738:	4602      	mov	r2, r0
 800373a:	460b      	mov	r3, r1
 800373c:	4941      	ldr	r1, [pc, #260]	; (8003844 <_Z4_runv+0x524>)
 800373e:	e9c1 2300 	strd	r2, r3, [r1]
	beta1 = T/2*Ki1*(ec11 + ec12);
 8003742:	4b3d      	ldr	r3, [pc, #244]	; (8003838 <_Z4_runv+0x518>)
 8003744:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003748:	a335      	add	r3, pc, #212	; (adr r3, 8003820 <_Z4_runv+0x500>)
 800374a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374e:	f7fc feff 	bl	8000550 <__aeabi_dmul>
 8003752:	4602      	mov	r2, r0
 8003754:	460b      	mov	r3, r1
 8003756:	4692      	mov	sl, r2
 8003758:	469b      	mov	fp, r3
 800375a:	4b38      	ldr	r3, [pc, #224]	; (800383c <_Z4_runv+0x51c>)
 800375c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003760:	4b31      	ldr	r3, [pc, #196]	; (8003828 <_Z4_runv+0x508>)
 8003762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003766:	f7fc fd3d 	bl	80001e4 <__adddf3>
 800376a:	4602      	mov	r2, r0
 800376c:	460b      	mov	r3, r1
 800376e:	4650      	mov	r0, sl
 8003770:	4659      	mov	r1, fp
 8003772:	f7fc feed 	bl	8000550 <__aeabi_dmul>
 8003776:	4602      	mov	r2, r0
 8003778:	460b      	mov	r3, r1
 800377a:	4933      	ldr	r1, [pc, #204]	; (8003848 <_Z4_runv+0x528>)
 800377c:	e9c1 2300 	strd	r2, r3, [r1]
	u11 = u12 + alpha1 + beta1;
 8003780:	4b32      	ldr	r3, [pc, #200]	; (800384c <_Z4_runv+0x52c>)
 8003782:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003786:	4b2f      	ldr	r3, [pc, #188]	; (8003844 <_Z4_runv+0x524>)
 8003788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378c:	f7fc fd2a 	bl	80001e4 <__adddf3>
 8003790:	4602      	mov	r2, r0
 8003792:	460b      	mov	r3, r1
 8003794:	4610      	mov	r0, r2
 8003796:	4619      	mov	r1, r3
 8003798:	4b2b      	ldr	r3, [pc, #172]	; (8003848 <_Z4_runv+0x528>)
 800379a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800379e:	f7fc fd21 	bl	80001e4 <__adddf3>
 80037a2:	4602      	mov	r2, r0
 80037a4:	460b      	mov	r3, r1
 80037a6:	492a      	ldr	r1, [pc, #168]	; (8003850 <_Z4_runv+0x530>)
 80037a8:	e9c1 2300 	strd	r2, r3, [r1]

	if(u11 < 0)
 80037ac:	4b28      	ldr	r3, [pc, #160]	; (8003850 <_Z4_runv+0x530>)
 80037ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037b2:	f04f 0200 	mov.w	r2, #0
 80037b6:	f04f 0300 	mov.w	r3, #0
 80037ba:	f7fd f93b 	bl	8000a34 <__aeabi_dcmplt>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d04b      	beq.n	800385c <_Z4_runv+0x53c>
		{
			if(u11 < 0){
 80037c4:	4b22      	ldr	r3, [pc, #136]	; (8003850 <_Z4_runv+0x530>)
 80037c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037ca:	f04f 0200 	mov.w	r2, #0
 80037ce:	f04f 0300 	mov.w	r3, #0
 80037d2:	f7fd f92f 	bl	8000a34 <__aeabi_dcmplt>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d05c      	beq.n	8003896 <_Z4_runv+0x576>
				HAL_GPIO_WritePin(GPIOC,GPIO_PIN_14,GPIO_PIN_SET);
 80037dc:	2201      	movs	r2, #1
 80037de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80037e2:	481c      	ldr	r0, [pc, #112]	; (8003854 <_Z4_runv+0x534>)
 80037e4:	f002 fcf2 	bl	80061cc <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, -u11);
 80037e8:	4b19      	ldr	r3, [pc, #100]	; (8003850 <_Z4_runv+0x530>)
 80037ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ee:	4690      	mov	r8, r2
 80037f0:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80037f4:	4b18      	ldr	r3, [pc, #96]	; (8003858 <_Z4_runv+0x538>)
 80037f6:	681e      	ldr	r6, [r3, #0]
 80037f8:	4640      	mov	r0, r8
 80037fa:	4649      	mov	r1, r9
 80037fc:	f7fd f942 	bl	8000a84 <__aeabi_d2uiz>
 8003800:	4603      	mov	r3, r0
 8003802:	6373      	str	r3, [r6, #52]	; 0x34
 8003804:	e047      	b.n	8003896 <_Z4_runv+0x576>
 8003806:	bf00      	nop
 8003808:	3ed527e5 	.word	0x3ed527e5
 800380c:	3f398f1d 	.word	0x3f398f1d
 8003810:	d2f1a9fc 	.word	0xd2f1a9fc
 8003814:	3f30624d 	.word	0x3f30624d
 8003818:	eb1c432d 	.word	0xeb1c432d
 800381c:	bf0a36e2 	.word	0xbf0a36e2
 8003820:	47ae147b 	.word	0x47ae147b
 8003824:	3f747ae1 	.word	0x3f747ae1
 8003828:	20000cd8 	.word	0x20000cd8
 800382c:	20000ce0 	.word	0x20000ce0
 8003830:	20000d18 	.word	0x20000d18
 8003834:	20000ce8 	.word	0x20000ce8
 8003838:	20000d38 	.word	0x20000d38
 800383c:	20000cd0 	.word	0x20000cd0
 8003840:	20000d30 	.word	0x20000d30
 8003844:	20000d40 	.word	0x20000d40
 8003848:	20000d48 	.word	0x20000d48
 800384c:	20000d58 	.word	0x20000d58
 8003850:	20000d50 	.word	0x20000d50
 8003854:	40020800 	.word	0x40020800
 8003858:	200000dc 	.word	0x200000dc
			}
		}
		else
		{
			if(u11 >= 0){
 800385c:	4baa      	ldr	r3, [pc, #680]	; (8003b08 <_Z4_runv+0x7e8>)
 800385e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003862:	f04f 0200 	mov.w	r2, #0
 8003866:	f04f 0300 	mov.w	r3, #0
 800386a:	f7fd f8f7 	bl	8000a5c <__aeabi_dcmpge>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d010      	beq.n	8003896 <_Z4_runv+0x576>
				HAL_GPIO_WritePin(GPIOC,GPIO_PIN_14,GPIO_PIN_RESET);
 8003874:	2200      	movs	r2, #0
 8003876:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800387a:	48a4      	ldr	r0, [pc, #656]	; (8003b0c <_Z4_runv+0x7ec>)
 800387c:	f002 fca6 	bl	80061cc <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, u11);
 8003880:	4ba1      	ldr	r3, [pc, #644]	; (8003b08 <_Z4_runv+0x7e8>)
 8003882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003886:	49a2      	ldr	r1, [pc, #648]	; (8003b10 <_Z4_runv+0x7f0>)
 8003888:	680e      	ldr	r6, [r1, #0]
 800388a:	4610      	mov	r0, r2
 800388c:	4619      	mov	r1, r3
 800388e:	f7fd f8f9 	bl	8000a84 <__aeabi_d2uiz>
 8003892:	4603      	mov	r3, r0
 8003894:	6373      	str	r3, [r6, #52]	; 0x34
			}
		}

		if(set1_ang.data == 0) u11 = 0;
 8003896:	4b9f      	ldr	r3, [pc, #636]	; (8003b14 <_Z4_runv+0x7f4>)
 8003898:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800389c:	f04f 0200 	mov.w	r2, #0
 80038a0:	f04f 0300 	mov.w	r3, #0
 80038a4:	f7fd f8bc 	bl	8000a20 <__aeabi_dcmpeq>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d006      	beq.n	80038bc <_Z4_runv+0x59c>
 80038ae:	4996      	ldr	r1, [pc, #600]	; (8003b08 <_Z4_runv+0x7e8>)
 80038b0:	f04f 0200 	mov.w	r2, #0
 80038b4:	f04f 0300 	mov.w	r3, #0
 80038b8:	e9c1 2300 	strd	r2, r3, [r1]

	u12 = u11;
 80038bc:	4b92      	ldr	r3, [pc, #584]	; (8003b08 <_Z4_runv+0x7e8>)
 80038be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c2:	4995      	ldr	r1, [pc, #596]	; (8003b18 <_Z4_runv+0x7f8>)
 80038c4:	e9c1 2300 	strd	r2, r3, [r1]
	ec13 = ec12; ec12 = ec11; em13 = em12; em12 = em11;	ym13 = ym12; ym12 = ym11;
 80038c8:	4b94      	ldr	r3, [pc, #592]	; (8003b1c <_Z4_runv+0x7fc>)
 80038ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ce:	4994      	ldr	r1, [pc, #592]	; (8003b20 <_Z4_runv+0x800>)
 80038d0:	e9c1 2300 	strd	r2, r3, [r1]
 80038d4:	4b93      	ldr	r3, [pc, #588]	; (8003b24 <_Z4_runv+0x804>)
 80038d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038da:	4990      	ldr	r1, [pc, #576]	; (8003b1c <_Z4_runv+0x7fc>)
 80038dc:	e9c1 2300 	strd	r2, r3, [r1]
 80038e0:	4b91      	ldr	r3, [pc, #580]	; (8003b28 <_Z4_runv+0x808>)
 80038e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e6:	4991      	ldr	r1, [pc, #580]	; (8003b2c <_Z4_runv+0x80c>)
 80038e8:	e9c1 2300 	strd	r2, r3, [r1]
 80038ec:	4b90      	ldr	r3, [pc, #576]	; (8003b30 <_Z4_runv+0x810>)
 80038ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f2:	498d      	ldr	r1, [pc, #564]	; (8003b28 <_Z4_runv+0x808>)
 80038f4:	e9c1 2300 	strd	r2, r3, [r1]
 80038f8:	4b8e      	ldr	r3, [pc, #568]	; (8003b34 <_Z4_runv+0x814>)
 80038fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fe:	498e      	ldr	r1, [pc, #568]	; (8003b38 <_Z4_runv+0x818>)
 8003900:	e9c1 2300 	strd	r2, r3, [r1]
 8003904:	4b8d      	ldr	r3, [pc, #564]	; (8003b3c <_Z4_runv+0x81c>)
 8003906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390a:	498a      	ldr	r1, [pc, #552]	; (8003b34 <_Z4_runv+0x814>)
 800390c:	e9c1 2300 	strd	r2, r3, [r1]
	delkp13 = delkp12; delkp12 = delkp11; delki13 = delki12; delki12 = delki11;
 8003910:	4b8b      	ldr	r3, [pc, #556]	; (8003b40 <_Z4_runv+0x820>)
 8003912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003916:	498b      	ldr	r1, [pc, #556]	; (8003b44 <_Z4_runv+0x824>)
 8003918:	e9c1 2300 	strd	r2, r3, [r1]
 800391c:	4b8a      	ldr	r3, [pc, #552]	; (8003b48 <_Z4_runv+0x828>)
 800391e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003922:	4987      	ldr	r1, [pc, #540]	; (8003b40 <_Z4_runv+0x820>)
 8003924:	e9c1 2300 	strd	r2, r3, [r1]
 8003928:	4b88      	ldr	r3, [pc, #544]	; (8003b4c <_Z4_runv+0x82c>)
 800392a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800392e:	4988      	ldr	r1, [pc, #544]	; (8003b50 <_Z4_runv+0x830>)
 8003930:	e9c1 2300 	strd	r2, r3, [r1]
 8003934:	4b87      	ldr	r3, [pc, #540]	; (8003b54 <_Z4_runv+0x834>)
 8003936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800393a:	4984      	ldr	r1, [pc, #528]	; (8003b4c <_Z4_runv+0x82c>)
 800393c:	e9c1 2300 	strd	r2, r3, [r1]

	u11_s.data = u11;
 8003940:	4b71      	ldr	r3, [pc, #452]	; (8003b08 <_Z4_runv+0x7e8>)
 8003942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003946:	4984      	ldr	r1, [pc, #528]	; (8003b58 <_Z4_runv+0x838>)
 8003948:	e9c1 2302 	strd	r2, r3, [r1, #8]

	// Right wheel
	N2 = __HAL_TIM_GET_COUNTER(&htim3);
 800394c:	4b83      	ldr	r3, [pc, #524]	; (8003b5c <_Z4_runv+0x83c>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003952:	b21a      	sxth	r2, r3
 8003954:	4b82      	ldr	r3, [pc, #520]	; (8003b60 <_Z4_runv+0x840>)
 8003956:	801a      	strh	r2, [r3, #0]
	if(abs((int)(N2 - preN2)) < 40000) y23 = ((N2 - preN2)*60.0*100/4000);
 8003958:	4b81      	ldr	r3, [pc, #516]	; (8003b60 <_Z4_runv+0x840>)
 800395a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800395e:	461a      	mov	r2, r3
 8003960:	4b80      	ldr	r3, [pc, #512]	; (8003b64 <_Z4_runv+0x844>)
 8003962:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	2b00      	cmp	r3, #0
 800396a:	bfb8      	it	lt
 800396c:	425b      	neglt	r3, r3
 800396e:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8003972:	4293      	cmp	r3, r2
 8003974:	dc26      	bgt.n	80039c4 <_Z4_runv+0x6a4>
 8003976:	4b7a      	ldr	r3, [pc, #488]	; (8003b60 <_Z4_runv+0x840>)
 8003978:	f9b3 3000 	ldrsh.w	r3, [r3]
 800397c:	461a      	mov	r2, r3
 800397e:	4b79      	ldr	r3, [pc, #484]	; (8003b64 <_Z4_runv+0x844>)
 8003980:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	4618      	mov	r0, r3
 8003988:	f7fc fd78 	bl	800047c <__aeabi_i2d>
 800398c:	f04f 0200 	mov.w	r2, #0
 8003990:	4b75      	ldr	r3, [pc, #468]	; (8003b68 <_Z4_runv+0x848>)
 8003992:	f7fc fddd 	bl	8000550 <__aeabi_dmul>
 8003996:	4602      	mov	r2, r0
 8003998:	460b      	mov	r3, r1
 800399a:	4610      	mov	r0, r2
 800399c:	4619      	mov	r1, r3
 800399e:	f04f 0200 	mov.w	r2, #0
 80039a2:	4b72      	ldr	r3, [pc, #456]	; (8003b6c <_Z4_runv+0x84c>)
 80039a4:	f7fc fdd4 	bl	8000550 <__aeabi_dmul>
 80039a8:	4602      	mov	r2, r0
 80039aa:	460b      	mov	r3, r1
 80039ac:	4610      	mov	r0, r2
 80039ae:	4619      	mov	r1, r3
 80039b0:	f04f 0200 	mov.w	r2, #0
 80039b4:	4b6e      	ldr	r3, [pc, #440]	; (8003b70 <_Z4_runv+0x850>)
 80039b6:	f7fc fef5 	bl	80007a4 <__aeabi_ddiv>
 80039ba:	4602      	mov	r2, r0
 80039bc:	460b      	mov	r3, r1
 80039be:	496d      	ldr	r1, [pc, #436]	; (8003b74 <_Z4_runv+0x854>)
 80039c0:	e9c1 2300 	strd	r2, r3, [r1]
//	y23 = 20;
	y21.data = 0.9753*y22 + 0.02469*y24;
 80039c4:	4b6c      	ldr	r3, [pc, #432]	; (8003b78 <_Z4_runv+0x858>)
 80039c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80039ca:	a341      	add	r3, pc, #260	; (adr r3, 8003ad0 <_Z4_runv+0x7b0>)
 80039cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d0:	f7fc fdbe 	bl	8000550 <__aeabi_dmul>
 80039d4:	4602      	mov	r2, r0
 80039d6:	460b      	mov	r3, r1
 80039d8:	4690      	mov	r8, r2
 80039da:	4699      	mov	r9, r3
 80039dc:	4b67      	ldr	r3, [pc, #412]	; (8003b7c <_Z4_runv+0x85c>)
 80039de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80039e2:	a33d      	add	r3, pc, #244	; (adr r3, 8003ad8 <_Z4_runv+0x7b8>)
 80039e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e8:	f7fc fdb2 	bl	8000550 <__aeabi_dmul>
 80039ec:	4602      	mov	r2, r0
 80039ee:	460b      	mov	r3, r1
 80039f0:	4640      	mov	r0, r8
 80039f2:	4649      	mov	r1, r9
 80039f4:	f7fc fbf6 	bl	80001e4 <__adddf3>
 80039f8:	4602      	mov	r2, r0
 80039fa:	460b      	mov	r3, r1
 80039fc:	4960      	ldr	r1, [pc, #384]	; (8003b80 <_Z4_runv+0x860>)
 80039fe:	e9c1 2302 	strd	r2, r3, [r1, #8]
	y22 = y21.data; y24 = y23;
 8003a02:	4b5f      	ldr	r3, [pc, #380]	; (8003b80 <_Z4_runv+0x860>)
 8003a04:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003a08:	495b      	ldr	r1, [pc, #364]	; (8003b78 <_Z4_runv+0x858>)
 8003a0a:	e9c1 2300 	strd	r2, r3, [r1]
 8003a0e:	4b59      	ldr	r3, [pc, #356]	; (8003b74 <_Z4_runv+0x854>)
 8003a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a14:	4959      	ldr	r1, [pc, #356]	; (8003b7c <_Z4_runv+0x85c>)
 8003a16:	e9c1 2300 	strd	r2, r3, [r1]
	preN2 = N2;
 8003a1a:	4b51      	ldr	r3, [pc, #324]	; (8003b60 <_Z4_runv+0x840>)
 8003a1c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003a20:	4b50      	ldr	r3, [pc, #320]	; (8003b64 <_Z4_runv+0x844>)
 8003a22:	801a      	strh	r2, [r3, #0]
	y21_lin.data = rpm_to_mps(y21.data, R);
 8003a24:	4b56      	ldr	r3, [pc, #344]	; (8003b80 <_Z4_runv+0x860>)
 8003a26:	ed93 7b02 	vldr	d7, [r3, #8]
 8003a2a:	ed9f 1b2d 	vldr	d1, [pc, #180]	; 8003ae0 <_Z4_runv+0x7c0>
 8003a2e:	eeb0 0a47 	vmov.f32	s0, s14
 8003a32:	eef0 0a67 	vmov.f32	s1, s15
 8003a36:	f7ff fc03 	bl	8003240 <_Z10rpm_to_mpsdd>
 8003a3a:	eeb0 7a40 	vmov.f32	s14, s0
 8003a3e:	eef0 7a60 	vmov.f32	s15, s1
 8003a42:	4b50      	ldr	r3, [pc, #320]	; (8003b84 <_Z4_runv+0x864>)
 8003a44:	ed83 7b02 	vstr	d7, [r3, #8]
	ec21 = set2_ang.data - y21.data;
 8003a48:	4b4f      	ldr	r3, [pc, #316]	; (8003b88 <_Z4_runv+0x868>)
 8003a4a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003a4e:	4b4c      	ldr	r3, [pc, #304]	; (8003b80 <_Z4_runv+0x860>)
 8003a50:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003a54:	f7fc fbc4 	bl	80001e0 <__aeabi_dsub>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	494b      	ldr	r1, [pc, #300]	; (8003b8c <_Z4_runv+0x86c>)
 8003a5e:	e9c1 2300 	strd	r2, r3, [r1]
	ym21 = 0.00122*set2_ang.data + 0.00078*set2_ang.data + 1.921*ym22 - 0.923*ym23;
 8003a62:	4b49      	ldr	r3, [pc, #292]	; (8003b88 <_Z4_runv+0x868>)
 8003a64:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003a68:	a31f      	add	r3, pc, #124	; (adr r3, 8003ae8 <_Z4_runv+0x7c8>)
 8003a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6e:	f7fc fd6f 	bl	8000550 <__aeabi_dmul>
 8003a72:	4602      	mov	r2, r0
 8003a74:	460b      	mov	r3, r1
 8003a76:	4690      	mov	r8, r2
 8003a78:	4699      	mov	r9, r3
 8003a7a:	4b43      	ldr	r3, [pc, #268]	; (8003b88 <_Z4_runv+0x868>)
 8003a7c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003a80:	a31b      	add	r3, pc, #108	; (adr r3, 8003af0 <_Z4_runv+0x7d0>)
 8003a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a86:	f7fc fd63 	bl	8000550 <__aeabi_dmul>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	4640      	mov	r0, r8
 8003a90:	4649      	mov	r1, r9
 8003a92:	f7fc fba7 	bl	80001e4 <__adddf3>
 8003a96:	4602      	mov	r2, r0
 8003a98:	460b      	mov	r3, r1
 8003a9a:	4690      	mov	r8, r2
 8003a9c:	4699      	mov	r9, r3
 8003a9e:	4b3c      	ldr	r3, [pc, #240]	; (8003b90 <_Z4_runv+0x870>)
 8003aa0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003aa4:	a314      	add	r3, pc, #80	; (adr r3, 8003af8 <_Z4_runv+0x7d8>)
 8003aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aaa:	f7fc fd51 	bl	8000550 <__aeabi_dmul>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	4640      	mov	r0, r8
 8003ab4:	4649      	mov	r1, r9
 8003ab6:	f7fc fb95 	bl	80001e4 <__adddf3>
 8003aba:	4602      	mov	r2, r0
 8003abc:	460b      	mov	r3, r1
 8003abe:	4690      	mov	r8, r2
 8003ac0:	4699      	mov	r9, r3
 8003ac2:	4b34      	ldr	r3, [pc, #208]	; (8003b94 <_Z4_runv+0x874>)
 8003ac4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ac8:	a30d      	add	r3, pc, #52	; (adr r3, 8003b00 <_Z4_runv+0x7e0>)
 8003aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ace:	e063      	b.n	8003b98 <_Z4_runv+0x878>
 8003ad0:	58793dd9 	.word	0x58793dd9
 8003ad4:	3fef35a8 	.word	0x3fef35a8
 8003ad8:	da272863 	.word	0xda272863
 8003adc:	3f994855 	.word	0x3f994855
 8003ae0:	cccccccd 	.word	0xcccccccd
 8003ae4:	3fc4cccc 	.word	0x3fc4cccc
 8003ae8:	0678c005 	.word	0x0678c005
 8003aec:	3f53fd0d 	.word	0x3f53fd0d
 8003af0:	3ed527e5 	.word	0x3ed527e5
 8003af4:	3f498f1d 	.word	0x3f498f1d
 8003af8:	7ef9db23 	.word	0x7ef9db23
 8003afc:	3ffebc6a 	.word	0x3ffebc6a
 8003b00:	4bc6a7f0 	.word	0x4bc6a7f0
 8003b04:	3fed8937 	.word	0x3fed8937
 8003b08:	20000d50 	.word	0x20000d50
 8003b0c:	40020800 	.word	0x40020800
 8003b10:	200000dc 	.word	0x200000dc
 8003b14:	20000c18 	.word	0x20000c18
 8003b18:	20000d58 	.word	0x20000d58
 8003b1c:	20000cd8 	.word	0x20000cd8
 8003b20:	20000ce0 	.word	0x20000ce0
 8003b24:	20000cd0 	.word	0x20000cd0
 8003b28:	20000cf0 	.word	0x20000cf0
 8003b2c:	20000cf8 	.word	0x20000cf8
 8003b30:	20000ce8 	.word	0x20000ce8
 8003b34:	20000cc0 	.word	0x20000cc0
 8003b38:	20000cc8 	.word	0x20000cc8
 8003b3c:	20000cb8 	.word	0x20000cb8
 8003b40:	20000d08 	.word	0x20000d08
 8003b44:	20000d10 	.word	0x20000d10
 8003b48:	20000d00 	.word	0x20000d00
 8003b4c:	20000d20 	.word	0x20000d20
 8003b50:	20000d28 	.word	0x20000d28
 8003b54:	20000d18 	.word	0x20000d18
 8003b58:	20000c38 	.word	0x20000c38
 8003b5c:	20000124 	.word	0x20000124
 8003b60:	20000d60 	.word	0x20000d60
 8003b64:	20000d62 	.word	0x20000d62
 8003b68:	404e0000 	.word	0x404e0000
 8003b6c:	40590000 	.word	0x40590000
 8003b70:	40af4000 	.word	0x40af4000
 8003b74:	20000d70 	.word	0x20000d70
 8003b78:	20000d68 	.word	0x20000d68
 8003b7c:	20000d78 	.word	0x20000d78
 8003b80:	20000c68 	.word	0x20000c68
 8003b84:	20000c88 	.word	0x20000c88
 8003b88:	20000c28 	.word	0x20000c28
 8003b8c:	20000d98 	.word	0x20000d98
 8003b90:	20000d88 	.word	0x20000d88
 8003b94:	20000d90 	.word	0x20000d90
 8003b98:	f7fc fcda 	bl	8000550 <__aeabi_dmul>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	4640      	mov	r0, r8
 8003ba2:	4649      	mov	r1, r9
 8003ba4:	f7fc fb1c 	bl	80001e0 <__aeabi_dsub>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	460b      	mov	r3, r1
 8003bac:	49b4      	ldr	r1, [pc, #720]	; (8003e80 <_Z4_runv+0xb60>)
 8003bae:	e9c1 2300 	strd	r2, r3, [r1]
	em21 = y21.data - ym21;
 8003bb2:	4bb4      	ldr	r3, [pc, #720]	; (8003e84 <_Z4_runv+0xb64>)
 8003bb4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003bb8:	4bb1      	ldr	r3, [pc, #708]	; (8003e80 <_Z4_runv+0xb60>)
 8003bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bbe:	f7fc fb0f 	bl	80001e0 <__aeabi_dsub>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	49b0      	ldr	r1, [pc, #704]	; (8003e88 <_Z4_runv+0xb68>)
 8003bc8:	e9c1 2300 	strd	r2, r3, [r1]
	delkp21 = 1.921*delkp22 - 0.923*delkp23 + 0.07685*ec22 - 0.07685*ec23;
 8003bcc:	4baf      	ldr	r3, [pc, #700]	; (8003e8c <_Z4_runv+0xb6c>)
 8003bce:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003bd2:	a39d      	add	r3, pc, #628	; (adr r3, 8003e48 <_Z4_runv+0xb28>)
 8003bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd8:	f7fc fcba 	bl	8000550 <__aeabi_dmul>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	460b      	mov	r3, r1
 8003be0:	4690      	mov	r8, r2
 8003be2:	4699      	mov	r9, r3
 8003be4:	4baa      	ldr	r3, [pc, #680]	; (8003e90 <_Z4_runv+0xb70>)
 8003be6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003bea:	a399      	add	r3, pc, #612	; (adr r3, 8003e50 <_Z4_runv+0xb30>)
 8003bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf0:	f7fc fcae 	bl	8000550 <__aeabi_dmul>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	4640      	mov	r0, r8
 8003bfa:	4649      	mov	r1, r9
 8003bfc:	f7fc faf0 	bl	80001e0 <__aeabi_dsub>
 8003c00:	4602      	mov	r2, r0
 8003c02:	460b      	mov	r3, r1
 8003c04:	4690      	mov	r8, r2
 8003c06:	4699      	mov	r9, r3
 8003c08:	4ba2      	ldr	r3, [pc, #648]	; (8003e94 <_Z4_runv+0xb74>)
 8003c0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c0e:	a392      	add	r3, pc, #584	; (adr r3, 8003e58 <_Z4_runv+0xb38>)
 8003c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c14:	f7fc fc9c 	bl	8000550 <__aeabi_dmul>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	4640      	mov	r0, r8
 8003c1e:	4649      	mov	r1, r9
 8003c20:	f7fc fae0 	bl	80001e4 <__adddf3>
 8003c24:	4602      	mov	r2, r0
 8003c26:	460b      	mov	r3, r1
 8003c28:	4690      	mov	r8, r2
 8003c2a:	4699      	mov	r9, r3
 8003c2c:	4b9a      	ldr	r3, [pc, #616]	; (8003e98 <_Z4_runv+0xb78>)
 8003c2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c32:	a389      	add	r3, pc, #548	; (adr r3, 8003e58 <_Z4_runv+0xb38>)
 8003c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c38:	f7fc fc8a 	bl	8000550 <__aeabi_dmul>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	460b      	mov	r3, r1
 8003c40:	4640      	mov	r0, r8
 8003c42:	4649      	mov	r1, r9
 8003c44:	f7fc facc 	bl	80001e0 <__aeabi_dsub>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	4993      	ldr	r1, [pc, #588]	; (8003e9c <_Z4_runv+0xb7c>)
 8003c4e:	e9c1 2300 	strd	r2, r3, [r1]
	Kp2 += -gammap2*em21*delkp21;
 8003c52:	4b8d      	ldr	r3, [pc, #564]	; (8003e88 <_Z4_runv+0xb68>)
 8003c54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c58:	a381      	add	r3, pc, #516	; (adr r3, 8003e60 <_Z4_runv+0xb40>)
 8003c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c5e:	f7fc fc77 	bl	8000550 <__aeabi_dmul>
 8003c62:	4602      	mov	r2, r0
 8003c64:	460b      	mov	r3, r1
 8003c66:	4610      	mov	r0, r2
 8003c68:	4619      	mov	r1, r3
 8003c6a:	4b8c      	ldr	r3, [pc, #560]	; (8003e9c <_Z4_runv+0xb7c>)
 8003c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c70:	f7fc fc6e 	bl	8000550 <__aeabi_dmul>
 8003c74:	4602      	mov	r2, r0
 8003c76:	460b      	mov	r3, r1
 8003c78:	4610      	mov	r0, r2
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	4b88      	ldr	r3, [pc, #544]	; (8003ea0 <_Z4_runv+0xb80>)
 8003c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c82:	f7fc faaf 	bl	80001e4 <__adddf3>
 8003c86:	4602      	mov	r2, r0
 8003c88:	460b      	mov	r3, r1
 8003c8a:	4985      	ldr	r1, [pc, #532]	; (8003ea0 <_Z4_runv+0xb80>)
 8003c8c:	e9c1 2300 	strd	r2, r3, [r1]
	delki21 = 1.921*delki22 - 0.923*delki23 + 0.00039*ec22 + 0.00025*ec23;
 8003c90:	4b84      	ldr	r3, [pc, #528]	; (8003ea4 <_Z4_runv+0xb84>)
 8003c92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c96:	a36c      	add	r3, pc, #432	; (adr r3, 8003e48 <_Z4_runv+0xb28>)
 8003c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c9c:	f7fc fc58 	bl	8000550 <__aeabi_dmul>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	4690      	mov	r8, r2
 8003ca6:	4699      	mov	r9, r3
 8003ca8:	4b7f      	ldr	r3, [pc, #508]	; (8003ea8 <_Z4_runv+0xb88>)
 8003caa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003cae:	a368      	add	r3, pc, #416	; (adr r3, 8003e50 <_Z4_runv+0xb30>)
 8003cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb4:	f7fc fc4c 	bl	8000550 <__aeabi_dmul>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	460b      	mov	r3, r1
 8003cbc:	4640      	mov	r0, r8
 8003cbe:	4649      	mov	r1, r9
 8003cc0:	f7fc fa8e 	bl	80001e0 <__aeabi_dsub>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	4690      	mov	r8, r2
 8003cca:	4699      	mov	r9, r3
 8003ccc:	4b71      	ldr	r3, [pc, #452]	; (8003e94 <_Z4_runv+0xb74>)
 8003cce:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003cd2:	a365      	add	r3, pc, #404	; (adr r3, 8003e68 <_Z4_runv+0xb48>)
 8003cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd8:	f7fc fc3a 	bl	8000550 <__aeabi_dmul>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	460b      	mov	r3, r1
 8003ce0:	4640      	mov	r0, r8
 8003ce2:	4649      	mov	r1, r9
 8003ce4:	f7fc fa7e 	bl	80001e4 <__adddf3>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	460b      	mov	r3, r1
 8003cec:	4690      	mov	r8, r2
 8003cee:	4699      	mov	r9, r3
 8003cf0:	4b69      	ldr	r3, [pc, #420]	; (8003e98 <_Z4_runv+0xb78>)
 8003cf2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003cf6:	a35e      	add	r3, pc, #376	; (adr r3, 8003e70 <_Z4_runv+0xb50>)
 8003cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfc:	f7fc fc28 	bl	8000550 <__aeabi_dmul>
 8003d00:	4602      	mov	r2, r0
 8003d02:	460b      	mov	r3, r1
 8003d04:	4640      	mov	r0, r8
 8003d06:	4649      	mov	r1, r9
 8003d08:	f7fc fa6c 	bl	80001e4 <__adddf3>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	460b      	mov	r3, r1
 8003d10:	4966      	ldr	r1, [pc, #408]	; (8003eac <_Z4_runv+0xb8c>)
 8003d12:	e9c1 2300 	strd	r2, r3, [r1]
	Ki2 += -gammai2*em21*delki21;
 8003d16:	4b5c      	ldr	r3, [pc, #368]	; (8003e88 <_Z4_runv+0xb68>)
 8003d18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d1c:	a350      	add	r3, pc, #320	; (adr r3, 8003e60 <_Z4_runv+0xb40>)
 8003d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d22:	f7fc fc15 	bl	8000550 <__aeabi_dmul>
 8003d26:	4602      	mov	r2, r0
 8003d28:	460b      	mov	r3, r1
 8003d2a:	4610      	mov	r0, r2
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	4b5f      	ldr	r3, [pc, #380]	; (8003eac <_Z4_runv+0xb8c>)
 8003d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d34:	f7fc fc0c 	bl	8000550 <__aeabi_dmul>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	4610      	mov	r0, r2
 8003d3e:	4619      	mov	r1, r3
 8003d40:	4b5b      	ldr	r3, [pc, #364]	; (8003eb0 <_Z4_runv+0xb90>)
 8003d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d46:	f7fc fa4d 	bl	80001e4 <__adddf3>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	4958      	ldr	r1, [pc, #352]	; (8003eb0 <_Z4_runv+0xb90>)
 8003d50:	e9c1 2300 	strd	r2, r3, [r1]

	alpha2 = Kp2*(ec21 - ec22);
 8003d54:	4b57      	ldr	r3, [pc, #348]	; (8003eb4 <_Z4_runv+0xb94>)
 8003d56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d5a:	4b4e      	ldr	r3, [pc, #312]	; (8003e94 <_Z4_runv+0xb74>)
 8003d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d60:	f7fc fa3e 	bl	80001e0 <__aeabi_dsub>
 8003d64:	4602      	mov	r2, r0
 8003d66:	460b      	mov	r3, r1
 8003d68:	4610      	mov	r0, r2
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	4b4c      	ldr	r3, [pc, #304]	; (8003ea0 <_Z4_runv+0xb80>)
 8003d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d72:	f7fc fbed 	bl	8000550 <__aeabi_dmul>
 8003d76:	4602      	mov	r2, r0
 8003d78:	460b      	mov	r3, r1
 8003d7a:	494f      	ldr	r1, [pc, #316]	; (8003eb8 <_Z4_runv+0xb98>)
 8003d7c:	e9c1 2300 	strd	r2, r3, [r1]
	beta2 = T/2*Ki2*(ec21 + ec22);
 8003d80:	4b4b      	ldr	r3, [pc, #300]	; (8003eb0 <_Z4_runv+0xb90>)
 8003d82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d86:	a33c      	add	r3, pc, #240	; (adr r3, 8003e78 <_Z4_runv+0xb58>)
 8003d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d8c:	f7fc fbe0 	bl	8000550 <__aeabi_dmul>
 8003d90:	4602      	mov	r2, r0
 8003d92:	460b      	mov	r3, r1
 8003d94:	4690      	mov	r8, r2
 8003d96:	4699      	mov	r9, r3
 8003d98:	4b46      	ldr	r3, [pc, #280]	; (8003eb4 <_Z4_runv+0xb94>)
 8003d9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d9e:	4b3d      	ldr	r3, [pc, #244]	; (8003e94 <_Z4_runv+0xb74>)
 8003da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da4:	f7fc fa1e 	bl	80001e4 <__adddf3>
 8003da8:	4602      	mov	r2, r0
 8003daa:	460b      	mov	r3, r1
 8003dac:	4640      	mov	r0, r8
 8003dae:	4649      	mov	r1, r9
 8003db0:	f7fc fbce 	bl	8000550 <__aeabi_dmul>
 8003db4:	4602      	mov	r2, r0
 8003db6:	460b      	mov	r3, r1
 8003db8:	4940      	ldr	r1, [pc, #256]	; (8003ebc <_Z4_runv+0xb9c>)
 8003dba:	e9c1 2300 	strd	r2, r3, [r1]
	u21 = u22 + alpha2 + beta2;
 8003dbe:	4b40      	ldr	r3, [pc, #256]	; (8003ec0 <_Z4_runv+0xba0>)
 8003dc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003dc4:	4b3c      	ldr	r3, [pc, #240]	; (8003eb8 <_Z4_runv+0xb98>)
 8003dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dca:	f7fc fa0b 	bl	80001e4 <__adddf3>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	4610      	mov	r0, r2
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	4b39      	ldr	r3, [pc, #228]	; (8003ebc <_Z4_runv+0xb9c>)
 8003dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ddc:	f7fc fa02 	bl	80001e4 <__adddf3>
 8003de0:	4602      	mov	r2, r0
 8003de2:	460b      	mov	r3, r1
 8003de4:	4937      	ldr	r1, [pc, #220]	; (8003ec4 <_Z4_runv+0xba4>)
 8003de6:	e9c1 2300 	strd	r2, r3, [r1]

	if(u21 < 0)
 8003dea:	4b36      	ldr	r3, [pc, #216]	; (8003ec4 <_Z4_runv+0xba4>)
 8003dec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003df0:	f04f 0200 	mov.w	r2, #0
 8003df4:	f04f 0300 	mov.w	r3, #0
 8003df8:	f7fc fe1c 	bl	8000a34 <__aeabi_dcmplt>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d066      	beq.n	8003ed0 <_Z4_runv+0xbb0>
	{
		if(u21 < 0){
 8003e02:	4b30      	ldr	r3, [pc, #192]	; (8003ec4 <_Z4_runv+0xba4>)
 8003e04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e08:	f04f 0200 	mov.w	r2, #0
 8003e0c:	f04f 0300 	mov.w	r3, #0
 8003e10:	f7fc fe10 	bl	8000a34 <__aeabi_dcmplt>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d077      	beq.n	8003f0a <_Z4_runv+0xbea>
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_15,GPIO_PIN_SET);
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e20:	4829      	ldr	r0, [pc, #164]	; (8003ec8 <_Z4_runv+0xba8>)
 8003e22:	f002 f9d3 	bl	80061cc <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, -u21);
 8003e26:	4b27      	ldr	r3, [pc, #156]	; (8003ec4 <_Z4_runv+0xba4>)
 8003e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e2c:	4614      	mov	r4, r2
 8003e2e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003e32:	4b26      	ldr	r3, [pc, #152]	; (8003ecc <_Z4_runv+0xbac>)
 8003e34:	681e      	ldr	r6, [r3, #0]
 8003e36:	4620      	mov	r0, r4
 8003e38:	4629      	mov	r1, r5
 8003e3a:	f7fc fe23 	bl	8000a84 <__aeabi_d2uiz>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	63b3      	str	r3, [r6, #56]	; 0x38
 8003e42:	e062      	b.n	8003f0a <_Z4_runv+0xbea>
 8003e44:	f3af 8000 	nop.w
 8003e48:	7ef9db23 	.word	0x7ef9db23
 8003e4c:	3ffebc6a 	.word	0x3ffebc6a
 8003e50:	4bc6a7f0 	.word	0x4bc6a7f0
 8003e54:	3fed8937 	.word	0x3fed8937
 8003e58:	0cb295ea 	.word	0x0cb295ea
 8003e5c:	3fb3ac71 	.word	0x3fb3ac71
 8003e60:	eb1c432d 	.word	0xeb1c432d
 8003e64:	bf0a36e2 	.word	0xbf0a36e2
 8003e68:	3ed527e5 	.word	0x3ed527e5
 8003e6c:	3f398f1d 	.word	0x3f398f1d
 8003e70:	d2f1a9fc 	.word	0xd2f1a9fc
 8003e74:	3f30624d 	.word	0x3f30624d
 8003e78:	47ae147b 	.word	0x47ae147b
 8003e7c:	3f747ae1 	.word	0x3f747ae1
 8003e80:	20000d80 	.word	0x20000d80
 8003e84:	20000c68 	.word	0x20000c68
 8003e88:	20000db0 	.word	0x20000db0
 8003e8c:	20000dd0 	.word	0x20000dd0
 8003e90:	20000dd8 	.word	0x20000dd8
 8003e94:	20000da0 	.word	0x20000da0
 8003e98:	20000da8 	.word	0x20000da8
 8003e9c:	20000dc8 	.word	0x20000dc8
 8003ea0:	20000df8 	.word	0x20000df8
 8003ea4:	20000de8 	.word	0x20000de8
 8003ea8:	20000df0 	.word	0x20000df0
 8003eac:	20000de0 	.word	0x20000de0
 8003eb0:	20000e00 	.word	0x20000e00
 8003eb4:	20000d98 	.word	0x20000d98
 8003eb8:	20000e08 	.word	0x20000e08
 8003ebc:	20000e10 	.word	0x20000e10
 8003ec0:	20000e20 	.word	0x20000e20
 8003ec4:	20000e18 	.word	0x20000e18
 8003ec8:	40020800 	.word	0x40020800
 8003ecc:	200000dc 	.word	0x200000dc
		}
	}
	else
	{
		if(u21 >= 0){
 8003ed0:	4b3d      	ldr	r3, [pc, #244]	; (8003fc8 <_Z4_runv+0xca8>)
 8003ed2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ed6:	f04f 0200 	mov.w	r2, #0
 8003eda:	f04f 0300 	mov.w	r3, #0
 8003ede:	f7fc fdbd 	bl	8000a5c <__aeabi_dcmpge>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d010      	beq.n	8003f0a <_Z4_runv+0xbea>
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_15,GPIO_PIN_RESET);
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003eee:	4837      	ldr	r0, [pc, #220]	; (8003fcc <_Z4_runv+0xcac>)
 8003ef0:	f002 f96c 	bl	80061cc <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, u21);
 8003ef4:	4b34      	ldr	r3, [pc, #208]	; (8003fc8 <_Z4_runv+0xca8>)
 8003ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003efa:	4935      	ldr	r1, [pc, #212]	; (8003fd0 <_Z4_runv+0xcb0>)
 8003efc:	680c      	ldr	r4, [r1, #0]
 8003efe:	4610      	mov	r0, r2
 8003f00:	4619      	mov	r1, r3
 8003f02:	f7fc fdbf 	bl	8000a84 <__aeabi_d2uiz>
 8003f06:	4603      	mov	r3, r0
 8003f08:	63a3      	str	r3, [r4, #56]	; 0x38
		}
	}

	if(set2_ang.data == 0) u21 = 0;
 8003f0a:	4b32      	ldr	r3, [pc, #200]	; (8003fd4 <_Z4_runv+0xcb4>)
 8003f0c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003f10:	f04f 0200 	mov.w	r2, #0
 8003f14:	f04f 0300 	mov.w	r3, #0
 8003f18:	f7fc fd82 	bl	8000a20 <__aeabi_dcmpeq>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d006      	beq.n	8003f30 <_Z4_runv+0xc10>
 8003f22:	4929      	ldr	r1, [pc, #164]	; (8003fc8 <_Z4_runv+0xca8>)
 8003f24:	f04f 0200 	mov.w	r2, #0
 8003f28:	f04f 0300 	mov.w	r3, #0
 8003f2c:	e9c1 2300 	strd	r2, r3, [r1]
	u22 = u21;
 8003f30:	4b25      	ldr	r3, [pc, #148]	; (8003fc8 <_Z4_runv+0xca8>)
 8003f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f36:	4928      	ldr	r1, [pc, #160]	; (8003fd8 <_Z4_runv+0xcb8>)
 8003f38:	e9c1 2300 	strd	r2, r3, [r1]
	ec23 = ec22; ec22 = ec21; em23 = em22; em22 = em21;	ym23 = ym22; ym22 = ym21;
 8003f3c:	4b27      	ldr	r3, [pc, #156]	; (8003fdc <_Z4_runv+0xcbc>)
 8003f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f42:	4927      	ldr	r1, [pc, #156]	; (8003fe0 <_Z4_runv+0xcc0>)
 8003f44:	e9c1 2300 	strd	r2, r3, [r1]
 8003f48:	4b26      	ldr	r3, [pc, #152]	; (8003fe4 <_Z4_runv+0xcc4>)
 8003f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f4e:	4923      	ldr	r1, [pc, #140]	; (8003fdc <_Z4_runv+0xcbc>)
 8003f50:	e9c1 2300 	strd	r2, r3, [r1]
 8003f54:	4b24      	ldr	r3, [pc, #144]	; (8003fe8 <_Z4_runv+0xcc8>)
 8003f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f5a:	4924      	ldr	r1, [pc, #144]	; (8003fec <_Z4_runv+0xccc>)
 8003f5c:	e9c1 2300 	strd	r2, r3, [r1]
 8003f60:	4b23      	ldr	r3, [pc, #140]	; (8003ff0 <_Z4_runv+0xcd0>)
 8003f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f66:	4920      	ldr	r1, [pc, #128]	; (8003fe8 <_Z4_runv+0xcc8>)
 8003f68:	e9c1 2300 	strd	r2, r3, [r1]
 8003f6c:	4b21      	ldr	r3, [pc, #132]	; (8003ff4 <_Z4_runv+0xcd4>)
 8003f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f72:	4921      	ldr	r1, [pc, #132]	; (8003ff8 <_Z4_runv+0xcd8>)
 8003f74:	e9c1 2300 	strd	r2, r3, [r1]
 8003f78:	4b20      	ldr	r3, [pc, #128]	; (8003ffc <_Z4_runv+0xcdc>)
 8003f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7e:	491d      	ldr	r1, [pc, #116]	; (8003ff4 <_Z4_runv+0xcd4>)
 8003f80:	e9c1 2300 	strd	r2, r3, [r1]
	delkp23 = delkp22; delkp22 = delkp21; delki23 = delki22; delki22 = delki21;
 8003f84:	4b1e      	ldr	r3, [pc, #120]	; (8004000 <_Z4_runv+0xce0>)
 8003f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8a:	491e      	ldr	r1, [pc, #120]	; (8004004 <_Z4_runv+0xce4>)
 8003f8c:	e9c1 2300 	strd	r2, r3, [r1]
 8003f90:	4b1d      	ldr	r3, [pc, #116]	; (8004008 <_Z4_runv+0xce8>)
 8003f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f96:	491a      	ldr	r1, [pc, #104]	; (8004000 <_Z4_runv+0xce0>)
 8003f98:	e9c1 2300 	strd	r2, r3, [r1]
 8003f9c:	4b1b      	ldr	r3, [pc, #108]	; (800400c <_Z4_runv+0xcec>)
 8003f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa2:	491b      	ldr	r1, [pc, #108]	; (8004010 <_Z4_runv+0xcf0>)
 8003fa4:	e9c1 2300 	strd	r2, r3, [r1]
 8003fa8:	4b1a      	ldr	r3, [pc, #104]	; (8004014 <_Z4_runv+0xcf4>)
 8003faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fae:	4917      	ldr	r1, [pc, #92]	; (800400c <_Z4_runv+0xcec>)
 8003fb0:	e9c1 2300 	strd	r2, r3, [r1]
	u21_s.data = u21;
 8003fb4:	4b04      	ldr	r3, [pc, #16]	; (8003fc8 <_Z4_runv+0xca8>)
 8003fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fba:	4917      	ldr	r1, [pc, #92]	; (8004018 <_Z4_runv+0xcf8>)
 8003fbc:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8003fc0:	bf00      	nop
 8003fc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fc6:	bf00      	nop
 8003fc8:	20000e18 	.word	0x20000e18
 8003fcc:	40020800 	.word	0x40020800
 8003fd0:	200000dc 	.word	0x200000dc
 8003fd4:	20000c28 	.word	0x20000c28
 8003fd8:	20000e20 	.word	0x20000e20
 8003fdc:	20000da0 	.word	0x20000da0
 8003fe0:	20000da8 	.word	0x20000da8
 8003fe4:	20000d98 	.word	0x20000d98
 8003fe8:	20000db8 	.word	0x20000db8
 8003fec:	20000dc0 	.word	0x20000dc0
 8003ff0:	20000db0 	.word	0x20000db0
 8003ff4:	20000d88 	.word	0x20000d88
 8003ff8:	20000d90 	.word	0x20000d90
 8003ffc:	20000d80 	.word	0x20000d80
 8004000:	20000dd0 	.word	0x20000dd0
 8004004:	20000dd8 	.word	0x20000dd8
 8004008:	20000dc8 	.word	0x20000dc8
 800400c:	20000de8 	.word	0x20000de8
 8004010:	20000df0 	.word	0x20000df0
 8004014:	20000de0 	.word	0x20000de0
 8004018:	20000c48 	.word	0x20000c48
 800401c:	00000000 	.word	0x00000000

08004020 <_Z12_get_cmd_velRKN13geometry_msgs5TwistE>:
/*
*/
void _get_cmd_vel(const geometry_msgs::Twist& msg)
{
 8004020:	b5b0      	push	{r4, r5, r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
	set1_lin.data = msg.linear.x - msg.angular.z*L/2;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8004034:	a330      	add	r3, pc, #192	; (adr r3, 80040f8 <_Z12_get_cmd_velRKN13geometry_msgs5TwistE+0xd8>)
 8004036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403a:	f7fc fa89 	bl	8000550 <__aeabi_dmul>
 800403e:	4602      	mov	r2, r0
 8004040:	460b      	mov	r3, r1
 8004042:	4610      	mov	r0, r2
 8004044:	4619      	mov	r1, r3
 8004046:	f04f 0200 	mov.w	r2, #0
 800404a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800404e:	f7fc fba9 	bl	80007a4 <__aeabi_ddiv>
 8004052:	4602      	mov	r2, r0
 8004054:	460b      	mov	r3, r1
 8004056:	4620      	mov	r0, r4
 8004058:	4629      	mov	r1, r5
 800405a:	f7fc f8c1 	bl	80001e0 <__aeabi_dsub>
 800405e:	4602      	mov	r2, r0
 8004060:	460b      	mov	r3, r1
 8004062:	4929      	ldr	r1, [pc, #164]	; (8004108 <_Z12_get_cmd_velRKN13geometry_msgs5TwistE+0xe8>)
 8004064:	e9c1 2302 	strd	r2, r3, [r1, #8]
	set2_lin.data = msg.linear.x + msg.angular.z*L/2;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8004074:	a320      	add	r3, pc, #128	; (adr r3, 80040f8 <_Z12_get_cmd_velRKN13geometry_msgs5TwistE+0xd8>)
 8004076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800407a:	f7fc fa69 	bl	8000550 <__aeabi_dmul>
 800407e:	4602      	mov	r2, r0
 8004080:	460b      	mov	r3, r1
 8004082:	4610      	mov	r0, r2
 8004084:	4619      	mov	r1, r3
 8004086:	f04f 0200 	mov.w	r2, #0
 800408a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800408e:	f7fc fb89 	bl	80007a4 <__aeabi_ddiv>
 8004092:	4602      	mov	r2, r0
 8004094:	460b      	mov	r3, r1
 8004096:	4620      	mov	r0, r4
 8004098:	4629      	mov	r1, r5
 800409a:	f7fc f8a3 	bl	80001e4 <__adddf3>
 800409e:	4602      	mov	r2, r0
 80040a0:	460b      	mov	r3, r1
 80040a2:	491a      	ldr	r1, [pc, #104]	; (800410c <_Z12_get_cmd_velRKN13geometry_msgs5TwistE+0xec>)
 80040a4:	e9c1 2302 	strd	r2, r3, [r1, #8]
	set1_ang.data = mps_to_rpm(set1_lin.data,R);
 80040a8:	4b17      	ldr	r3, [pc, #92]	; (8004108 <_Z12_get_cmd_velRKN13geometry_msgs5TwistE+0xe8>)
 80040aa:	ed93 7b02 	vldr	d7, [r3, #8]
 80040ae:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8004100 <_Z12_get_cmd_velRKN13geometry_msgs5TwistE+0xe0>
 80040b2:	eeb0 0a47 	vmov.f32	s0, s14
 80040b6:	eef0 0a67 	vmov.f32	s1, s15
 80040ba:	f7ff f8fd 	bl	80032b8 <_Z10mps_to_rpmdd>
 80040be:	eeb0 7a40 	vmov.f32	s14, s0
 80040c2:	eef0 7a60 	vmov.f32	s15, s1
 80040c6:	4b12      	ldr	r3, [pc, #72]	; (8004110 <_Z12_get_cmd_velRKN13geometry_msgs5TwistE+0xf0>)
 80040c8:	ed83 7b02 	vstr	d7, [r3, #8]
	set2_ang.data = mps_to_rpm(set2_lin.data,R);
 80040cc:	4b0f      	ldr	r3, [pc, #60]	; (800410c <_Z12_get_cmd_velRKN13geometry_msgs5TwistE+0xec>)
 80040ce:	ed93 7b02 	vldr	d7, [r3, #8]
 80040d2:	ed9f 1b0b 	vldr	d1, [pc, #44]	; 8004100 <_Z12_get_cmd_velRKN13geometry_msgs5TwistE+0xe0>
 80040d6:	eeb0 0a47 	vmov.f32	s0, s14
 80040da:	eef0 0a67 	vmov.f32	s1, s15
 80040de:	f7ff f8eb 	bl	80032b8 <_Z10mps_to_rpmdd>
 80040e2:	eeb0 7a40 	vmov.f32	s14, s0
 80040e6:	eef0 7a60 	vmov.f32	s15, s1
 80040ea:	4b0a      	ldr	r3, [pc, #40]	; (8004114 <_Z12_get_cmd_velRKN13geometry_msgs5TwistE+0xf4>)
 80040ec:	ed83 7b02 	vstr	d7, [r3, #8]
}
 80040f0:	bf00      	nop
 80040f2:	3708      	adds	r7, #8
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bdb0      	pop	{r4, r5, r7, pc}
 80040f8:	3d70a3d7 	.word	0x3d70a3d7
 80040fc:	3fe7d70a 	.word	0x3fe7d70a
 8004100:	cccccccd 	.word	0xcccccccd
 8004104:	3fc4cccc 	.word	0x3fc4cccc
 8004108:	20000bf8 	.word	0x20000bf8
 800410c:	20000c08 	.word	0x20000c08
 8004110:	20000c18 	.word	0x20000c18
 8004114:	20000c28 	.word	0x20000c28

08004118 <_Z10ex_cmd_velv>:

void ex_cmd_vel(void)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	af00      	add	r7, sp, #0
	vel_pub.linear.x = (y21_lin.data + y11_lin.data)/2;
 800411c:	4b1a      	ldr	r3, [pc, #104]	; (8004188 <_Z10ex_cmd_velv+0x70>)
 800411e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004122:	4b1a      	ldr	r3, [pc, #104]	; (800418c <_Z10ex_cmd_velv+0x74>)
 8004124:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004128:	f7fc f85c 	bl	80001e4 <__adddf3>
 800412c:	4602      	mov	r2, r0
 800412e:	460b      	mov	r3, r1
 8004130:	4610      	mov	r0, r2
 8004132:	4619      	mov	r1, r3
 8004134:	f04f 0200 	mov.w	r2, #0
 8004138:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800413c:	f7fc fb32 	bl	80007a4 <__aeabi_ddiv>
 8004140:	4602      	mov	r2, r0
 8004142:	460b      	mov	r3, r1
 8004144:	4912      	ldr	r1, [pc, #72]	; (8004190 <_Z10ex_cmd_velv+0x78>)
 8004146:	e9c1 2304 	strd	r2, r3, [r1, #16]
	vel_pub.angular.z = (y21_lin.data - y11_lin.data)/L;
 800414a:	4b0f      	ldr	r3, [pc, #60]	; (8004188 <_Z10ex_cmd_velv+0x70>)
 800414c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004150:	4b0e      	ldr	r3, [pc, #56]	; (800418c <_Z10ex_cmd_velv+0x74>)
 8004152:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004156:	f7fc f843 	bl	80001e0 <__aeabi_dsub>
 800415a:	4602      	mov	r2, r0
 800415c:	460b      	mov	r3, r1
 800415e:	4610      	mov	r0, r2
 8004160:	4619      	mov	r1, r3
 8004162:	a307      	add	r3, pc, #28	; (adr r3, 8004180 <_Z10ex_cmd_velv+0x68>)
 8004164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004168:	f7fc fb1c 	bl	80007a4 <__aeabi_ddiv>
 800416c:	4602      	mov	r2, r0
 800416e:	460b      	mov	r3, r1
 8004170:	4907      	ldr	r1, [pc, #28]	; (8004190 <_Z10ex_cmd_velv+0x78>)
 8004172:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 8004176:	bf00      	nop
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	f3af 8000 	nop.w
 8004180:	3d70a3d7 	.word	0x3d70a3d7
 8004184:	3fe7d70a 	.word	0x3fe7d70a
 8004188:	20000c88 	.word	0x20000c88
 800418c:	20000c78 	.word	0x20000c78
 8004190:	20000bb0 	.word	0x20000bb0

08004194 <HAL_UART_TxCpltCallback>:

//std_msgs::String str_msg;
//ros::Publisher chatter("chatter", &str_msg);
//char hello[] = "Hello world from STM32!";

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a06      	ldr	r2, [pc, #24]	; (80041bc <HAL_UART_TxCpltCallback+0x28>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d106      	bne.n	80041b4 <HAL_UART_TxCpltCallback+0x20>
		nh.getHardware()->flush();
 80041a6:	4806      	ldr	r0, [pc, #24]	; (80041c0 <HAL_UART_TxCpltCallback+0x2c>)
 80041a8:	f000 f8e0 	bl	800436c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80041ac:	4603      	mov	r3, r0
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7fd ffb4 	bl	800211c <_ZN13STM32Hardware5flushEv>
}
 80041b4:	bf00      	nop
 80041b6:	3708      	adds	r7, #8
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	40004400 	.word	0x40004400
 80041c0:	20000274 	.word	0x20000274

080041c4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a06      	ldr	r2, [pc, #24]	; (80041ec <HAL_UART_RxCpltCallback+0x28>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d106      	bne.n	80041e4 <HAL_UART_RxCpltCallback+0x20>
		nh.getHardware()->reset_rbuf();
 80041d6:	4806      	ldr	r0, [pc, #24]	; (80041f0 <HAL_UART_RxCpltCallback+0x2c>)
 80041d8:	f000 f8c8 	bl	800436c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80041dc:	4603      	mov	r3, r0
 80041de:	4618      	mov	r0, r3
 80041e0:	f7fd ff5d 	bl	800209e <_ZN13STM32Hardware10reset_rbufEv>
}
 80041e4:	bf00      	nop
 80041e6:	3708      	adds	r7, #8
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	40004400 	.word	0x40004400
 80041f0:	20000274 	.word	0x20000274

080041f4 <setup>:

void setup(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
  nh.initNode();
 80041f8:	480e      	ldr	r0, [pc, #56]	; (8004234 <setup+0x40>)
 80041fa:	f000 f8c3 	bl	8004384 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.subscribe(sub_cmd_vel);
 80041fe:	490e      	ldr	r1, [pc, #56]	; (8004238 <setup+0x44>)
 8004200:	480c      	ldr	r0, [pc, #48]	; (8004234 <setup+0x40>)
 8004202:	f000 f8dc 	bl	80043be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
//  nh.advertise(left_set_pub);
//  nh.advertise(right_set_pub);
//  nh.advertise(left_pub);
//  nh.advertise(right_pub);
    nh.advertise(pub);
 8004206:	490d      	ldr	r1, [pc, #52]	; (800423c <setup+0x48>)
 8004208:	480a      	ldr	r0, [pc, #40]	; (8004234 <setup+0x40>)
 800420a:	f000 f903 	bl	8004414 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>

//  nh.advertise(u11_pub);
//  nh.advertise(u21_pub);
//  nh.advertise(chatter);
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 800420e:	2100      	movs	r1, #0
 8004210:	480b      	ldr	r0, [pc, #44]	; (8004240 <setup+0x4c>)
 8004212:	f002 fcdd 	bl	8006bd0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
 8004216:	2104      	movs	r1, #4
 8004218:	4809      	ldr	r0, [pc, #36]	; (8004240 <setup+0x4c>)
 800421a:	f002 fcd9 	bl	8006bd0 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_1|TIM_CHANNEL_2);
 800421e:	2104      	movs	r1, #4
 8004220:	4808      	ldr	r0, [pc, #32]	; (8004244 <setup+0x50>)
 8004222:	f002 fe43 	bl	8006eac <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_1|TIM_CHANNEL_2);
 8004226:	2104      	movs	r1, #4
 8004228:	4807      	ldr	r0, [pc, #28]	; (8004248 <setup+0x54>)
 800422a:	f002 fe3f 	bl	8006eac <HAL_TIM_Encoder_Start>



}
 800422e:	bf00      	nop
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	20000274 	.word	0x20000274
 8004238:	20000e40 	.word	0x20000e40
 800423c:	20000e28 	.word	0x20000e28
 8004240:	200000dc 	.word	0x200000dc
 8004244:	20000124 	.word	0x20000124
 8004248:	20000094 	.word	0x20000094

0800424c <loop>:

void loop(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	af00      	add	r7, sp, #0
//
//  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
//  str_msg.data = hello;
//  chatter.publish(&str_msg);

  _run();
 8004250:	f7ff f866 	bl	8003320 <_Z4_runv>
  ex_cmd_vel();
 8004254:	f7ff ff60 	bl	8004118 <_Z10ex_cmd_velv>
//  left_set_pub.publish(&set1_lin);
//  right_set_pub.publish(&set2_lin);
//  left_pub.publish(&y11_lin);
//  right_pub.publish(&y21_lin);
  pub.publish(&vel_pub);
 8004258:	4905      	ldr	r1, [pc, #20]	; (8004270 <loop+0x24>)
 800425a:	4806      	ldr	r0, [pc, #24]	; (8004274 <loop+0x28>)
 800425c:	f7fd fec5 	bl	8001fea <_ZN3ros9Publisher7publishEPKNS_3MsgE>
//  u11_pub.publish(&u11_s);
//  u21_pub.publish(&u21_s);
  nh.spinOnce();
 8004260:	4805      	ldr	r0, [pc, #20]	; (8004278 <loop+0x2c>)
 8004262:	f000 f907 	bl	8004474 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>


  HAL_Delay(10);
 8004266:	200a      	movs	r0, #10
 8004268:	f001 f8dc 	bl	8005424 <HAL_Delay>
}
 800426c:	bf00      	nop
 800426e:	bd80      	pop	{r7, pc}
 8004270:	20000bb0 	.word	0x20000bb0
 8004274:	20000e28 	.word	0x20000e28
 8004278:	20000274 	.word	0x20000274

0800427c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8004286:	2300      	movs	r3, #0
 8004288:	60fb      	str	r3, [r7, #12]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2b03      	cmp	r3, #3
 800428e:	d80d      	bhi.n	80042ac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	00db      	lsls	r3, r3, #3
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	fa22 f103 	lsr.w	r1, r2, r3
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	4413      	add	r3, r2
 80042a0:	b2ca      	uxtb	r2, r1
 80042a2:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	3301      	adds	r3, #1
 80042a8:	60fb      	str	r3, [r7, #12]
 80042aa:	e7ee      	b.n	800428a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 80042ac:	bf00      	nop
 80042ae:	3714      	adds	r7, #20
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80042c8:	2300      	movs	r3, #0
 80042ca:	60fb      	str	r3, [r7, #12]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2b03      	cmp	r3, #3
 80042d0:	d811      	bhi.n	80042f6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	6839      	ldr	r1, [r7, #0]
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	440a      	add	r2, r1
 80042dc:	7812      	ldrb	r2, [r2, #0]
 80042de:	4611      	mov	r1, r2
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	00d2      	lsls	r2, r2, #3
 80042e4:	fa01 f202 	lsl.w	r2, r1, r2
 80042e8:	431a      	orrs	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	3301      	adds	r3, #1
 80042f2:	60fb      	str	r3, [r7, #12]
 80042f4:	e7ea      	b.n	80042cc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 80042f6:	bf00      	nop
 80042f8:	3714      	adds	r7, #20
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
	...

08004304 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	4a04      	ldr	r2, [pc, #16]	; (8004320 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	601a      	str	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4618      	mov	r0, r3
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr
 8004320:	08009120 	.word	0x08009120

08004324 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
 8004330:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	4618      	mov	r0, r3
 8004336:	f7ff ffe5 	bl	8004304 <_ZN3ros11Subscriber_C1Ev>
 800433a:	4a0b      	ldr	r2, [pc, #44]	; (8004368 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	601a      	str	r2, [r3, #0]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	3310      	adds	r3, #16
 8004344:	4618      	mov	r0, r3
 8004346:	f7fe fe6d 	bl	8003024 <_ZN13geometry_msgs5TwistC1Ev>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	659a      	str	r2, [r3, #88]	; 0x58
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	683a      	ldr	r2, [r7, #0]
 8004354:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	68ba      	ldr	r2, [r7, #8]
 800435a:	609a      	str	r2, [r3, #8]
  };
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	4618      	mov	r0, r3
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	080090ac 	.word	0x080090ac

0800436c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	3304      	adds	r3, #4
  }
 8004378:	4618      	mov	r0, r3
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	3304      	adds	r3, #4
 8004390:	4618      	mov	r0, r3
 8004392:	f7fd fe79 	bl	8002088 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 80043b6:	bf00      	nop
 80043b8:	3708      	adds	r7, #8
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:
    }
    return false;
  }

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 80043be:	b480      	push	{r7}
 80043c0:	b085      	sub	sp, #20
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
 80043c6:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80043c8:	2300      	movs	r3, #0
 80043ca:	60fb      	str	r3, [r7, #12]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2b18      	cmp	r3, #24
 80043d0:	dc19      	bgt.n	8004406 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	f202 2222 	addw	r2, r2, #546	; 0x222
 80043da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10d      	bne.n	80043fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x40>
      {
        subscribers[i] = &s;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	f202 2222 	addw	r2, r2, #546	; 0x222
 80043ea:	6839      	ldr	r1, [r7, #0]
 80043ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	605a      	str	r2, [r3, #4]
        return true;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e004      	b.n	8004408 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	3301      	adds	r3, #1
 8004402:	60fb      	str	r3, [r7, #12]
 8004404:	e7e2      	b.n	80043cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0xe>
      }
    }
    return false;
 8004406:	2300      	movs	r3, #0
  }
 8004408:	4618      	mov	r0, r3
 800440a:	3714      	adds	r7, #20
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800441e:	2300      	movs	r3, #0
 8004420:	60fb      	str	r3, [r7, #12]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2b18      	cmp	r3, #24
 8004426:	dc1e      	bgt.n	8004466 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	4413      	add	r3, r2
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d111      	bne.n	800445e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	4413      	add	r3, r2
 8004446:	683a      	ldr	r2, [r7, #0]
 8004448:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	60da      	str	r2, [r3, #12]
        return true;
 800445a:	2301      	movs	r3, #1
 800445c:	e004      	b.n	8004468 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	3301      	adds	r3, #1
 8004462:	60fb      	str	r3, [r7, #12]
 8004464:	e7dd      	b.n	8004422 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 8004466:	2300      	movs	r3, #0
  }
 8004468:	4618      	mov	r0, r3
 800446a:	3714      	adds	r7, #20
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	3304      	adds	r3, #4
 8004480:	4618      	mov	r0, r3
 8004482:	f7fd feef 	bl	8002264 <_ZN13STM32Hardware4timeEv>
 8004486:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8004496:	4293      	cmp	r3, r2
 8004498:	d903      	bls.n	80044a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d009      	beq.n	80044c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d903      	bls.n	80044c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d014      	beq.n	80044f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	3304      	adds	r3, #4
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7fd fec8 	bl	8002264 <_ZN13STM32Hardware4timeEv>
 80044d4:	4602      	mov	r2, r0
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	1ad2      	subs	r2, r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80044e0:	429a      	cmp	r2, r3
 80044e2:	bf8c      	ite	hi
 80044e4:	2301      	movhi	r3, #1
 80044e6:	2300      	movls	r3, #0
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d002      	beq.n	80044f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 80044ee:	f06f 0301 	mvn.w	r3, #1
 80044f2:	e194      	b.n	800481e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	3304      	adds	r3, #4
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7fd fde1 	bl	80020c0 <_ZN13STM32Hardware4readEv>
 80044fe:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	2b00      	cmp	r3, #0
 8004504:	f2c0 8174 	blt.w	80047f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	441a      	add	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800451e:	2b07      	cmp	r3, #7
 8004520:	d11e      	bne.n	8004560 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8004528:	1c59      	adds	r1, r3, #1
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8004530:	68ba      	ldr	r2, [r7, #8]
 8004532:	b2d1      	uxtb	r1, r2
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	4413      	add	r3, r2
 8004538:	460a      	mov	r2, r1
 800453a:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8004544:	1e5a      	subs	r2, r3, #1
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1b4      	bne.n	80044c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2208      	movs	r2, #8
 800455a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800455e:	e7af      	b.n	80044c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004566:	2b00      	cmp	r3, #0
 8004568:	d128      	bne.n	80045bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	2bff      	cmp	r3, #255	; 0xff
 800456e:	d10d      	bne.n	800458c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004576:	1c5a      	adds	r2, r3, #1
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f103 0214 	add.w	r2, r3, #20
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 800458a:	e799      	b.n	80044c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	3304      	adds	r3, #4
 8004590:	4618      	mov	r0, r3
 8004592:	f7fd fe67 	bl	8002264 <_ZN13STM32Hardware4timeEv>
 8004596:	4602      	mov	r2, r0
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a0:	4293      	cmp	r3, r2
 80045a2:	bf8c      	ite	hi
 80045a4:	2301      	movhi	r3, #1
 80045a6:	2300      	movls	r3, #0
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d088      	beq.n	80044c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 80045b6:	f06f 0301 	mvn.w	r3, #1
 80045ba:	e130      	b.n	800481e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d118      	bne.n	80045f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	2bfe      	cmp	r3, #254	; 0xfe
 80045ca:	d107      	bne.n	80045dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80045d2:	1c5a      	adds	r2, r3, #1
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80045da:	e771      	b.n	80044c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f47f af68 	bne.w	80044c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 f918 	bl	8004826 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 80045f6:	e763      	b.n	80044c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d113      	bne.n	800462a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004618:	1c5a      	adds	r2, r3, #1
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	68ba      	ldr	r2, [r7, #8]
 8004624:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8004628:	e74a      	b.n	80044c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004630:	2b03      	cmp	r3, #3
 8004632:	d110      	bne.n	8004656 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	021b      	lsls	r3, r3, #8
 800463e:	441a      	add	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800464c:	1c5a      	adds	r2, r3, #1
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8004654:	e734      	b.n	80044c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800465c:	2b04      	cmp	r3, #4
 800465e:	d116      	bne.n	800468e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8004666:	425a      	negs	r2, r3
 8004668:	b2db      	uxtb	r3, r3
 800466a:	b2d2      	uxtb	r2, r2
 800466c:	bf58      	it	pl
 800466e:	4253      	negpl	r3, r2
 8004670:	2bff      	cmp	r3, #255	; 0xff
 8004672:	d107      	bne.n	8004684 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800467a:	1c5a      	adds	r2, r3, #1
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8004682:	e71d      	b.n	80044c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800468c:	e718      	b.n	80044c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004694:	2b05      	cmp	r3, #5
 8004696:	d10f      	bne.n	80046b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80046a6:	1c5a      	adds	r2, r3, #1
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	68ba      	ldr	r2, [r7, #8]
 80046b2:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80046b6:	e703      	b.n	80044c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80046be:	2b06      	cmp	r3, #6
 80046c0:	d117      	bne.n	80046f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	021b      	lsls	r3, r3, #8
 80046cc:	441a      	add	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2207      	movs	r2, #7
 80046d8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f47f aeec 	bne.w	80044c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2208      	movs	r2, #8
 80046ec:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80046f0:	e6e6      	b.n	80044c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80046f8:	2b08      	cmp	r3, #8
 80046fa:	f47f aee1 	bne.w	80044c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 800470c:	425a      	negs	r2, r3
 800470e:	b2db      	uxtb	r3, r3
 8004710:	b2d2      	uxtb	r2, r2
 8004712:	bf58      	it	pl
 8004714:	4253      	negpl	r3, r2
 8004716:	2bff      	cmp	r3, #255	; 0xff
 8004718:	f47f aed2 	bne.w	80044c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004722:	2b00      	cmp	r3, #0
 8004724:	d110      	bne.n	8004748 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f87d 	bl	8004826 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 f898 	bl	8004862 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8004742:	f04f 33ff 	mov.w	r3, #4294967295
 8004746:	e06a      	b.n	800481e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800474e:	2b0a      	cmp	r3, #10
 8004750:	d107      	bne.n	8004762 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8004758:	4619      	mov	r1, r3
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 f960 	bl	8004a20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8004760:	e6ae      	b.n	80044c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004768:	2b06      	cmp	r3, #6
 800476a:	d10e      	bne.n	800478a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8004778:	4619      	mov	r1, r3
 800477a:	4610      	mov	r0, r2
 800477c:	f7fd fa91 	bl	8001ca2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8004788:	e69a      	b.n	80044c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004790:	2b0b      	cmp	r3, #11
 8004792:	d104      	bne.n	800479e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 800479c:	e690      	b.n	80044c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80047a4:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f202 2222 	addw	r2, r2, #546	; 0x222
 80047ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	f43f ae84 	beq.w	80044c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80047be:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80047c8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80047d2:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f202 2222 	addw	r2, r2, #546	; 0x222
 80047dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	f202 4224 	addw	r2, r2, #1060	; 0x424
 80047ea:	4611      	mov	r1, r2
 80047ec:	4798      	blx	r3
    while (true)
 80047ee:	e667      	b.n	80044c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 80047f0:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00f      	beq.n	800481c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800480a:	4293      	cmp	r3, r2
 800480c:	d906      	bls.n	800481c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 f809 	bl	8004826 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 800481c:	2300      	movs	r3, #0
  }
 800481e:	4618      	mov	r0, r3
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8004826:	b580      	push	{r7, lr}
 8004828:	b086      	sub	sp, #24
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 800482e:	f107 030c 	add.w	r3, r7, #12
 8004832:	4618      	mov	r0, r3
 8004834:	f7fc fd92 	bl	800135c <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f107 020c 	add.w	r2, r7, #12
 8004842:	210a      	movs	r1, #10
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	4798      	blx	r3
    rt_time = hardware_.time();
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	3304      	adds	r3, #4
 800484c:	4618      	mov	r0, r3
 800484e:	f7fd fd09 	bl	8002264 <_ZN13STM32Hardware4timeEv>
 8004852:	4602      	mov	r2, r0
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 800485a:	bf00      	nop
 800485c:	3718      	adds	r7, #24
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8004862:	b590      	push	{r4, r7, lr}
 8004864:	b08b      	sub	sp, #44	; 0x2c
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 800486a:	f107 030c 	add.w	r3, r7, #12
 800486e:	4618      	mov	r0, r3
 8004870:	f7fc fe64 	bl	800153c <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004874:	2300      	movs	r3, #0
 8004876:	627b      	str	r3, [r7, #36]	; 0x24
 8004878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487a:	2b18      	cmp	r3, #24
 800487c:	dc63      	bgt.n	8004946 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004882:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4413      	add	r3, r2
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d056      	beq.n	800493e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004894:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	4413      	add	r3, r2
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	4413      	add	r3, r2
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ba:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	4413      	add	r3, r2
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	6859      	ldr	r1, [r3, #4]
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ca:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	4413      	add	r3, r2
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	3308      	adds	r3, #8
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4608      	mov	r0, r1
 80048de:	4798      	blx	r3
 80048e0:	4603      	mov	r3, r0
 80048e2:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	4413      	add	r3, r2
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	6859      	ldr	r1, [r3, #4]
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4413      	add	r3, r2
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	330c      	adds	r3, #12
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4608      	mov	r0, r1
 800490c:	4798      	blx	r3
 800490e:	4603      	mov	r3, r0
 8004910:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8004912:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004916:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681c      	ldr	r4, [r3, #0]
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004922:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	4413      	add	r3, r2
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	4618      	mov	r0, r3
 800492e:	f7fd fb70 	bl	8002012 <_ZN3ros9Publisher15getEndpointTypeEv>
 8004932:	4601      	mov	r1, r0
 8004934:	f107 030c 	add.w	r3, r7, #12
 8004938:	461a      	mov	r2, r3
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800493e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004940:	3301      	adds	r3, #1
 8004942:	627b      	str	r3, [r7, #36]	; 0x24
 8004944:	e798      	b.n	8004878 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004946:	2300      	movs	r3, #0
 8004948:	627b      	str	r3, [r7, #36]	; 0x24
 800494a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494c:	2b18      	cmp	r3, #24
 800494e:	dc5f      	bgt.n	8004a10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004954:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d053      	beq.n	8004a08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004964:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	b29b      	uxth	r3, r3
 8004970:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004976:	f202 2222 	addw	r2, r2, #546	; 0x222
 800497a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004986:	f202 2222 	addw	r2, r2, #546	; 0x222
 800498a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004992:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	3308      	adds	r3, #8
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4608      	mov	r0, r1
 80049a2:	4798      	blx	r3
 80049a4:	4603      	mov	r3, r0
 80049a6:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ac:	f202 2222 	addw	r2, r2, #546	; 0x222
 80049b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049b8:	f202 2222 	addw	r2, r2, #546	; 0x222
 80049bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	330c      	adds	r3, #12
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4608      	mov	r0, r1
 80049c8:	4798      	blx	r3
 80049ca:	4603      	mov	r3, r0
 80049cc:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 80049ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049d2:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681c      	ldr	r4, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049de:	f202 2222 	addw	r2, r2, #546	; 0x222
 80049e2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ea:	f202 2222 	addw	r2, r2, #546	; 0x222
 80049ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	3304      	adds	r3, #4
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4608      	mov	r0, r1
 80049fa:	4798      	blx	r3
 80049fc:	4601      	mov	r1, r0
 80049fe:	f107 030c 	add.w	r3, r7, #12
 8004a02:	461a      	mov	r2, r3
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a0e:	e79c      	b.n	800494a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8004a18:	bf00      	nop
 8004a1a:	372c      	adds	r7, #44	; 0x2c
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd90      	pop	{r4, r7, pc}

08004a20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b086      	sub	sp, #24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8004a2a:	f107 0308 	add.w	r3, r7, #8
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7fc fc94 	bl	800135c <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	3304      	adds	r3, #4
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7fd fc13 	bl	8002264 <_ZN13STM32Hardware4timeEv>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8004a4a:	f107 0308 	add.w	r3, r7, #8
 8004a4e:	6839      	ldr	r1, [r7, #0]
 8004a50:	4618      	mov	r0, r3
 8004a52:	f7fc fcf3 	bl	800143c <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	4915      	ldr	r1, [pc, #84]	; (8004ab0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8004a5c:	fba1 1303 	umull	r1, r3, r1, r3
 8004a60:	099b      	lsrs	r3, r3, #6
 8004a62:	4413      	add	r3, r2
 8004a64:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8004a66:	6939      	ldr	r1, [r7, #16]
 8004a68:	697a      	ldr	r2, [r7, #20]
 8004a6a:	4b11      	ldr	r3, [pc, #68]	; (8004ab0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8004a6c:	fba3 0302 	umull	r0, r3, r3, r2
 8004a70:	099b      	lsrs	r3, r3, #6
 8004a72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a76:	fb00 f303 	mul.w	r3, r0, r3
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	4a0d      	ldr	r2, [pc, #52]	; (8004ab4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8004a7e:	fb02 f303 	mul.w	r3, r2, r3
 8004a82:	440b      	add	r3, r1
 8004a84:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8004a86:	f107 0308 	add.w	r3, r7, #8
 8004a8a:	3304      	adds	r3, #4
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 f8a6 	bl	8004be0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	3304      	adds	r3, #4
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7fd fbe3 	bl	8002264 <_ZN13STM32Hardware4timeEv>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8004aa6:	bf00      	nop
 8004aa8:	3718      	adds	r7, #24
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	10624dd3 	.word	0x10624dd3
 8004ab4:	000f4240 	.word	0x000f4240

08004ab8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b088      	sub	sp, #32
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	2b63      	cmp	r3, #99	; 0x63
 8004ac8:	dd09      	ble.n	8004ade <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8004ad0:	f083 0301 	eor.w	r3, r3, #1
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d001      	beq.n	8004ade <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8004ada:	2300      	movs	r3, #0
 8004adc:	e079      	b.n	8004bd2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8004aea:	3207      	adds	r2, #7
 8004aec:	4611      	mov	r1, r2
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	4798      	blx	r3
 8004af2:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	22ff      	movs	r2, #255	; 0xff
 8004af8:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	22fe      	movs	r2, #254	; 0xfe
 8004b00:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	b2da      	uxtb	r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	0a1b      	lsrs	r3, r3, #8
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	b2da      	uxtb	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8004b2a:	4413      	add	r3, r2
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	43db      	mvns	r3, r3
 8004b30:	b2da      	uxtb	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	b2da      	uxtb	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	b21b      	sxth	r3, r3
 8004b46:	121b      	asrs	r3, r3, #8
 8004b48:	b21b      	sxth	r3, r3
 8004b4a:	b2da      	uxtb	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8004b52:	2300      	movs	r3, #0
 8004b54:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004b56:	2305      	movs	r3, #5
 8004b58:	61bb      	str	r3, [r7, #24]
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	3306      	adds	r3, #6
 8004b5e:	69ba      	ldr	r2, [r7, #24]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	dc0d      	bgt.n	8004b80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	4413      	add	r3, r2
 8004b6a:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	461a      	mov	r2, r3
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	4413      	add	r3, r2
 8004b76:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	61bb      	str	r3, [r7, #24]
 8004b7e:	e7ec      	b.n	8004b5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	3307      	adds	r3, #7
 8004b84:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	425a      	negs	r2, r3
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	b2d2      	uxtb	r2, r2
 8004b8e:	bf58      	it	pl
 8004b90:	4253      	negpl	r3, r2
 8004b92:	b2da      	uxtb	r2, r3
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	1c59      	adds	r1, r3, #1
 8004b98:	6179      	str	r1, [r7, #20]
 8004b9a:	43d2      	mvns	r2, r2
 8004b9c:	b2d1      	uxtb	r1, r2
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	460a      	mov	r2, r1
 8004ba4:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bae:	dc0a      	bgt.n	8004bc6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	1d18      	adds	r0, r3, #4
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	f7fd fb0b 	bl	80021d8 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	e005      	b.n	8004bd2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004bc6:	4905      	ldr	r1, [pc, #20]	; (8004bdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	f000 f849 	bl	8004c60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8004bce:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3720      	adds	r7, #32
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	0800903c 	.word	0x0800903c

08004be0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	3304      	adds	r3, #4
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7fd fb38 	bl	8002264 <_ZN13STM32Hardware4timeEv>
 8004bf4:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	4915      	ldr	r1, [pc, #84]	; (8004c54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8004bfe:	fba1 1303 	umull	r1, r3, r1, r3
 8004c02:	099b      	lsrs	r3, r3, #6
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	1e5a      	subs	r2, r3, #1
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	6859      	ldr	r1, [r3, #4]
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	4b0f      	ldr	r3, [pc, #60]	; (8004c54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8004c16:	fba3 0302 	umull	r0, r3, r3, r2
 8004c1a:	099b      	lsrs	r3, r3, #6
 8004c1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c20:	fb00 f303 	mul.w	r3, r0, r3
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	4a0c      	ldr	r2, [pc, #48]	; (8004c58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8004c28:	fb02 f303 	mul.w	r3, r2, r3
 8004c2c:	1aca      	subs	r2, r1, r3
 8004c2e:	4b0b      	ldr	r3, [pc, #44]	; (8004c5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 8004c30:	4413      	add	r3, r2
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8004c44:	4619      	mov	r1, r3
 8004c46:	4610      	mov	r0, r2
 8004c48:	f7fc f8be 	bl	8000dc8 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004c4c:	bf00      	nop
 8004c4e:	3710      	adds	r7, #16
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	10624dd3 	.word	0x10624dd3
 8004c58:	000f4240 	.word	0x000f4240
 8004c5c:	3b9aca00 	.word	0x3b9aca00

08004c60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004c6a:	683a      	ldr	r2, [r7, #0]
 8004c6c:	2103      	movs	r1, #3
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f804 	bl	8004c7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8004c74:	bf00      	nop
 8004c76:	3708      	adds	r7, #8
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b088      	sub	sp, #32
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	460b      	mov	r3, r1
 8004c86:	607a      	str	r2, [r7, #4]
 8004c88:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004c8a:	f107 0314 	add.w	r3, r7, #20
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7fc fe18 	bl	80018c4 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004c94:	7afb      	ldrb	r3, [r7, #11]
 8004c96:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f107 0214 	add.w	r2, r7, #20
 8004ca6:	2107      	movs	r1, #7
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	4798      	blx	r3
  }
 8004cac:	bf00      	nop
 8004cae:	3720      	adds	r7, #32
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <_Z41__static_initialization_and_destruction_0ii>:
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d134      	bne.n	8004d2e <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d12f      	bne.n	8004d2e <_Z41__static_initialization_and_destruction_0ii+0x7a>
ros::NodeHandle nh;
 8004cce:	481a      	ldr	r0, [pc, #104]	; (8004d38 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8004cd0:	f7fe fa3c 	bl	800314c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
geometry_msgs::Twist vel_pub;
 8004cd4:	4819      	ldr	r0, [pc, #100]	; (8004d3c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8004cd6:	f7fe f9a5 	bl	8003024 <_ZN13geometry_msgs5TwistC1Ev>
std_msgs::Float64 set1_lin, set2_lin, set1_ang, set2_ang, u11_s, u21_s;
 8004cda:	4819      	ldr	r0, [pc, #100]	; (8004d40 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8004cdc:	f7fd face 	bl	800227c <_ZN8std_msgs7Float64C1Ev>
 8004ce0:	4818      	ldr	r0, [pc, #96]	; (8004d44 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8004ce2:	f7fd facb 	bl	800227c <_ZN8std_msgs7Float64C1Ev>
 8004ce6:	4818      	ldr	r0, [pc, #96]	; (8004d48 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8004ce8:	f7fd fac8 	bl	800227c <_ZN8std_msgs7Float64C1Ev>
 8004cec:	4817      	ldr	r0, [pc, #92]	; (8004d4c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8004cee:	f7fd fac5 	bl	800227c <_ZN8std_msgs7Float64C1Ev>
 8004cf2:	4817      	ldr	r0, [pc, #92]	; (8004d50 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8004cf4:	f7fd fac2 	bl	800227c <_ZN8std_msgs7Float64C1Ev>
 8004cf8:	4816      	ldr	r0, [pc, #88]	; (8004d54 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8004cfa:	f7fd fabf 	bl	800227c <_ZN8std_msgs7Float64C1Ev>
std_msgs::Float64 y11, y21, y11_lin, y21_lin;
 8004cfe:	4816      	ldr	r0, [pc, #88]	; (8004d58 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8004d00:	f7fd fabc 	bl	800227c <_ZN8std_msgs7Float64C1Ev>
 8004d04:	4815      	ldr	r0, [pc, #84]	; (8004d5c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8004d06:	f7fd fab9 	bl	800227c <_ZN8std_msgs7Float64C1Ev>
 8004d0a:	4815      	ldr	r0, [pc, #84]	; (8004d60 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8004d0c:	f7fd fab6 	bl	800227c <_ZN8std_msgs7Float64C1Ev>
 8004d10:	4814      	ldr	r0, [pc, #80]	; (8004d64 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8004d12:	f7fd fab3 	bl	800227c <_ZN8std_msgs7Float64C1Ev>
ros::Publisher pub("vel_pub", &vel_pub);
 8004d16:	2300      	movs	r3, #0
 8004d18:	4a08      	ldr	r2, [pc, #32]	; (8004d3c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8004d1a:	4913      	ldr	r1, [pc, #76]	; (8004d68 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8004d1c:	4813      	ldr	r0, [pc, #76]	; (8004d6c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8004d1e:	f7fd f94d 	bl	8001fbc <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<geometry_msgs::Twist> sub_cmd_vel("cmd_vel", &_get_cmd_vel);
 8004d22:	2301      	movs	r3, #1
 8004d24:	4a12      	ldr	r2, [pc, #72]	; (8004d70 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8004d26:	4913      	ldr	r1, [pc, #76]	; (8004d74 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8004d28:	4813      	ldr	r0, [pc, #76]	; (8004d78 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8004d2a:	f7ff fafb 	bl	8004324 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
}
 8004d2e:	bf00      	nop
 8004d30:	3708      	adds	r7, #8
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	20000274 	.word	0x20000274
 8004d3c:	20000bb0 	.word	0x20000bb0
 8004d40:	20000bf8 	.word	0x20000bf8
 8004d44:	20000c08 	.word	0x20000c08
 8004d48:	20000c18 	.word	0x20000c18
 8004d4c:	20000c28 	.word	0x20000c28
 8004d50:	20000c38 	.word	0x20000c38
 8004d54:	20000c48 	.word	0x20000c48
 8004d58:	20000c58 	.word	0x20000c58
 8004d5c:	20000c68 	.word	0x20000c68
 8004d60:	20000c78 	.word	0x20000c78
 8004d64:	20000c88 	.word	0x20000c88
 8004d68:	08009078 	.word	0x08009078
 8004d6c:	20000e28 	.word	0x20000e28
 8004d70:	08004021 	.word	0x08004021
 8004d74:	08009080 	.word	0x08009080
 8004d78:	20000e40 	.word	0x20000e40

08004d7c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	3310      	adds	r3, #16
 8004d8a:	6839      	ldr	r1, [r7, #0]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7fe f98b 	bl	80030a8 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	3210      	adds	r2, #16
 8004d9a:	4610      	mov	r0, r2
 8004d9c:	4798      	blx	r3
  }
 8004d9e:	bf00      	nop
 8004da0:	3708      	adds	r7, #8
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 8004da6:	b480      	push	{r7}
 8004da8:	b083      	sub	sp, #12
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 8004db2:	4618      	mov	r0, r3
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b082      	sub	sp, #8
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	3310      	adds	r3, #16
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7fe f992 	bl	80030f4 <_ZN13geometry_msgs5Twist7getTypeEv>
 8004dd0:	4603      	mov	r3, r0
  }
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3708      	adds	r7, #8
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b082      	sub	sp, #8
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	3310      	adds	r3, #16
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7fe f992 	bl	8003110 <_ZN13geometry_msgs5Twist6getMD5Ev>
 8004dec:	4603      	mov	r3, r0
  }
 8004dee:	4618      	mov	r0, r3
 8004df0:	3708      	adds	r7, #8
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8004df6:	b480      	push	{r7}
 8004df8:	b083      	sub	sp, #12
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
    return configured_;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8004e04:	4618      	mov	r0, r3
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <_GLOBAL__sub_I_nh>:
 8004e10:	b580      	push	{r7, lr}
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004e18:	2001      	movs	r0, #1
 8004e1a:	f7ff ff4b 	bl	8004cb4 <_Z41__static_initialization_and_destruction_0ii>
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e26:	2300      	movs	r3, #0
 8004e28:	607b      	str	r3, [r7, #4]
 8004e2a:	4b10      	ldr	r3, [pc, #64]	; (8004e6c <HAL_MspInit+0x4c>)
 8004e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e2e:	4a0f      	ldr	r2, [pc, #60]	; (8004e6c <HAL_MspInit+0x4c>)
 8004e30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e34:	6453      	str	r3, [r2, #68]	; 0x44
 8004e36:	4b0d      	ldr	r3, [pc, #52]	; (8004e6c <HAL_MspInit+0x4c>)
 8004e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e3e:	607b      	str	r3, [r7, #4]
 8004e40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e42:	2300      	movs	r3, #0
 8004e44:	603b      	str	r3, [r7, #0]
 8004e46:	4b09      	ldr	r3, [pc, #36]	; (8004e6c <HAL_MspInit+0x4c>)
 8004e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4a:	4a08      	ldr	r2, [pc, #32]	; (8004e6c <HAL_MspInit+0x4c>)
 8004e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e50:	6413      	str	r3, [r2, #64]	; 0x40
 8004e52:	4b06      	ldr	r3, [pc, #24]	; (8004e6c <HAL_MspInit+0x4c>)
 8004e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e5a:	603b      	str	r3, [r7, #0]
 8004e5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e5e:	bf00      	nop
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	40023800 	.word	0x40023800

08004e70 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b08c      	sub	sp, #48	; 0x30
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e78:	f107 031c 	add.w	r3, r7, #28
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	601a      	str	r2, [r3, #0]
 8004e80:	605a      	str	r2, [r3, #4]
 8004e82:	609a      	str	r2, [r3, #8]
 8004e84:	60da      	str	r2, [r3, #12]
 8004e86:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a32      	ldr	r2, [pc, #200]	; (8004f58 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d12d      	bne.n	8004eee <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004e92:	2300      	movs	r3, #0
 8004e94:	61bb      	str	r3, [r7, #24]
 8004e96:	4b31      	ldr	r3, [pc, #196]	; (8004f5c <HAL_TIM_Encoder_MspInit+0xec>)
 8004e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e9a:	4a30      	ldr	r2, [pc, #192]	; (8004f5c <HAL_TIM_Encoder_MspInit+0xec>)
 8004e9c:	f043 0301 	orr.w	r3, r3, #1
 8004ea0:	6453      	str	r3, [r2, #68]	; 0x44
 8004ea2:	4b2e      	ldr	r3, [pc, #184]	; (8004f5c <HAL_TIM_Encoder_MspInit+0xec>)
 8004ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	61bb      	str	r3, [r7, #24]
 8004eac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004eae:	2300      	movs	r3, #0
 8004eb0:	617b      	str	r3, [r7, #20]
 8004eb2:	4b2a      	ldr	r3, [pc, #168]	; (8004f5c <HAL_TIM_Encoder_MspInit+0xec>)
 8004eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb6:	4a29      	ldr	r2, [pc, #164]	; (8004f5c <HAL_TIM_Encoder_MspInit+0xec>)
 8004eb8:	f043 0310 	orr.w	r3, r3, #16
 8004ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8004ebe:	4b27      	ldr	r3, [pc, #156]	; (8004f5c <HAL_TIM_Encoder_MspInit+0xec>)
 8004ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec2:	f003 0310 	and.w	r3, r3, #16
 8004ec6:	617b      	str	r3, [r7, #20]
 8004ec8:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8004eca:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8004ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004ed8:	2302      	movs	r3, #2
 8004eda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004edc:	2301      	movs	r3, #1
 8004ede:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004ee0:	f107 031c 	add.w	r3, r7, #28
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	481e      	ldr	r0, [pc, #120]	; (8004f60 <HAL_TIM_Encoder_MspInit+0xf0>)
 8004ee8:	f000 ffd4 	bl	8005e94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004eec:	e030      	b.n	8004f50 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM3)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a1c      	ldr	r2, [pc, #112]	; (8004f64 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d12b      	bne.n	8004f50 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004ef8:	2300      	movs	r3, #0
 8004efa:	613b      	str	r3, [r7, #16]
 8004efc:	4b17      	ldr	r3, [pc, #92]	; (8004f5c <HAL_TIM_Encoder_MspInit+0xec>)
 8004efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f00:	4a16      	ldr	r2, [pc, #88]	; (8004f5c <HAL_TIM_Encoder_MspInit+0xec>)
 8004f02:	f043 0302 	orr.w	r3, r3, #2
 8004f06:	6413      	str	r3, [r2, #64]	; 0x40
 8004f08:	4b14      	ldr	r3, [pc, #80]	; (8004f5c <HAL_TIM_Encoder_MspInit+0xec>)
 8004f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0c:	f003 0302 	and.w	r3, r3, #2
 8004f10:	613b      	str	r3, [r7, #16]
 8004f12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f14:	2300      	movs	r3, #0
 8004f16:	60fb      	str	r3, [r7, #12]
 8004f18:	4b10      	ldr	r3, [pc, #64]	; (8004f5c <HAL_TIM_Encoder_MspInit+0xec>)
 8004f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1c:	4a0f      	ldr	r2, [pc, #60]	; (8004f5c <HAL_TIM_Encoder_MspInit+0xec>)
 8004f1e:	f043 0301 	orr.w	r3, r3, #1
 8004f22:	6313      	str	r3, [r2, #48]	; 0x30
 8004f24:	4b0d      	ldr	r3, [pc, #52]	; (8004f5c <HAL_TIM_Encoder_MspInit+0xec>)
 8004f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f28:	f003 0301 	and.w	r3, r3, #1
 8004f2c:	60fb      	str	r3, [r7, #12]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004f30:	23c0      	movs	r3, #192	; 0xc0
 8004f32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f34:	2302      	movs	r3, #2
 8004f36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004f3c:	2302      	movs	r3, #2
 8004f3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004f40:	2302      	movs	r3, #2
 8004f42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f44:	f107 031c 	add.w	r3, r7, #28
 8004f48:	4619      	mov	r1, r3
 8004f4a:	4807      	ldr	r0, [pc, #28]	; (8004f68 <HAL_TIM_Encoder_MspInit+0xf8>)
 8004f4c:	f000 ffa2 	bl	8005e94 <HAL_GPIO_Init>
}
 8004f50:	bf00      	nop
 8004f52:	3730      	adds	r7, #48	; 0x30
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	40010000 	.word	0x40010000
 8004f5c:	40023800 	.word	0x40023800
 8004f60:	40021000 	.word	0x40021000
 8004f64:	40000400 	.word	0x40000400
 8004f68:	40020000 	.word	0x40020000

08004f6c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f7c:	d10d      	bne.n	8004f9a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004f7e:	2300      	movs	r3, #0
 8004f80:	60fb      	str	r3, [r7, #12]
 8004f82:	4b09      	ldr	r3, [pc, #36]	; (8004fa8 <HAL_TIM_PWM_MspInit+0x3c>)
 8004f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f86:	4a08      	ldr	r2, [pc, #32]	; (8004fa8 <HAL_TIM_PWM_MspInit+0x3c>)
 8004f88:	f043 0301 	orr.w	r3, r3, #1
 8004f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8004f8e:	4b06      	ldr	r3, [pc, #24]	; (8004fa8 <HAL_TIM_PWM_MspInit+0x3c>)
 8004f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	60fb      	str	r3, [r7, #12]
 8004f98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004f9a:	bf00      	nop
 8004f9c:	3714      	adds	r7, #20
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	40023800 	.word	0x40023800

08004fac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b088      	sub	sp, #32
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fb4:	f107 030c 	add.w	r3, r7, #12
 8004fb8:	2200      	movs	r2, #0
 8004fba:	601a      	str	r2, [r3, #0]
 8004fbc:	605a      	str	r2, [r3, #4]
 8004fbe:	609a      	str	r2, [r3, #8]
 8004fc0:	60da      	str	r2, [r3, #12]
 8004fc2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fcc:	d11d      	bne.n	800500a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fce:	2300      	movs	r3, #0
 8004fd0:	60bb      	str	r3, [r7, #8]
 8004fd2:	4b10      	ldr	r3, [pc, #64]	; (8005014 <HAL_TIM_MspPostInit+0x68>)
 8004fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd6:	4a0f      	ldr	r2, [pc, #60]	; (8005014 <HAL_TIM_MspPostInit+0x68>)
 8004fd8:	f043 0301 	orr.w	r3, r3, #1
 8004fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8004fde:	4b0d      	ldr	r3, [pc, #52]	; (8005014 <HAL_TIM_MspPostInit+0x68>)
 8004fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	60bb      	str	r3, [r7, #8]
 8004fe8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004fea:	2303      	movs	r3, #3
 8004fec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fee:	2302      	movs	r3, #2
 8004ff0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ffe:	f107 030c 	add.w	r3, r7, #12
 8005002:	4619      	mov	r1, r3
 8005004:	4804      	ldr	r0, [pc, #16]	; (8005018 <HAL_TIM_MspPostInit+0x6c>)
 8005006:	f000 ff45 	bl	8005e94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800500a:	bf00      	nop
 800500c:	3720      	adds	r7, #32
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	40023800 	.word	0x40023800
 8005018:	40020000 	.word	0x40020000

0800501c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b08a      	sub	sp, #40	; 0x28
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005024:	f107 0314 	add.w	r3, r7, #20
 8005028:	2200      	movs	r2, #0
 800502a:	601a      	str	r2, [r3, #0]
 800502c:	605a      	str	r2, [r3, #4]
 800502e:	609a      	str	r2, [r3, #8]
 8005030:	60da      	str	r2, [r3, #12]
 8005032:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a4c      	ldr	r2, [pc, #304]	; (800516c <HAL_UART_MspInit+0x150>)
 800503a:	4293      	cmp	r3, r2
 800503c:	f040 8091 	bne.w	8005162 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005040:	2300      	movs	r3, #0
 8005042:	613b      	str	r3, [r7, #16]
 8005044:	4b4a      	ldr	r3, [pc, #296]	; (8005170 <HAL_UART_MspInit+0x154>)
 8005046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005048:	4a49      	ldr	r2, [pc, #292]	; (8005170 <HAL_UART_MspInit+0x154>)
 800504a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800504e:	6413      	str	r3, [r2, #64]	; 0x40
 8005050:	4b47      	ldr	r3, [pc, #284]	; (8005170 <HAL_UART_MspInit+0x154>)
 8005052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005058:	613b      	str	r3, [r7, #16]
 800505a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800505c:	2300      	movs	r3, #0
 800505e:	60fb      	str	r3, [r7, #12]
 8005060:	4b43      	ldr	r3, [pc, #268]	; (8005170 <HAL_UART_MspInit+0x154>)
 8005062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005064:	4a42      	ldr	r2, [pc, #264]	; (8005170 <HAL_UART_MspInit+0x154>)
 8005066:	f043 0301 	orr.w	r3, r3, #1
 800506a:	6313      	str	r3, [r2, #48]	; 0x30
 800506c:	4b40      	ldr	r3, [pc, #256]	; (8005170 <HAL_UART_MspInit+0x154>)
 800506e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005070:	f003 0301 	and.w	r3, r3, #1
 8005074:	60fb      	str	r3, [r7, #12]
 8005076:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005078:	230c      	movs	r3, #12
 800507a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800507c:	2302      	movs	r3, #2
 800507e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005080:	2300      	movs	r3, #0
 8005082:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005084:	2303      	movs	r3, #3
 8005086:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005088:	2307      	movs	r3, #7
 800508a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800508c:	f107 0314 	add.w	r3, r7, #20
 8005090:	4619      	mov	r1, r3
 8005092:	4838      	ldr	r0, [pc, #224]	; (8005174 <HAL_UART_MspInit+0x158>)
 8005094:	f000 fefe 	bl	8005e94 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8005098:	4b37      	ldr	r3, [pc, #220]	; (8005178 <HAL_UART_MspInit+0x15c>)
 800509a:	4a38      	ldr	r2, [pc, #224]	; (800517c <HAL_UART_MspInit+0x160>)
 800509c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800509e:	4b36      	ldr	r3, [pc, #216]	; (8005178 <HAL_UART_MspInit+0x15c>)
 80050a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80050a4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80050a6:	4b34      	ldr	r3, [pc, #208]	; (8005178 <HAL_UART_MspInit+0x15c>)
 80050a8:	2200      	movs	r2, #0
 80050aa:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80050ac:	4b32      	ldr	r3, [pc, #200]	; (8005178 <HAL_UART_MspInit+0x15c>)
 80050ae:	2200      	movs	r2, #0
 80050b0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80050b2:	4b31      	ldr	r3, [pc, #196]	; (8005178 <HAL_UART_MspInit+0x15c>)
 80050b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050b8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80050ba:	4b2f      	ldr	r3, [pc, #188]	; (8005178 <HAL_UART_MspInit+0x15c>)
 80050bc:	2200      	movs	r2, #0
 80050be:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80050c0:	4b2d      	ldr	r3, [pc, #180]	; (8005178 <HAL_UART_MspInit+0x15c>)
 80050c2:	2200      	movs	r2, #0
 80050c4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80050c6:	4b2c      	ldr	r3, [pc, #176]	; (8005178 <HAL_UART_MspInit+0x15c>)
 80050c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050cc:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80050ce:	4b2a      	ldr	r3, [pc, #168]	; (8005178 <HAL_UART_MspInit+0x15c>)
 80050d0:	2200      	movs	r2, #0
 80050d2:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80050d4:	4b28      	ldr	r3, [pc, #160]	; (8005178 <HAL_UART_MspInit+0x15c>)
 80050d6:	2200      	movs	r2, #0
 80050d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80050da:	4827      	ldr	r0, [pc, #156]	; (8005178 <HAL_UART_MspInit+0x15c>)
 80050dc:	f000 fad8 	bl	8005690 <HAL_DMA_Init>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d001      	beq.n	80050ea <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80050e6:	f7fc f913 	bl	8001310 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a22      	ldr	r2, [pc, #136]	; (8005178 <HAL_UART_MspInit+0x15c>)
 80050ee:	639a      	str	r2, [r3, #56]	; 0x38
 80050f0:	4a21      	ldr	r2, [pc, #132]	; (8005178 <HAL_UART_MspInit+0x15c>)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80050f6:	4b22      	ldr	r3, [pc, #136]	; (8005180 <HAL_UART_MspInit+0x164>)
 80050f8:	4a22      	ldr	r2, [pc, #136]	; (8005184 <HAL_UART_MspInit+0x168>)
 80050fa:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80050fc:	4b20      	ldr	r3, [pc, #128]	; (8005180 <HAL_UART_MspInit+0x164>)
 80050fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005102:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005104:	4b1e      	ldr	r3, [pc, #120]	; (8005180 <HAL_UART_MspInit+0x164>)
 8005106:	2240      	movs	r2, #64	; 0x40
 8005108:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800510a:	4b1d      	ldr	r3, [pc, #116]	; (8005180 <HAL_UART_MspInit+0x164>)
 800510c:	2200      	movs	r2, #0
 800510e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005110:	4b1b      	ldr	r3, [pc, #108]	; (8005180 <HAL_UART_MspInit+0x164>)
 8005112:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005116:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005118:	4b19      	ldr	r3, [pc, #100]	; (8005180 <HAL_UART_MspInit+0x164>)
 800511a:	2200      	movs	r2, #0
 800511c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800511e:	4b18      	ldr	r3, [pc, #96]	; (8005180 <HAL_UART_MspInit+0x164>)
 8005120:	2200      	movs	r2, #0
 8005122:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005124:	4b16      	ldr	r3, [pc, #88]	; (8005180 <HAL_UART_MspInit+0x164>)
 8005126:	2200      	movs	r2, #0
 8005128:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800512a:	4b15      	ldr	r3, [pc, #84]	; (8005180 <HAL_UART_MspInit+0x164>)
 800512c:	2200      	movs	r2, #0
 800512e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005130:	4b13      	ldr	r3, [pc, #76]	; (8005180 <HAL_UART_MspInit+0x164>)
 8005132:	2200      	movs	r2, #0
 8005134:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005136:	4812      	ldr	r0, [pc, #72]	; (8005180 <HAL_UART_MspInit+0x164>)
 8005138:	f000 faaa 	bl	8005690 <HAL_DMA_Init>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d001      	beq.n	8005146 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8005142:	f7fc f8e5 	bl	8001310 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a0d      	ldr	r2, [pc, #52]	; (8005180 <HAL_UART_MspInit+0x164>)
 800514a:	635a      	str	r2, [r3, #52]	; 0x34
 800514c:	4a0c      	ldr	r2, [pc, #48]	; (8005180 <HAL_UART_MspInit+0x164>)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005152:	2200      	movs	r2, #0
 8005154:	2100      	movs	r1, #0
 8005156:	2026      	movs	r0, #38	; 0x26
 8005158:	f000 fa63 	bl	8005622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800515c:	2026      	movs	r0, #38	; 0x26
 800515e:	f000 fa7c 	bl	800565a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005162:	bf00      	nop
 8005164:	3728      	adds	r7, #40	; 0x28
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	40004400 	.word	0x40004400
 8005170:	40023800 	.word	0x40023800
 8005174:	40020000 	.word	0x40020000
 8005178:	200001b0 	.word	0x200001b0
 800517c:	40026088 	.word	0x40026088
 8005180:	20000210 	.word	0x20000210
 8005184:	400260a0 	.word	0x400260a0

08005188 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005188:	b480      	push	{r7}
 800518a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800518c:	e7fe      	b.n	800518c <NMI_Handler+0x4>

0800518e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800518e:	b480      	push	{r7}
 8005190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005192:	e7fe      	b.n	8005192 <HardFault_Handler+0x4>

08005194 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005194:	b480      	push	{r7}
 8005196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005198:	e7fe      	b.n	8005198 <MemManage_Handler+0x4>

0800519a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800519a:	b480      	push	{r7}
 800519c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800519e:	e7fe      	b.n	800519e <BusFault_Handler+0x4>

080051a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80051a0:	b480      	push	{r7}
 80051a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80051a4:	e7fe      	b.n	80051a4 <UsageFault_Handler+0x4>

080051a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80051a6:	b480      	push	{r7}
 80051a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80051aa:	bf00      	nop
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80051b4:	b480      	push	{r7}
 80051b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80051b8:	bf00      	nop
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80051c2:	b480      	push	{r7}
 80051c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80051c6:	bf00      	nop
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80051d4:	f000 f906 	bl	80053e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80051d8:	bf00      	nop
 80051da:	bd80      	pop	{r7, pc}

080051dc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80051e0:	4802      	ldr	r0, [pc, #8]	; (80051ec <DMA1_Stream5_IRQHandler+0x10>)
 80051e2:	f000 fbed 	bl	80059c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80051e6:	bf00      	nop
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	200001b0 	.word	0x200001b0

080051f0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80051f4:	4802      	ldr	r0, [pc, #8]	; (8005200 <DMA1_Stream6_IRQHandler+0x10>)
 80051f6:	f000 fbe3 	bl	80059c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80051fa:	bf00      	nop
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	20000210 	.word	0x20000210

08005204 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005208:	4802      	ldr	r0, [pc, #8]	; (8005214 <USART2_IRQHandler+0x10>)
 800520a:	f002 fb8d 	bl	8007928 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800520e:	bf00      	nop
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	2000016c 	.word	0x2000016c

08005218 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005218:	b480      	push	{r7}
 800521a:	af00      	add	r7, sp, #0
  return 1;
 800521c:	2301      	movs	r3, #1
}
 800521e:	4618      	mov	r0, r3
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <_kill>:

int _kill(int pid, int sig)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005232:	f003 fc75 	bl	8008b20 <__errno>
 8005236:	4603      	mov	r3, r0
 8005238:	2216      	movs	r2, #22
 800523a:	601a      	str	r2, [r3, #0]
  return -1;
 800523c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005240:	4618      	mov	r0, r3
 8005242:	3708      	adds	r7, #8
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <_exit>:

void _exit (int status)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005250:	f04f 31ff 	mov.w	r1, #4294967295
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f7ff ffe7 	bl	8005228 <_kill>
  while (1) {}    /* Make sure we hang here */
 800525a:	e7fe      	b.n	800525a <_exit+0x12>

0800525c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b086      	sub	sp, #24
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005264:	4a14      	ldr	r2, [pc, #80]	; (80052b8 <_sbrk+0x5c>)
 8005266:	4b15      	ldr	r3, [pc, #84]	; (80052bc <_sbrk+0x60>)
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005270:	4b13      	ldr	r3, [pc, #76]	; (80052c0 <_sbrk+0x64>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d102      	bne.n	800527e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005278:	4b11      	ldr	r3, [pc, #68]	; (80052c0 <_sbrk+0x64>)
 800527a:	4a12      	ldr	r2, [pc, #72]	; (80052c4 <_sbrk+0x68>)
 800527c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800527e:	4b10      	ldr	r3, [pc, #64]	; (80052c0 <_sbrk+0x64>)
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4413      	add	r3, r2
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	429a      	cmp	r2, r3
 800528a:	d207      	bcs.n	800529c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800528c:	f003 fc48 	bl	8008b20 <__errno>
 8005290:	4603      	mov	r3, r0
 8005292:	220c      	movs	r2, #12
 8005294:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005296:	f04f 33ff 	mov.w	r3, #4294967295
 800529a:	e009      	b.n	80052b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800529c:	4b08      	ldr	r3, [pc, #32]	; (80052c0 <_sbrk+0x64>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80052a2:	4b07      	ldr	r3, [pc, #28]	; (80052c0 <_sbrk+0x64>)
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4413      	add	r3, r2
 80052aa:	4a05      	ldr	r2, [pc, #20]	; (80052c0 <_sbrk+0x64>)
 80052ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80052ae:	68fb      	ldr	r3, [r7, #12]
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3718      	adds	r7, #24
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	20020000 	.word	0x20020000
 80052bc:	00000400 	.word	0x00000400
 80052c0:	20000ea0 	.word	0x20000ea0
 80052c4:	20000eb8 	.word	0x20000eb8

080052c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80052c8:	b480      	push	{r7}
 80052ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80052cc:	4b06      	ldr	r3, [pc, #24]	; (80052e8 <SystemInit+0x20>)
 80052ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d2:	4a05      	ldr	r2, [pc, #20]	; (80052e8 <SystemInit+0x20>)
 80052d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80052d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80052dc:	bf00      	nop
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	e000ed00 	.word	0xe000ed00

080052ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80052ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005324 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80052f0:	480d      	ldr	r0, [pc, #52]	; (8005328 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80052f2:	490e      	ldr	r1, [pc, #56]	; (800532c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80052f4:	4a0e      	ldr	r2, [pc, #56]	; (8005330 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80052f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80052f8:	e002      	b.n	8005300 <LoopCopyDataInit>

080052fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80052fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80052fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80052fe:	3304      	adds	r3, #4

08005300 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005300:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005302:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005304:	d3f9      	bcc.n	80052fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005306:	4a0b      	ldr	r2, [pc, #44]	; (8005334 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005308:	4c0b      	ldr	r4, [pc, #44]	; (8005338 <LoopFillZerobss+0x26>)
  movs r3, #0
 800530a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800530c:	e001      	b.n	8005312 <LoopFillZerobss>

0800530e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800530e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005310:	3204      	adds	r2, #4

08005312 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005312:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005314:	d3fb      	bcc.n	800530e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005316:	f7ff ffd7 	bl	80052c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800531a:	f003 fc07 	bl	8008b2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800531e:	f7fb fd7f 	bl	8000e20 <main>
  bx  lr    
 8005322:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005324:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005328:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800532c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8005330:	080091f0 	.word	0x080091f0
  ldr r2, =_sbss
 8005334:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8005338:	20000eb8 	.word	0x20000eb8

0800533c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800533c:	e7fe      	b.n	800533c <ADC_IRQHandler>
	...

08005340 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005344:	4b0e      	ldr	r3, [pc, #56]	; (8005380 <HAL_Init+0x40>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a0d      	ldr	r2, [pc, #52]	; (8005380 <HAL_Init+0x40>)
 800534a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800534e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005350:	4b0b      	ldr	r3, [pc, #44]	; (8005380 <HAL_Init+0x40>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a0a      	ldr	r2, [pc, #40]	; (8005380 <HAL_Init+0x40>)
 8005356:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800535a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800535c:	4b08      	ldr	r3, [pc, #32]	; (8005380 <HAL_Init+0x40>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a07      	ldr	r2, [pc, #28]	; (8005380 <HAL_Init+0x40>)
 8005362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005366:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005368:	2003      	movs	r0, #3
 800536a:	f000 f94f 	bl	800560c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800536e:	200f      	movs	r0, #15
 8005370:	f000 f808 	bl	8005384 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005374:	f7ff fd54 	bl	8004e20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	40023c00 	.word	0x40023c00

08005384 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800538c:	4b12      	ldr	r3, [pc, #72]	; (80053d8 <HAL_InitTick+0x54>)
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	4b12      	ldr	r3, [pc, #72]	; (80053dc <HAL_InitTick+0x58>)
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	4619      	mov	r1, r3
 8005396:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800539a:	fbb3 f3f1 	udiv	r3, r3, r1
 800539e:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a2:	4618      	mov	r0, r3
 80053a4:	f000 f967 	bl	8005676 <HAL_SYSTICK_Config>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d001      	beq.n	80053b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e00e      	b.n	80053d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2b0f      	cmp	r3, #15
 80053b6:	d80a      	bhi.n	80053ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80053b8:	2200      	movs	r2, #0
 80053ba:	6879      	ldr	r1, [r7, #4]
 80053bc:	f04f 30ff 	mov.w	r0, #4294967295
 80053c0:	f000 f92f 	bl	8005622 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80053c4:	4a06      	ldr	r2, [pc, #24]	; (80053e0 <HAL_InitTick+0x5c>)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
 80053cc:	e000      	b.n	80053d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3708      	adds	r7, #8
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	20000000 	.word	0x20000000
 80053dc:	20000008 	.word	0x20000008
 80053e0:	20000004 	.word	0x20000004

080053e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80053e4:	b480      	push	{r7}
 80053e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80053e8:	4b06      	ldr	r3, [pc, #24]	; (8005404 <HAL_IncTick+0x20>)
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	461a      	mov	r2, r3
 80053ee:	4b06      	ldr	r3, [pc, #24]	; (8005408 <HAL_IncTick+0x24>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4413      	add	r3, r2
 80053f4:	4a04      	ldr	r2, [pc, #16]	; (8005408 <HAL_IncTick+0x24>)
 80053f6:	6013      	str	r3, [r2, #0]
}
 80053f8:	bf00      	nop
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	20000008 	.word	0x20000008
 8005408:	20000ea4 	.word	0x20000ea4

0800540c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800540c:	b480      	push	{r7}
 800540e:	af00      	add	r7, sp, #0
  return uwTick;
 8005410:	4b03      	ldr	r3, [pc, #12]	; (8005420 <HAL_GetTick+0x14>)
 8005412:	681b      	ldr	r3, [r3, #0]
}
 8005414:	4618      	mov	r0, r3
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	20000ea4 	.word	0x20000ea4

08005424 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800542c:	f7ff ffee 	bl	800540c <HAL_GetTick>
 8005430:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800543c:	d005      	beq.n	800544a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800543e:	4b0a      	ldr	r3, [pc, #40]	; (8005468 <HAL_Delay+0x44>)
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	461a      	mov	r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	4413      	add	r3, r2
 8005448:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800544a:	bf00      	nop
 800544c:	f7ff ffde 	bl	800540c <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	429a      	cmp	r2, r3
 800545a:	d8f7      	bhi.n	800544c <HAL_Delay+0x28>
  {
  }
}
 800545c:	bf00      	nop
 800545e:	bf00      	nop
 8005460:	3710      	adds	r7, #16
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	20000008 	.word	0x20000008

0800546c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f003 0307 	and.w	r3, r3, #7
 800547a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800547c:	4b0c      	ldr	r3, [pc, #48]	; (80054b0 <__NVIC_SetPriorityGrouping+0x44>)
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005482:	68ba      	ldr	r2, [r7, #8]
 8005484:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005488:	4013      	ands	r3, r2
 800548a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005494:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800549c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800549e:	4a04      	ldr	r2, [pc, #16]	; (80054b0 <__NVIC_SetPriorityGrouping+0x44>)
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	60d3      	str	r3, [r2, #12]
}
 80054a4:	bf00      	nop
 80054a6:	3714      	adds	r7, #20
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr
 80054b0:	e000ed00 	.word	0xe000ed00

080054b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80054b4:	b480      	push	{r7}
 80054b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80054b8:	4b04      	ldr	r3, [pc, #16]	; (80054cc <__NVIC_GetPriorityGrouping+0x18>)
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	0a1b      	lsrs	r3, r3, #8
 80054be:	f003 0307 	and.w	r3, r3, #7
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr
 80054cc:	e000ed00 	.word	0xe000ed00

080054d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	4603      	mov	r3, r0
 80054d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	db0b      	blt.n	80054fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054e2:	79fb      	ldrb	r3, [r7, #7]
 80054e4:	f003 021f 	and.w	r2, r3, #31
 80054e8:	4907      	ldr	r1, [pc, #28]	; (8005508 <__NVIC_EnableIRQ+0x38>)
 80054ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054ee:	095b      	lsrs	r3, r3, #5
 80054f0:	2001      	movs	r0, #1
 80054f2:	fa00 f202 	lsl.w	r2, r0, r2
 80054f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80054fa:	bf00      	nop
 80054fc:	370c      	adds	r7, #12
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	e000e100 	.word	0xe000e100

0800550c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	4603      	mov	r3, r0
 8005514:	6039      	str	r1, [r7, #0]
 8005516:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800551c:	2b00      	cmp	r3, #0
 800551e:	db0a      	blt.n	8005536 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	b2da      	uxtb	r2, r3
 8005524:	490c      	ldr	r1, [pc, #48]	; (8005558 <__NVIC_SetPriority+0x4c>)
 8005526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800552a:	0112      	lsls	r2, r2, #4
 800552c:	b2d2      	uxtb	r2, r2
 800552e:	440b      	add	r3, r1
 8005530:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005534:	e00a      	b.n	800554c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	b2da      	uxtb	r2, r3
 800553a:	4908      	ldr	r1, [pc, #32]	; (800555c <__NVIC_SetPriority+0x50>)
 800553c:	79fb      	ldrb	r3, [r7, #7]
 800553e:	f003 030f 	and.w	r3, r3, #15
 8005542:	3b04      	subs	r3, #4
 8005544:	0112      	lsls	r2, r2, #4
 8005546:	b2d2      	uxtb	r2, r2
 8005548:	440b      	add	r3, r1
 800554a:	761a      	strb	r2, [r3, #24]
}
 800554c:	bf00      	nop
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr
 8005558:	e000e100 	.word	0xe000e100
 800555c:	e000ed00 	.word	0xe000ed00

08005560 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005560:	b480      	push	{r7}
 8005562:	b089      	sub	sp, #36	; 0x24
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f003 0307 	and.w	r3, r3, #7
 8005572:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	f1c3 0307 	rsb	r3, r3, #7
 800557a:	2b04      	cmp	r3, #4
 800557c:	bf28      	it	cs
 800557e:	2304      	movcs	r3, #4
 8005580:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	3304      	adds	r3, #4
 8005586:	2b06      	cmp	r3, #6
 8005588:	d902      	bls.n	8005590 <NVIC_EncodePriority+0x30>
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	3b03      	subs	r3, #3
 800558e:	e000      	b.n	8005592 <NVIC_EncodePriority+0x32>
 8005590:	2300      	movs	r3, #0
 8005592:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005594:	f04f 32ff 	mov.w	r2, #4294967295
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	fa02 f303 	lsl.w	r3, r2, r3
 800559e:	43da      	mvns	r2, r3
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	401a      	ands	r2, r3
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80055a8:	f04f 31ff 	mov.w	r1, #4294967295
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	fa01 f303 	lsl.w	r3, r1, r3
 80055b2:	43d9      	mvns	r1, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055b8:	4313      	orrs	r3, r2
         );
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3724      	adds	r7, #36	; 0x24
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
	...

080055c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	3b01      	subs	r3, #1
 80055d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80055d8:	d301      	bcc.n	80055de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80055da:	2301      	movs	r3, #1
 80055dc:	e00f      	b.n	80055fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80055de:	4a0a      	ldr	r2, [pc, #40]	; (8005608 <SysTick_Config+0x40>)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	3b01      	subs	r3, #1
 80055e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80055e6:	210f      	movs	r1, #15
 80055e8:	f04f 30ff 	mov.w	r0, #4294967295
 80055ec:	f7ff ff8e 	bl	800550c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80055f0:	4b05      	ldr	r3, [pc, #20]	; (8005608 <SysTick_Config+0x40>)
 80055f2:	2200      	movs	r2, #0
 80055f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80055f6:	4b04      	ldr	r3, [pc, #16]	; (8005608 <SysTick_Config+0x40>)
 80055f8:	2207      	movs	r2, #7
 80055fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3708      	adds	r7, #8
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	e000e010 	.word	0xe000e010

0800560c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f7ff ff29 	bl	800546c <__NVIC_SetPriorityGrouping>
}
 800561a:	bf00      	nop
 800561c:	3708      	adds	r7, #8
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005622:	b580      	push	{r7, lr}
 8005624:	b086      	sub	sp, #24
 8005626:	af00      	add	r7, sp, #0
 8005628:	4603      	mov	r3, r0
 800562a:	60b9      	str	r1, [r7, #8]
 800562c:	607a      	str	r2, [r7, #4]
 800562e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005630:	2300      	movs	r3, #0
 8005632:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005634:	f7ff ff3e 	bl	80054b4 <__NVIC_GetPriorityGrouping>
 8005638:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	68b9      	ldr	r1, [r7, #8]
 800563e:	6978      	ldr	r0, [r7, #20]
 8005640:	f7ff ff8e 	bl	8005560 <NVIC_EncodePriority>
 8005644:	4602      	mov	r2, r0
 8005646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800564a:	4611      	mov	r1, r2
 800564c:	4618      	mov	r0, r3
 800564e:	f7ff ff5d 	bl	800550c <__NVIC_SetPriority>
}
 8005652:	bf00      	nop
 8005654:	3718      	adds	r7, #24
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}

0800565a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800565a:	b580      	push	{r7, lr}
 800565c:	b082      	sub	sp, #8
 800565e:	af00      	add	r7, sp, #0
 8005660:	4603      	mov	r3, r0
 8005662:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005668:	4618      	mov	r0, r3
 800566a:	f7ff ff31 	bl	80054d0 <__NVIC_EnableIRQ>
}
 800566e:	bf00      	nop
 8005670:	3708      	adds	r7, #8
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}

08005676 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005676:	b580      	push	{r7, lr}
 8005678:	b082      	sub	sp, #8
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f7ff ffa2 	bl	80055c8 <SysTick_Config>
 8005684:	4603      	mov	r3, r0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3708      	adds	r7, #8
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
	...

08005690 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b086      	sub	sp, #24
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005698:	2300      	movs	r3, #0
 800569a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800569c:	f7ff feb6 	bl	800540c <HAL_GetTick>
 80056a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d101      	bne.n	80056ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e099      	b.n	80057e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2202      	movs	r2, #2
 80056b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f022 0201 	bic.w	r2, r2, #1
 80056ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80056cc:	e00f      	b.n	80056ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80056ce:	f7ff fe9d 	bl	800540c <HAL_GetTick>
 80056d2:	4602      	mov	r2, r0
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	2b05      	cmp	r3, #5
 80056da:	d908      	bls.n	80056ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2220      	movs	r2, #32
 80056e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2203      	movs	r2, #3
 80056e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e078      	b.n	80057e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0301 	and.w	r3, r3, #1
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1e8      	bne.n	80056ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	4b38      	ldr	r3, [pc, #224]	; (80057e8 <HAL_DMA_Init+0x158>)
 8005708:	4013      	ands	r3, r2
 800570a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685a      	ldr	r2, [r3, #4]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800571a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005726:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005732:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a1b      	ldr	r3, [r3, #32]
 8005738:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	4313      	orrs	r3, r2
 800573e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005744:	2b04      	cmp	r3, #4
 8005746:	d107      	bne.n	8005758 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005750:	4313      	orrs	r3, r2
 8005752:	697a      	ldr	r2, [r7, #20]
 8005754:	4313      	orrs	r3, r2
 8005756:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	697a      	ldr	r2, [r7, #20]
 800575e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	695b      	ldr	r3, [r3, #20]
 8005766:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	f023 0307 	bic.w	r3, r3, #7
 800576e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005774:	697a      	ldr	r2, [r7, #20]
 8005776:	4313      	orrs	r3, r2
 8005778:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577e:	2b04      	cmp	r3, #4
 8005780:	d117      	bne.n	80057b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	4313      	orrs	r3, r2
 800578a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005790:	2b00      	cmp	r3, #0
 8005792:	d00e      	beq.n	80057b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 fb01 	bl	8005d9c <DMA_CheckFifoParam>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d008      	beq.n	80057b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2240      	movs	r2, #64	; 0x40
 80057a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2201      	movs	r2, #1
 80057aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80057ae:	2301      	movs	r3, #1
 80057b0:	e016      	b.n	80057e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	697a      	ldr	r2, [r7, #20]
 80057b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 fab8 	bl	8005d30 <DMA_CalcBaseAndBitshift>
 80057c0:	4603      	mov	r3, r0
 80057c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057c8:	223f      	movs	r2, #63	; 0x3f
 80057ca:	409a      	lsls	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3718      	adds	r7, #24
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	f010803f 	.word	0xf010803f

080057ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b086      	sub	sp, #24
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
 80057f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057fa:	2300      	movs	r3, #0
 80057fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005802:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800580a:	2b01      	cmp	r3, #1
 800580c:	d101      	bne.n	8005812 <HAL_DMA_Start_IT+0x26>
 800580e:	2302      	movs	r3, #2
 8005810:	e040      	b.n	8005894 <HAL_DMA_Start_IT+0xa8>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2201      	movs	r2, #1
 8005816:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005820:	b2db      	uxtb	r3, r3
 8005822:	2b01      	cmp	r3, #1
 8005824:	d12f      	bne.n	8005886 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2202      	movs	r2, #2
 800582a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	68b9      	ldr	r1, [r7, #8]
 800583a:	68f8      	ldr	r0, [r7, #12]
 800583c:	f000 fa4a 	bl	8005cd4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005844:	223f      	movs	r2, #63	; 0x3f
 8005846:	409a      	lsls	r2, r3
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f042 0216 	orr.w	r2, r2, #22
 800585a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005860:	2b00      	cmp	r3, #0
 8005862:	d007      	beq.n	8005874 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f042 0208 	orr.w	r2, r2, #8
 8005872:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f042 0201 	orr.w	r2, r2, #1
 8005882:	601a      	str	r2, [r3, #0]
 8005884:	e005      	b.n	8005892 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800588e:	2302      	movs	r3, #2
 8005890:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005892:	7dfb      	ldrb	r3, [r7, #23]
}
 8005894:	4618      	mov	r0, r3
 8005896:	3718      	adds	r7, #24
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058a8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80058aa:	f7ff fdaf 	bl	800540c <HAL_GetTick>
 80058ae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d008      	beq.n	80058ce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2280      	movs	r2, #128	; 0x80
 80058c0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e052      	b.n	8005974 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f022 0216 	bic.w	r2, r2, #22
 80058dc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	695a      	ldr	r2, [r3, #20]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058ec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d103      	bne.n	80058fe <HAL_DMA_Abort+0x62>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d007      	beq.n	800590e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f022 0208 	bic.w	r2, r2, #8
 800590c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f022 0201 	bic.w	r2, r2, #1
 800591c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800591e:	e013      	b.n	8005948 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005920:	f7ff fd74 	bl	800540c <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	2b05      	cmp	r3, #5
 800592c:	d90c      	bls.n	8005948 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2220      	movs	r2, #32
 8005932:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2203      	movs	r2, #3
 8005938:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	e015      	b.n	8005974 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0301 	and.w	r3, r3, #1
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1e4      	bne.n	8005920 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800595a:	223f      	movs	r2, #63	; 0x3f
 800595c:	409a      	lsls	r2, r3
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	3710      	adds	r7, #16
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2b02      	cmp	r3, #2
 800598e:	d004      	beq.n	800599a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2280      	movs	r2, #128	; 0x80
 8005994:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e00c      	b.n	80059b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2205      	movs	r2, #5
 800599e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f022 0201 	bic.w	r2, r2, #1
 80059b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b086      	sub	sp, #24
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80059c8:	2300      	movs	r3, #0
 80059ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80059cc:	4b8e      	ldr	r3, [pc, #568]	; (8005c08 <HAL_DMA_IRQHandler+0x248>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a8e      	ldr	r2, [pc, #568]	; (8005c0c <HAL_DMA_IRQHandler+0x24c>)
 80059d2:	fba2 2303 	umull	r2, r3, r2, r3
 80059d6:	0a9b      	lsrs	r3, r3, #10
 80059d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059ea:	2208      	movs	r2, #8
 80059ec:	409a      	lsls	r2, r3
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	4013      	ands	r3, r2
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d01a      	beq.n	8005a2c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0304 	and.w	r3, r3, #4
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d013      	beq.n	8005a2c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f022 0204 	bic.w	r2, r2, #4
 8005a12:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a18:	2208      	movs	r2, #8
 8005a1a:	409a      	lsls	r2, r3
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a24:	f043 0201 	orr.w	r2, r3, #1
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a30:	2201      	movs	r2, #1
 8005a32:	409a      	lsls	r2, r3
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	4013      	ands	r3, r2
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d012      	beq.n	8005a62 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	695b      	ldr	r3, [r3, #20]
 8005a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00b      	beq.n	8005a62 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a4e:	2201      	movs	r2, #1
 8005a50:	409a      	lsls	r2, r3
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a5a:	f043 0202 	orr.w	r2, r3, #2
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a66:	2204      	movs	r2, #4
 8005a68:	409a      	lsls	r2, r3
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d012      	beq.n	8005a98 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0302 	and.w	r3, r3, #2
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00b      	beq.n	8005a98 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a84:	2204      	movs	r2, #4
 8005a86:	409a      	lsls	r2, r3
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a90:	f043 0204 	orr.w	r2, r3, #4
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a9c:	2210      	movs	r2, #16
 8005a9e:	409a      	lsls	r2, r3
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d043      	beq.n	8005b30 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0308 	and.w	r3, r3, #8
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d03c      	beq.n	8005b30 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aba:	2210      	movs	r2, #16
 8005abc:	409a      	lsls	r2, r3
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d018      	beq.n	8005b02 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d108      	bne.n	8005af0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d024      	beq.n	8005b30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	4798      	blx	r3
 8005aee:	e01f      	b.n	8005b30 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d01b      	beq.n	8005b30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	4798      	blx	r3
 8005b00:	e016      	b.n	8005b30 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d107      	bne.n	8005b20 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f022 0208 	bic.w	r2, r2, #8
 8005b1e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d003      	beq.n	8005b30 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b34:	2220      	movs	r2, #32
 8005b36:	409a      	lsls	r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	f000 808f 	beq.w	8005c60 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0310 	and.w	r3, r3, #16
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f000 8087 	beq.w	8005c60 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b56:	2220      	movs	r2, #32
 8005b58:	409a      	lsls	r2, r3
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	2b05      	cmp	r3, #5
 8005b68:	d136      	bne.n	8005bd8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f022 0216 	bic.w	r2, r2, #22
 8005b78:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	695a      	ldr	r2, [r3, #20]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b88:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d103      	bne.n	8005b9a <HAL_DMA_IRQHandler+0x1da>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d007      	beq.n	8005baa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f022 0208 	bic.w	r2, r2, #8
 8005ba8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bae:	223f      	movs	r2, #63	; 0x3f
 8005bb0:	409a      	lsls	r2, r3
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d07e      	beq.n	8005ccc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	4798      	blx	r3
        }
        return;
 8005bd6:	e079      	b.n	8005ccc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d01d      	beq.n	8005c22 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d10d      	bne.n	8005c10 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d031      	beq.n	8005c60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	4798      	blx	r3
 8005c04:	e02c      	b.n	8005c60 <HAL_DMA_IRQHandler+0x2a0>
 8005c06:	bf00      	nop
 8005c08:	20000000 	.word	0x20000000
 8005c0c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d023      	beq.n	8005c60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	4798      	blx	r3
 8005c20:	e01e      	b.n	8005c60 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d10f      	bne.n	8005c50 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f022 0210 	bic.w	r2, r2, #16
 8005c3e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d003      	beq.n	8005c60 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d032      	beq.n	8005cce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c6c:	f003 0301 	and.w	r3, r3, #1
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d022      	beq.n	8005cba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2205      	movs	r2, #5
 8005c78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f022 0201 	bic.w	r2, r2, #1
 8005c8a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	60bb      	str	r3, [r7, #8]
 8005c92:	697a      	ldr	r2, [r7, #20]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d307      	bcc.n	8005ca8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0301 	and.w	r3, r3, #1
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1f2      	bne.n	8005c8c <HAL_DMA_IRQHandler+0x2cc>
 8005ca6:	e000      	b.n	8005caa <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005ca8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2201      	movs	r2, #1
 8005cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d005      	beq.n	8005cce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	4798      	blx	r3
 8005cca:	e000      	b.n	8005cce <HAL_DMA_IRQHandler+0x30e>
        return;
 8005ccc:	bf00      	nop
    }
  }
}
 8005cce:	3718      	adds	r7, #24
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	607a      	str	r2, [r7, #4]
 8005ce0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005cf0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	683a      	ldr	r2, [r7, #0]
 8005cf8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	2b40      	cmp	r3, #64	; 0x40
 8005d00:	d108      	bne.n	8005d14 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68ba      	ldr	r2, [r7, #8]
 8005d10:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005d12:	e007      	b.n	8005d24 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68ba      	ldr	r2, [r7, #8]
 8005d1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	60da      	str	r2, [r3, #12]
}
 8005d24:	bf00      	nop
 8005d26:	3714      	adds	r7, #20
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	3b10      	subs	r3, #16
 8005d40:	4a14      	ldr	r2, [pc, #80]	; (8005d94 <DMA_CalcBaseAndBitshift+0x64>)
 8005d42:	fba2 2303 	umull	r2, r3, r2, r3
 8005d46:	091b      	lsrs	r3, r3, #4
 8005d48:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005d4a:	4a13      	ldr	r2, [pc, #76]	; (8005d98 <DMA_CalcBaseAndBitshift+0x68>)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	4413      	add	r3, r2
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	461a      	mov	r2, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2b03      	cmp	r3, #3
 8005d5c:	d909      	bls.n	8005d72 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005d66:	f023 0303 	bic.w	r3, r3, #3
 8005d6a:	1d1a      	adds	r2, r3, #4
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	659a      	str	r2, [r3, #88]	; 0x58
 8005d70:	e007      	b.n	8005d82 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005d7a:	f023 0303 	bic.w	r3, r3, #3
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3714      	adds	r7, #20
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	aaaaaaab 	.word	0xaaaaaaab
 8005d98:	080091d4 	.word	0x080091d4

08005d9c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005da4:	2300      	movs	r3, #0
 8005da6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d11f      	bne.n	8005df6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	2b03      	cmp	r3, #3
 8005dba:	d856      	bhi.n	8005e6a <DMA_CheckFifoParam+0xce>
 8005dbc:	a201      	add	r2, pc, #4	; (adr r2, 8005dc4 <DMA_CheckFifoParam+0x28>)
 8005dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc2:	bf00      	nop
 8005dc4:	08005dd5 	.word	0x08005dd5
 8005dc8:	08005de7 	.word	0x08005de7
 8005dcc:	08005dd5 	.word	0x08005dd5
 8005dd0:	08005e6b 	.word	0x08005e6b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d046      	beq.n	8005e6e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005de4:	e043      	b.n	8005e6e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005dee:	d140      	bne.n	8005e72 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005df4:	e03d      	b.n	8005e72 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	699b      	ldr	r3, [r3, #24]
 8005dfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dfe:	d121      	bne.n	8005e44 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	2b03      	cmp	r3, #3
 8005e04:	d837      	bhi.n	8005e76 <DMA_CheckFifoParam+0xda>
 8005e06:	a201      	add	r2, pc, #4	; (adr r2, 8005e0c <DMA_CheckFifoParam+0x70>)
 8005e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e0c:	08005e1d 	.word	0x08005e1d
 8005e10:	08005e23 	.word	0x08005e23
 8005e14:	08005e1d 	.word	0x08005e1d
 8005e18:	08005e35 	.word	0x08005e35
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	73fb      	strb	r3, [r7, #15]
      break;
 8005e20:	e030      	b.n	8005e84 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d025      	beq.n	8005e7a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e32:	e022      	b.n	8005e7a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e38:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005e3c:	d11f      	bne.n	8005e7e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005e42:	e01c      	b.n	8005e7e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d903      	bls.n	8005e52 <DMA_CheckFifoParam+0xb6>
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	2b03      	cmp	r3, #3
 8005e4e:	d003      	beq.n	8005e58 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005e50:	e018      	b.n	8005e84 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	73fb      	strb	r3, [r7, #15]
      break;
 8005e56:	e015      	b.n	8005e84 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d00e      	beq.n	8005e82 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	73fb      	strb	r3, [r7, #15]
      break;
 8005e68:	e00b      	b.n	8005e82 <DMA_CheckFifoParam+0xe6>
      break;
 8005e6a:	bf00      	nop
 8005e6c:	e00a      	b.n	8005e84 <DMA_CheckFifoParam+0xe8>
      break;
 8005e6e:	bf00      	nop
 8005e70:	e008      	b.n	8005e84 <DMA_CheckFifoParam+0xe8>
      break;
 8005e72:	bf00      	nop
 8005e74:	e006      	b.n	8005e84 <DMA_CheckFifoParam+0xe8>
      break;
 8005e76:	bf00      	nop
 8005e78:	e004      	b.n	8005e84 <DMA_CheckFifoParam+0xe8>
      break;
 8005e7a:	bf00      	nop
 8005e7c:	e002      	b.n	8005e84 <DMA_CheckFifoParam+0xe8>
      break;   
 8005e7e:	bf00      	nop
 8005e80:	e000      	b.n	8005e84 <DMA_CheckFifoParam+0xe8>
      break;
 8005e82:	bf00      	nop
    }
  } 
  
  return status; 
 8005e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3714      	adds	r7, #20
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop

08005e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b089      	sub	sp, #36	; 0x24
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005eaa:	2300      	movs	r3, #0
 8005eac:	61fb      	str	r3, [r7, #28]
 8005eae:	e16b      	b.n	8006188 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	697a      	ldr	r2, [r7, #20]
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	f040 815a 	bne.w	8006182 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	f003 0303 	and.w	r3, r3, #3
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d005      	beq.n	8005ee6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d130      	bne.n	8005f48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	005b      	lsls	r3, r3, #1
 8005ef0:	2203      	movs	r2, #3
 8005ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef6:	43db      	mvns	r3, r3
 8005ef8:	69ba      	ldr	r2, [r7, #24]
 8005efa:	4013      	ands	r3, r2
 8005efc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	68da      	ldr	r2, [r3, #12]
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	005b      	lsls	r3, r3, #1
 8005f06:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0a:	69ba      	ldr	r2, [r7, #24]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	69ba      	ldr	r2, [r7, #24]
 8005f14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	fa02 f303 	lsl.w	r3, r2, r3
 8005f24:	43db      	mvns	r3, r3
 8005f26:	69ba      	ldr	r2, [r7, #24]
 8005f28:	4013      	ands	r3, r2
 8005f2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	091b      	lsrs	r3, r3, #4
 8005f32:	f003 0201 	and.w	r2, r3, #1
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	fa02 f303 	lsl.w	r3, r2, r3
 8005f3c:	69ba      	ldr	r2, [r7, #24]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	69ba      	ldr	r2, [r7, #24]
 8005f46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	f003 0303 	and.w	r3, r3, #3
 8005f50:	2b03      	cmp	r3, #3
 8005f52:	d017      	beq.n	8005f84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	005b      	lsls	r3, r3, #1
 8005f5e:	2203      	movs	r2, #3
 8005f60:	fa02 f303 	lsl.w	r3, r2, r3
 8005f64:	43db      	mvns	r3, r3
 8005f66:	69ba      	ldr	r2, [r7, #24]
 8005f68:	4013      	ands	r3, r2
 8005f6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	689a      	ldr	r2, [r3, #8]
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	005b      	lsls	r3, r3, #1
 8005f74:	fa02 f303 	lsl.w	r3, r2, r3
 8005f78:	69ba      	ldr	r2, [r7, #24]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	69ba      	ldr	r2, [r7, #24]
 8005f82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	f003 0303 	and.w	r3, r3, #3
 8005f8c:	2b02      	cmp	r3, #2
 8005f8e:	d123      	bne.n	8005fd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	08da      	lsrs	r2, r3, #3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	3208      	adds	r2, #8
 8005f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	f003 0307 	and.w	r3, r3, #7
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	220f      	movs	r2, #15
 8005fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fac:	43db      	mvns	r3, r3
 8005fae:	69ba      	ldr	r2, [r7, #24]
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	691a      	ldr	r2, [r3, #16]
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	f003 0307 	and.w	r3, r3, #7
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc4:	69ba      	ldr	r2, [r7, #24]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	08da      	lsrs	r2, r3, #3
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	3208      	adds	r2, #8
 8005fd2:	69b9      	ldr	r1, [r7, #24]
 8005fd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	005b      	lsls	r3, r3, #1
 8005fe2:	2203      	movs	r2, #3
 8005fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe8:	43db      	mvns	r3, r3
 8005fea:	69ba      	ldr	r2, [r7, #24]
 8005fec:	4013      	ands	r3, r2
 8005fee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	f003 0203 	and.w	r2, r3, #3
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	005b      	lsls	r3, r3, #1
 8005ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8006000:	69ba      	ldr	r2, [r7, #24]
 8006002:	4313      	orrs	r3, r2
 8006004:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	69ba      	ldr	r2, [r7, #24]
 800600a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006014:	2b00      	cmp	r3, #0
 8006016:	f000 80b4 	beq.w	8006182 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800601a:	2300      	movs	r3, #0
 800601c:	60fb      	str	r3, [r7, #12]
 800601e:	4b60      	ldr	r3, [pc, #384]	; (80061a0 <HAL_GPIO_Init+0x30c>)
 8006020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006022:	4a5f      	ldr	r2, [pc, #380]	; (80061a0 <HAL_GPIO_Init+0x30c>)
 8006024:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006028:	6453      	str	r3, [r2, #68]	; 0x44
 800602a:	4b5d      	ldr	r3, [pc, #372]	; (80061a0 <HAL_GPIO_Init+0x30c>)
 800602c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800602e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006032:	60fb      	str	r3, [r7, #12]
 8006034:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006036:	4a5b      	ldr	r2, [pc, #364]	; (80061a4 <HAL_GPIO_Init+0x310>)
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	089b      	lsrs	r3, r3, #2
 800603c:	3302      	adds	r3, #2
 800603e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006042:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	f003 0303 	and.w	r3, r3, #3
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	220f      	movs	r2, #15
 800604e:	fa02 f303 	lsl.w	r3, r2, r3
 8006052:	43db      	mvns	r3, r3
 8006054:	69ba      	ldr	r2, [r7, #24]
 8006056:	4013      	ands	r3, r2
 8006058:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a52      	ldr	r2, [pc, #328]	; (80061a8 <HAL_GPIO_Init+0x314>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d02b      	beq.n	80060ba <HAL_GPIO_Init+0x226>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a51      	ldr	r2, [pc, #324]	; (80061ac <HAL_GPIO_Init+0x318>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d025      	beq.n	80060b6 <HAL_GPIO_Init+0x222>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a50      	ldr	r2, [pc, #320]	; (80061b0 <HAL_GPIO_Init+0x31c>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d01f      	beq.n	80060b2 <HAL_GPIO_Init+0x21e>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a4f      	ldr	r2, [pc, #316]	; (80061b4 <HAL_GPIO_Init+0x320>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d019      	beq.n	80060ae <HAL_GPIO_Init+0x21a>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a4e      	ldr	r2, [pc, #312]	; (80061b8 <HAL_GPIO_Init+0x324>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d013      	beq.n	80060aa <HAL_GPIO_Init+0x216>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a4d      	ldr	r2, [pc, #308]	; (80061bc <HAL_GPIO_Init+0x328>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d00d      	beq.n	80060a6 <HAL_GPIO_Init+0x212>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a4c      	ldr	r2, [pc, #304]	; (80061c0 <HAL_GPIO_Init+0x32c>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d007      	beq.n	80060a2 <HAL_GPIO_Init+0x20e>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a4b      	ldr	r2, [pc, #300]	; (80061c4 <HAL_GPIO_Init+0x330>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d101      	bne.n	800609e <HAL_GPIO_Init+0x20a>
 800609a:	2307      	movs	r3, #7
 800609c:	e00e      	b.n	80060bc <HAL_GPIO_Init+0x228>
 800609e:	2308      	movs	r3, #8
 80060a0:	e00c      	b.n	80060bc <HAL_GPIO_Init+0x228>
 80060a2:	2306      	movs	r3, #6
 80060a4:	e00a      	b.n	80060bc <HAL_GPIO_Init+0x228>
 80060a6:	2305      	movs	r3, #5
 80060a8:	e008      	b.n	80060bc <HAL_GPIO_Init+0x228>
 80060aa:	2304      	movs	r3, #4
 80060ac:	e006      	b.n	80060bc <HAL_GPIO_Init+0x228>
 80060ae:	2303      	movs	r3, #3
 80060b0:	e004      	b.n	80060bc <HAL_GPIO_Init+0x228>
 80060b2:	2302      	movs	r3, #2
 80060b4:	e002      	b.n	80060bc <HAL_GPIO_Init+0x228>
 80060b6:	2301      	movs	r3, #1
 80060b8:	e000      	b.n	80060bc <HAL_GPIO_Init+0x228>
 80060ba:	2300      	movs	r3, #0
 80060bc:	69fa      	ldr	r2, [r7, #28]
 80060be:	f002 0203 	and.w	r2, r2, #3
 80060c2:	0092      	lsls	r2, r2, #2
 80060c4:	4093      	lsls	r3, r2
 80060c6:	69ba      	ldr	r2, [r7, #24]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80060cc:	4935      	ldr	r1, [pc, #212]	; (80061a4 <HAL_GPIO_Init+0x310>)
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	089b      	lsrs	r3, r3, #2
 80060d2:	3302      	adds	r3, #2
 80060d4:	69ba      	ldr	r2, [r7, #24]
 80060d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80060da:	4b3b      	ldr	r3, [pc, #236]	; (80061c8 <HAL_GPIO_Init+0x334>)
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	43db      	mvns	r3, r3
 80060e4:	69ba      	ldr	r2, [r7, #24]
 80060e6:	4013      	ands	r3, r2
 80060e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d003      	beq.n	80060fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80060f6:	69ba      	ldr	r2, [r7, #24]
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80060fe:	4a32      	ldr	r2, [pc, #200]	; (80061c8 <HAL_GPIO_Init+0x334>)
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006104:	4b30      	ldr	r3, [pc, #192]	; (80061c8 <HAL_GPIO_Init+0x334>)
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	43db      	mvns	r3, r3
 800610e:	69ba      	ldr	r2, [r7, #24]
 8006110:	4013      	ands	r3, r2
 8006112:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800611c:	2b00      	cmp	r3, #0
 800611e:	d003      	beq.n	8006128 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006120:	69ba      	ldr	r2, [r7, #24]
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	4313      	orrs	r3, r2
 8006126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006128:	4a27      	ldr	r2, [pc, #156]	; (80061c8 <HAL_GPIO_Init+0x334>)
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800612e:	4b26      	ldr	r3, [pc, #152]	; (80061c8 <HAL_GPIO_Init+0x334>)
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	43db      	mvns	r3, r3
 8006138:	69ba      	ldr	r2, [r7, #24]
 800613a:	4013      	ands	r3, r2
 800613c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006146:	2b00      	cmp	r3, #0
 8006148:	d003      	beq.n	8006152 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800614a:	69ba      	ldr	r2, [r7, #24]
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	4313      	orrs	r3, r2
 8006150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006152:	4a1d      	ldr	r2, [pc, #116]	; (80061c8 <HAL_GPIO_Init+0x334>)
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006158:	4b1b      	ldr	r3, [pc, #108]	; (80061c8 <HAL_GPIO_Init+0x334>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	43db      	mvns	r3, r3
 8006162:	69ba      	ldr	r2, [r7, #24]
 8006164:	4013      	ands	r3, r2
 8006166:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006170:	2b00      	cmp	r3, #0
 8006172:	d003      	beq.n	800617c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006174:	69ba      	ldr	r2, [r7, #24]
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	4313      	orrs	r3, r2
 800617a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800617c:	4a12      	ldr	r2, [pc, #72]	; (80061c8 <HAL_GPIO_Init+0x334>)
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	3301      	adds	r3, #1
 8006186:	61fb      	str	r3, [r7, #28]
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	2b0f      	cmp	r3, #15
 800618c:	f67f ae90 	bls.w	8005eb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006190:	bf00      	nop
 8006192:	bf00      	nop
 8006194:	3724      	adds	r7, #36	; 0x24
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
 800619e:	bf00      	nop
 80061a0:	40023800 	.word	0x40023800
 80061a4:	40013800 	.word	0x40013800
 80061a8:	40020000 	.word	0x40020000
 80061ac:	40020400 	.word	0x40020400
 80061b0:	40020800 	.word	0x40020800
 80061b4:	40020c00 	.word	0x40020c00
 80061b8:	40021000 	.word	0x40021000
 80061bc:	40021400 	.word	0x40021400
 80061c0:	40021800 	.word	0x40021800
 80061c4:	40021c00 	.word	0x40021c00
 80061c8:	40013c00 	.word	0x40013c00

080061cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	460b      	mov	r3, r1
 80061d6:	807b      	strh	r3, [r7, #2]
 80061d8:	4613      	mov	r3, r2
 80061da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80061dc:	787b      	ldrb	r3, [r7, #1]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d003      	beq.n	80061ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80061e2:	887a      	ldrh	r2, [r7, #2]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80061e8:	e003      	b.n	80061f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80061ea:	887b      	ldrh	r3, [r7, #2]
 80061ec:	041a      	lsls	r2, r3, #16
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	619a      	str	r2, [r3, #24]
}
 80061f2:	bf00      	nop
 80061f4:	370c      	adds	r7, #12
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr
	...

08006200 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b086      	sub	sp, #24
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d101      	bne.n	8006212 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	e267      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 0301 	and.w	r3, r3, #1
 800621a:	2b00      	cmp	r3, #0
 800621c:	d075      	beq.n	800630a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800621e:	4b88      	ldr	r3, [pc, #544]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f003 030c 	and.w	r3, r3, #12
 8006226:	2b04      	cmp	r3, #4
 8006228:	d00c      	beq.n	8006244 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800622a:	4b85      	ldr	r3, [pc, #532]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006232:	2b08      	cmp	r3, #8
 8006234:	d112      	bne.n	800625c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006236:	4b82      	ldr	r3, [pc, #520]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800623e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006242:	d10b      	bne.n	800625c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006244:	4b7e      	ldr	r3, [pc, #504]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800624c:	2b00      	cmp	r3, #0
 800624e:	d05b      	beq.n	8006308 <HAL_RCC_OscConfig+0x108>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d157      	bne.n	8006308 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	e242      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006264:	d106      	bne.n	8006274 <HAL_RCC_OscConfig+0x74>
 8006266:	4b76      	ldr	r3, [pc, #472]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a75      	ldr	r2, [pc, #468]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 800626c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006270:	6013      	str	r3, [r2, #0]
 8006272:	e01d      	b.n	80062b0 <HAL_RCC_OscConfig+0xb0>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800627c:	d10c      	bne.n	8006298 <HAL_RCC_OscConfig+0x98>
 800627e:	4b70      	ldr	r3, [pc, #448]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a6f      	ldr	r2, [pc, #444]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006284:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006288:	6013      	str	r3, [r2, #0]
 800628a:	4b6d      	ldr	r3, [pc, #436]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a6c      	ldr	r2, [pc, #432]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006294:	6013      	str	r3, [r2, #0]
 8006296:	e00b      	b.n	80062b0 <HAL_RCC_OscConfig+0xb0>
 8006298:	4b69      	ldr	r3, [pc, #420]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a68      	ldr	r2, [pc, #416]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 800629e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062a2:	6013      	str	r3, [r2, #0]
 80062a4:	4b66      	ldr	r3, [pc, #408]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a65      	ldr	r2, [pc, #404]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 80062aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d013      	beq.n	80062e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062b8:	f7ff f8a8 	bl	800540c <HAL_GetTick>
 80062bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062be:	e008      	b.n	80062d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062c0:	f7ff f8a4 	bl	800540c <HAL_GetTick>
 80062c4:	4602      	mov	r2, r0
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	2b64      	cmp	r3, #100	; 0x64
 80062cc:	d901      	bls.n	80062d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e207      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062d2:	4b5b      	ldr	r3, [pc, #364]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d0f0      	beq.n	80062c0 <HAL_RCC_OscConfig+0xc0>
 80062de:	e014      	b.n	800630a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062e0:	f7ff f894 	bl	800540c <HAL_GetTick>
 80062e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062e6:	e008      	b.n	80062fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062e8:	f7ff f890 	bl	800540c <HAL_GetTick>
 80062ec:	4602      	mov	r2, r0
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	2b64      	cmp	r3, #100	; 0x64
 80062f4:	d901      	bls.n	80062fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80062f6:	2303      	movs	r3, #3
 80062f8:	e1f3      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062fa:	4b51      	ldr	r3, [pc, #324]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1f0      	bne.n	80062e8 <HAL_RCC_OscConfig+0xe8>
 8006306:	e000      	b.n	800630a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006308:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0302 	and.w	r3, r3, #2
 8006312:	2b00      	cmp	r3, #0
 8006314:	d063      	beq.n	80063de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006316:	4b4a      	ldr	r3, [pc, #296]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	f003 030c 	and.w	r3, r3, #12
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00b      	beq.n	800633a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006322:	4b47      	ldr	r3, [pc, #284]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800632a:	2b08      	cmp	r3, #8
 800632c:	d11c      	bne.n	8006368 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800632e:	4b44      	ldr	r3, [pc, #272]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006336:	2b00      	cmp	r3, #0
 8006338:	d116      	bne.n	8006368 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800633a:	4b41      	ldr	r3, [pc, #260]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f003 0302 	and.w	r3, r3, #2
 8006342:	2b00      	cmp	r3, #0
 8006344:	d005      	beq.n	8006352 <HAL_RCC_OscConfig+0x152>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	2b01      	cmp	r3, #1
 800634c:	d001      	beq.n	8006352 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e1c7      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006352:	4b3b      	ldr	r3, [pc, #236]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	00db      	lsls	r3, r3, #3
 8006360:	4937      	ldr	r1, [pc, #220]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006362:	4313      	orrs	r3, r2
 8006364:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006366:	e03a      	b.n	80063de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d020      	beq.n	80063b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006370:	4b34      	ldr	r3, [pc, #208]	; (8006444 <HAL_RCC_OscConfig+0x244>)
 8006372:	2201      	movs	r2, #1
 8006374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006376:	f7ff f849 	bl	800540c <HAL_GetTick>
 800637a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800637c:	e008      	b.n	8006390 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800637e:	f7ff f845 	bl	800540c <HAL_GetTick>
 8006382:	4602      	mov	r2, r0
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	2b02      	cmp	r3, #2
 800638a:	d901      	bls.n	8006390 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800638c:	2303      	movs	r3, #3
 800638e:	e1a8      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006390:	4b2b      	ldr	r3, [pc, #172]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0302 	and.w	r3, r3, #2
 8006398:	2b00      	cmp	r3, #0
 800639a:	d0f0      	beq.n	800637e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800639c:	4b28      	ldr	r3, [pc, #160]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	00db      	lsls	r3, r3, #3
 80063aa:	4925      	ldr	r1, [pc, #148]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 80063ac:	4313      	orrs	r3, r2
 80063ae:	600b      	str	r3, [r1, #0]
 80063b0:	e015      	b.n	80063de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063b2:	4b24      	ldr	r3, [pc, #144]	; (8006444 <HAL_RCC_OscConfig+0x244>)
 80063b4:	2200      	movs	r2, #0
 80063b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063b8:	f7ff f828 	bl	800540c <HAL_GetTick>
 80063bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063be:	e008      	b.n	80063d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063c0:	f7ff f824 	bl	800540c <HAL_GetTick>
 80063c4:	4602      	mov	r2, r0
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d901      	bls.n	80063d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80063ce:	2303      	movs	r3, #3
 80063d0:	e187      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063d2:	4b1b      	ldr	r3, [pc, #108]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 0302 	and.w	r3, r3, #2
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d1f0      	bne.n	80063c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 0308 	and.w	r3, r3, #8
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d036      	beq.n	8006458 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d016      	beq.n	8006420 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063f2:	4b15      	ldr	r3, [pc, #84]	; (8006448 <HAL_RCC_OscConfig+0x248>)
 80063f4:	2201      	movs	r2, #1
 80063f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063f8:	f7ff f808 	bl	800540c <HAL_GetTick>
 80063fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063fe:	e008      	b.n	8006412 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006400:	f7ff f804 	bl	800540c <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	2b02      	cmp	r3, #2
 800640c:	d901      	bls.n	8006412 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800640e:	2303      	movs	r3, #3
 8006410:	e167      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006412:	4b0b      	ldr	r3, [pc, #44]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006416:	f003 0302 	and.w	r3, r3, #2
 800641a:	2b00      	cmp	r3, #0
 800641c:	d0f0      	beq.n	8006400 <HAL_RCC_OscConfig+0x200>
 800641e:	e01b      	b.n	8006458 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006420:	4b09      	ldr	r3, [pc, #36]	; (8006448 <HAL_RCC_OscConfig+0x248>)
 8006422:	2200      	movs	r2, #0
 8006424:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006426:	f7fe fff1 	bl	800540c <HAL_GetTick>
 800642a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800642c:	e00e      	b.n	800644c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800642e:	f7fe ffed 	bl	800540c <HAL_GetTick>
 8006432:	4602      	mov	r2, r0
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	1ad3      	subs	r3, r2, r3
 8006438:	2b02      	cmp	r3, #2
 800643a:	d907      	bls.n	800644c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800643c:	2303      	movs	r3, #3
 800643e:	e150      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
 8006440:	40023800 	.word	0x40023800
 8006444:	42470000 	.word	0x42470000
 8006448:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800644c:	4b88      	ldr	r3, [pc, #544]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 800644e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006450:	f003 0302 	and.w	r3, r3, #2
 8006454:	2b00      	cmp	r3, #0
 8006456:	d1ea      	bne.n	800642e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 0304 	and.w	r3, r3, #4
 8006460:	2b00      	cmp	r3, #0
 8006462:	f000 8097 	beq.w	8006594 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006466:	2300      	movs	r3, #0
 8006468:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800646a:	4b81      	ldr	r3, [pc, #516]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 800646c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006472:	2b00      	cmp	r3, #0
 8006474:	d10f      	bne.n	8006496 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006476:	2300      	movs	r3, #0
 8006478:	60bb      	str	r3, [r7, #8]
 800647a:	4b7d      	ldr	r3, [pc, #500]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 800647c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647e:	4a7c      	ldr	r2, [pc, #496]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 8006480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006484:	6413      	str	r3, [r2, #64]	; 0x40
 8006486:	4b7a      	ldr	r3, [pc, #488]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 8006488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800648e:	60bb      	str	r3, [r7, #8]
 8006490:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006492:	2301      	movs	r3, #1
 8006494:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006496:	4b77      	ldr	r3, [pc, #476]	; (8006674 <HAL_RCC_OscConfig+0x474>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d118      	bne.n	80064d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80064a2:	4b74      	ldr	r3, [pc, #464]	; (8006674 <HAL_RCC_OscConfig+0x474>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a73      	ldr	r2, [pc, #460]	; (8006674 <HAL_RCC_OscConfig+0x474>)
 80064a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064ae:	f7fe ffad 	bl	800540c <HAL_GetTick>
 80064b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064b4:	e008      	b.n	80064c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064b6:	f7fe ffa9 	bl	800540c <HAL_GetTick>
 80064ba:	4602      	mov	r2, r0
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	1ad3      	subs	r3, r2, r3
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d901      	bls.n	80064c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80064c4:	2303      	movs	r3, #3
 80064c6:	e10c      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064c8:	4b6a      	ldr	r3, [pc, #424]	; (8006674 <HAL_RCC_OscConfig+0x474>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d0f0      	beq.n	80064b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d106      	bne.n	80064ea <HAL_RCC_OscConfig+0x2ea>
 80064dc:	4b64      	ldr	r3, [pc, #400]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 80064de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064e0:	4a63      	ldr	r2, [pc, #396]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 80064e2:	f043 0301 	orr.w	r3, r3, #1
 80064e6:	6713      	str	r3, [r2, #112]	; 0x70
 80064e8:	e01c      	b.n	8006524 <HAL_RCC_OscConfig+0x324>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	2b05      	cmp	r3, #5
 80064f0:	d10c      	bne.n	800650c <HAL_RCC_OscConfig+0x30c>
 80064f2:	4b5f      	ldr	r3, [pc, #380]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 80064f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064f6:	4a5e      	ldr	r2, [pc, #376]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 80064f8:	f043 0304 	orr.w	r3, r3, #4
 80064fc:	6713      	str	r3, [r2, #112]	; 0x70
 80064fe:	4b5c      	ldr	r3, [pc, #368]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 8006500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006502:	4a5b      	ldr	r2, [pc, #364]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 8006504:	f043 0301 	orr.w	r3, r3, #1
 8006508:	6713      	str	r3, [r2, #112]	; 0x70
 800650a:	e00b      	b.n	8006524 <HAL_RCC_OscConfig+0x324>
 800650c:	4b58      	ldr	r3, [pc, #352]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 800650e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006510:	4a57      	ldr	r2, [pc, #348]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 8006512:	f023 0301 	bic.w	r3, r3, #1
 8006516:	6713      	str	r3, [r2, #112]	; 0x70
 8006518:	4b55      	ldr	r3, [pc, #340]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 800651a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800651c:	4a54      	ldr	r2, [pc, #336]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 800651e:	f023 0304 	bic.w	r3, r3, #4
 8006522:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d015      	beq.n	8006558 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800652c:	f7fe ff6e 	bl	800540c <HAL_GetTick>
 8006530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006532:	e00a      	b.n	800654a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006534:	f7fe ff6a 	bl	800540c <HAL_GetTick>
 8006538:	4602      	mov	r2, r0
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006542:	4293      	cmp	r3, r2
 8006544:	d901      	bls.n	800654a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006546:	2303      	movs	r3, #3
 8006548:	e0cb      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800654a:	4b49      	ldr	r3, [pc, #292]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 800654c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800654e:	f003 0302 	and.w	r3, r3, #2
 8006552:	2b00      	cmp	r3, #0
 8006554:	d0ee      	beq.n	8006534 <HAL_RCC_OscConfig+0x334>
 8006556:	e014      	b.n	8006582 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006558:	f7fe ff58 	bl	800540c <HAL_GetTick>
 800655c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800655e:	e00a      	b.n	8006576 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006560:	f7fe ff54 	bl	800540c <HAL_GetTick>
 8006564:	4602      	mov	r2, r0
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	f241 3288 	movw	r2, #5000	; 0x1388
 800656e:	4293      	cmp	r3, r2
 8006570:	d901      	bls.n	8006576 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006572:	2303      	movs	r3, #3
 8006574:	e0b5      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006576:	4b3e      	ldr	r3, [pc, #248]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 8006578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800657a:	f003 0302 	and.w	r3, r3, #2
 800657e:	2b00      	cmp	r3, #0
 8006580:	d1ee      	bne.n	8006560 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006582:	7dfb      	ldrb	r3, [r7, #23]
 8006584:	2b01      	cmp	r3, #1
 8006586:	d105      	bne.n	8006594 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006588:	4b39      	ldr	r3, [pc, #228]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 800658a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658c:	4a38      	ldr	r2, [pc, #224]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 800658e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006592:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	699b      	ldr	r3, [r3, #24]
 8006598:	2b00      	cmp	r3, #0
 800659a:	f000 80a1 	beq.w	80066e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800659e:	4b34      	ldr	r3, [pc, #208]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	f003 030c 	and.w	r3, r3, #12
 80065a6:	2b08      	cmp	r3, #8
 80065a8:	d05c      	beq.n	8006664 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	699b      	ldr	r3, [r3, #24]
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d141      	bne.n	8006636 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065b2:	4b31      	ldr	r3, [pc, #196]	; (8006678 <HAL_RCC_OscConfig+0x478>)
 80065b4:	2200      	movs	r2, #0
 80065b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065b8:	f7fe ff28 	bl	800540c <HAL_GetTick>
 80065bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065be:	e008      	b.n	80065d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065c0:	f7fe ff24 	bl	800540c <HAL_GetTick>
 80065c4:	4602      	mov	r2, r0
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	1ad3      	subs	r3, r2, r3
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d901      	bls.n	80065d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e087      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065d2:	4b27      	ldr	r3, [pc, #156]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d1f0      	bne.n	80065c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	69da      	ldr	r2, [r3, #28]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a1b      	ldr	r3, [r3, #32]
 80065e6:	431a      	orrs	r2, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ec:	019b      	lsls	r3, r3, #6
 80065ee:	431a      	orrs	r2, r3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f4:	085b      	lsrs	r3, r3, #1
 80065f6:	3b01      	subs	r3, #1
 80065f8:	041b      	lsls	r3, r3, #16
 80065fa:	431a      	orrs	r2, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006600:	061b      	lsls	r3, r3, #24
 8006602:	491b      	ldr	r1, [pc, #108]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 8006604:	4313      	orrs	r3, r2
 8006606:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006608:	4b1b      	ldr	r3, [pc, #108]	; (8006678 <HAL_RCC_OscConfig+0x478>)
 800660a:	2201      	movs	r2, #1
 800660c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800660e:	f7fe fefd 	bl	800540c <HAL_GetTick>
 8006612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006614:	e008      	b.n	8006628 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006616:	f7fe fef9 	bl	800540c <HAL_GetTick>
 800661a:	4602      	mov	r2, r0
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	2b02      	cmp	r3, #2
 8006622:	d901      	bls.n	8006628 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006624:	2303      	movs	r3, #3
 8006626:	e05c      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006628:	4b11      	ldr	r3, [pc, #68]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006630:	2b00      	cmp	r3, #0
 8006632:	d0f0      	beq.n	8006616 <HAL_RCC_OscConfig+0x416>
 8006634:	e054      	b.n	80066e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006636:	4b10      	ldr	r3, [pc, #64]	; (8006678 <HAL_RCC_OscConfig+0x478>)
 8006638:	2200      	movs	r2, #0
 800663a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800663c:	f7fe fee6 	bl	800540c <HAL_GetTick>
 8006640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006642:	e008      	b.n	8006656 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006644:	f7fe fee2 	bl	800540c <HAL_GetTick>
 8006648:	4602      	mov	r2, r0
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	2b02      	cmp	r3, #2
 8006650:	d901      	bls.n	8006656 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006652:	2303      	movs	r3, #3
 8006654:	e045      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006656:	4b06      	ldr	r3, [pc, #24]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800665e:	2b00      	cmp	r3, #0
 8006660:	d1f0      	bne.n	8006644 <HAL_RCC_OscConfig+0x444>
 8006662:	e03d      	b.n	80066e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	699b      	ldr	r3, [r3, #24]
 8006668:	2b01      	cmp	r3, #1
 800666a:	d107      	bne.n	800667c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	e038      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
 8006670:	40023800 	.word	0x40023800
 8006674:	40007000 	.word	0x40007000
 8006678:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800667c:	4b1b      	ldr	r3, [pc, #108]	; (80066ec <HAL_RCC_OscConfig+0x4ec>)
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	2b01      	cmp	r3, #1
 8006688:	d028      	beq.n	80066dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006694:	429a      	cmp	r2, r3
 8006696:	d121      	bne.n	80066dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d11a      	bne.n	80066dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80066ac:	4013      	ands	r3, r2
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80066b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d111      	bne.n	80066dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c2:	085b      	lsrs	r3, r3, #1
 80066c4:	3b01      	subs	r3, #1
 80066c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d107      	bne.n	80066dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066d8:	429a      	cmp	r2, r3
 80066da:	d001      	beq.n	80066e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e000      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3718      	adds	r7, #24
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	40023800 	.word	0x40023800

080066f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d101      	bne.n	8006704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e0cc      	b.n	800689e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006704:	4b68      	ldr	r3, [pc, #416]	; (80068a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 0307 	and.w	r3, r3, #7
 800670c:	683a      	ldr	r2, [r7, #0]
 800670e:	429a      	cmp	r2, r3
 8006710:	d90c      	bls.n	800672c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006712:	4b65      	ldr	r3, [pc, #404]	; (80068a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006714:	683a      	ldr	r2, [r7, #0]
 8006716:	b2d2      	uxtb	r2, r2
 8006718:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800671a:	4b63      	ldr	r3, [pc, #396]	; (80068a8 <HAL_RCC_ClockConfig+0x1b8>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 0307 	and.w	r3, r3, #7
 8006722:	683a      	ldr	r2, [r7, #0]
 8006724:	429a      	cmp	r2, r3
 8006726:	d001      	beq.n	800672c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e0b8      	b.n	800689e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 0302 	and.w	r3, r3, #2
 8006734:	2b00      	cmp	r3, #0
 8006736:	d020      	beq.n	800677a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 0304 	and.w	r3, r3, #4
 8006740:	2b00      	cmp	r3, #0
 8006742:	d005      	beq.n	8006750 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006744:	4b59      	ldr	r3, [pc, #356]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	4a58      	ldr	r2, [pc, #352]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 800674a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800674e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 0308 	and.w	r3, r3, #8
 8006758:	2b00      	cmp	r3, #0
 800675a:	d005      	beq.n	8006768 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800675c:	4b53      	ldr	r3, [pc, #332]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	4a52      	ldr	r2, [pc, #328]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 8006762:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006766:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006768:	4b50      	ldr	r3, [pc, #320]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	494d      	ldr	r1, [pc, #308]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 8006776:	4313      	orrs	r3, r2
 8006778:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 0301 	and.w	r3, r3, #1
 8006782:	2b00      	cmp	r3, #0
 8006784:	d044      	beq.n	8006810 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	2b01      	cmp	r3, #1
 800678c:	d107      	bne.n	800679e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800678e:	4b47      	ldr	r3, [pc, #284]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006796:	2b00      	cmp	r3, #0
 8006798:	d119      	bne.n	80067ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e07f      	b.n	800689e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	2b02      	cmp	r3, #2
 80067a4:	d003      	beq.n	80067ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067aa:	2b03      	cmp	r3, #3
 80067ac:	d107      	bne.n	80067be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067ae:	4b3f      	ldr	r3, [pc, #252]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d109      	bne.n	80067ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e06f      	b.n	800689e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067be:	4b3b      	ldr	r3, [pc, #236]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0302 	and.w	r3, r3, #2
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d101      	bne.n	80067ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e067      	b.n	800689e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067ce:	4b37      	ldr	r3, [pc, #220]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	f023 0203 	bic.w	r2, r3, #3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	4934      	ldr	r1, [pc, #208]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 80067dc:	4313      	orrs	r3, r2
 80067de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067e0:	f7fe fe14 	bl	800540c <HAL_GetTick>
 80067e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067e6:	e00a      	b.n	80067fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067e8:	f7fe fe10 	bl	800540c <HAL_GetTick>
 80067ec:	4602      	mov	r2, r0
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d901      	bls.n	80067fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e04f      	b.n	800689e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067fe:	4b2b      	ldr	r3, [pc, #172]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	f003 020c 	and.w	r2, r3, #12
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	429a      	cmp	r2, r3
 800680e:	d1eb      	bne.n	80067e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006810:	4b25      	ldr	r3, [pc, #148]	; (80068a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 0307 	and.w	r3, r3, #7
 8006818:	683a      	ldr	r2, [r7, #0]
 800681a:	429a      	cmp	r2, r3
 800681c:	d20c      	bcs.n	8006838 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800681e:	4b22      	ldr	r3, [pc, #136]	; (80068a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006820:	683a      	ldr	r2, [r7, #0]
 8006822:	b2d2      	uxtb	r2, r2
 8006824:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006826:	4b20      	ldr	r3, [pc, #128]	; (80068a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 0307 	and.w	r3, r3, #7
 800682e:	683a      	ldr	r2, [r7, #0]
 8006830:	429a      	cmp	r2, r3
 8006832:	d001      	beq.n	8006838 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e032      	b.n	800689e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0304 	and.w	r3, r3, #4
 8006840:	2b00      	cmp	r3, #0
 8006842:	d008      	beq.n	8006856 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006844:	4b19      	ldr	r3, [pc, #100]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	4916      	ldr	r1, [pc, #88]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 8006852:	4313      	orrs	r3, r2
 8006854:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 0308 	and.w	r3, r3, #8
 800685e:	2b00      	cmp	r3, #0
 8006860:	d009      	beq.n	8006876 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006862:	4b12      	ldr	r3, [pc, #72]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	00db      	lsls	r3, r3, #3
 8006870:	490e      	ldr	r1, [pc, #56]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 8006872:	4313      	orrs	r3, r2
 8006874:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006876:	f000 f821 	bl	80068bc <HAL_RCC_GetSysClockFreq>
 800687a:	4602      	mov	r2, r0
 800687c:	4b0b      	ldr	r3, [pc, #44]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	091b      	lsrs	r3, r3, #4
 8006882:	f003 030f 	and.w	r3, r3, #15
 8006886:	490a      	ldr	r1, [pc, #40]	; (80068b0 <HAL_RCC_ClockConfig+0x1c0>)
 8006888:	5ccb      	ldrb	r3, [r1, r3]
 800688a:	fa22 f303 	lsr.w	r3, r2, r3
 800688e:	4a09      	ldr	r2, [pc, #36]	; (80068b4 <HAL_RCC_ClockConfig+0x1c4>)
 8006890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006892:	4b09      	ldr	r3, [pc, #36]	; (80068b8 <HAL_RCC_ClockConfig+0x1c8>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4618      	mov	r0, r3
 8006898:	f7fe fd74 	bl	8005384 <HAL_InitTick>

  return HAL_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	40023c00 	.word	0x40023c00
 80068ac:	40023800 	.word	0x40023800
 80068b0:	080091bc 	.word	0x080091bc
 80068b4:	20000000 	.word	0x20000000
 80068b8:	20000004 	.word	0x20000004

080068bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068c0:	b094      	sub	sp, #80	; 0x50
 80068c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80068c4:	2300      	movs	r3, #0
 80068c6:	647b      	str	r3, [r7, #68]	; 0x44
 80068c8:	2300      	movs	r3, #0
 80068ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068cc:	2300      	movs	r3, #0
 80068ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80068d0:	2300      	movs	r3, #0
 80068d2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80068d4:	4b79      	ldr	r3, [pc, #484]	; (8006abc <HAL_RCC_GetSysClockFreq+0x200>)
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	f003 030c 	and.w	r3, r3, #12
 80068dc:	2b08      	cmp	r3, #8
 80068de:	d00d      	beq.n	80068fc <HAL_RCC_GetSysClockFreq+0x40>
 80068e0:	2b08      	cmp	r3, #8
 80068e2:	f200 80e1 	bhi.w	8006aa8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d002      	beq.n	80068f0 <HAL_RCC_GetSysClockFreq+0x34>
 80068ea:	2b04      	cmp	r3, #4
 80068ec:	d003      	beq.n	80068f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80068ee:	e0db      	b.n	8006aa8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80068f0:	4b73      	ldr	r3, [pc, #460]	; (8006ac0 <HAL_RCC_GetSysClockFreq+0x204>)
 80068f2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80068f4:	e0db      	b.n	8006aae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80068f6:	4b73      	ldr	r3, [pc, #460]	; (8006ac4 <HAL_RCC_GetSysClockFreq+0x208>)
 80068f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80068fa:	e0d8      	b.n	8006aae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80068fc:	4b6f      	ldr	r3, [pc, #444]	; (8006abc <HAL_RCC_GetSysClockFreq+0x200>)
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006904:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006906:	4b6d      	ldr	r3, [pc, #436]	; (8006abc <HAL_RCC_GetSysClockFreq+0x200>)
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d063      	beq.n	80069da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006912:	4b6a      	ldr	r3, [pc, #424]	; (8006abc <HAL_RCC_GetSysClockFreq+0x200>)
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	099b      	lsrs	r3, r3, #6
 8006918:	2200      	movs	r2, #0
 800691a:	63bb      	str	r3, [r7, #56]	; 0x38
 800691c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800691e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006924:	633b      	str	r3, [r7, #48]	; 0x30
 8006926:	2300      	movs	r3, #0
 8006928:	637b      	str	r3, [r7, #52]	; 0x34
 800692a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800692e:	4622      	mov	r2, r4
 8006930:	462b      	mov	r3, r5
 8006932:	f04f 0000 	mov.w	r0, #0
 8006936:	f04f 0100 	mov.w	r1, #0
 800693a:	0159      	lsls	r1, r3, #5
 800693c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006940:	0150      	lsls	r0, r2, #5
 8006942:	4602      	mov	r2, r0
 8006944:	460b      	mov	r3, r1
 8006946:	4621      	mov	r1, r4
 8006948:	1a51      	subs	r1, r2, r1
 800694a:	6139      	str	r1, [r7, #16]
 800694c:	4629      	mov	r1, r5
 800694e:	eb63 0301 	sbc.w	r3, r3, r1
 8006952:	617b      	str	r3, [r7, #20]
 8006954:	f04f 0200 	mov.w	r2, #0
 8006958:	f04f 0300 	mov.w	r3, #0
 800695c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006960:	4659      	mov	r1, fp
 8006962:	018b      	lsls	r3, r1, #6
 8006964:	4651      	mov	r1, sl
 8006966:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800696a:	4651      	mov	r1, sl
 800696c:	018a      	lsls	r2, r1, #6
 800696e:	4651      	mov	r1, sl
 8006970:	ebb2 0801 	subs.w	r8, r2, r1
 8006974:	4659      	mov	r1, fp
 8006976:	eb63 0901 	sbc.w	r9, r3, r1
 800697a:	f04f 0200 	mov.w	r2, #0
 800697e:	f04f 0300 	mov.w	r3, #0
 8006982:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006986:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800698a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800698e:	4690      	mov	r8, r2
 8006990:	4699      	mov	r9, r3
 8006992:	4623      	mov	r3, r4
 8006994:	eb18 0303 	adds.w	r3, r8, r3
 8006998:	60bb      	str	r3, [r7, #8]
 800699a:	462b      	mov	r3, r5
 800699c:	eb49 0303 	adc.w	r3, r9, r3
 80069a0:	60fb      	str	r3, [r7, #12]
 80069a2:	f04f 0200 	mov.w	r2, #0
 80069a6:	f04f 0300 	mov.w	r3, #0
 80069aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80069ae:	4629      	mov	r1, r5
 80069b0:	024b      	lsls	r3, r1, #9
 80069b2:	4621      	mov	r1, r4
 80069b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80069b8:	4621      	mov	r1, r4
 80069ba:	024a      	lsls	r2, r1, #9
 80069bc:	4610      	mov	r0, r2
 80069be:	4619      	mov	r1, r3
 80069c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069c2:	2200      	movs	r2, #0
 80069c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80069c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80069cc:	f7fa f87a 	bl	8000ac4 <__aeabi_uldivmod>
 80069d0:	4602      	mov	r2, r0
 80069d2:	460b      	mov	r3, r1
 80069d4:	4613      	mov	r3, r2
 80069d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069d8:	e058      	b.n	8006a8c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069da:	4b38      	ldr	r3, [pc, #224]	; (8006abc <HAL_RCC_GetSysClockFreq+0x200>)
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	099b      	lsrs	r3, r3, #6
 80069e0:	2200      	movs	r2, #0
 80069e2:	4618      	mov	r0, r3
 80069e4:	4611      	mov	r1, r2
 80069e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80069ea:	623b      	str	r3, [r7, #32]
 80069ec:	2300      	movs	r3, #0
 80069ee:	627b      	str	r3, [r7, #36]	; 0x24
 80069f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80069f4:	4642      	mov	r2, r8
 80069f6:	464b      	mov	r3, r9
 80069f8:	f04f 0000 	mov.w	r0, #0
 80069fc:	f04f 0100 	mov.w	r1, #0
 8006a00:	0159      	lsls	r1, r3, #5
 8006a02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a06:	0150      	lsls	r0, r2, #5
 8006a08:	4602      	mov	r2, r0
 8006a0a:	460b      	mov	r3, r1
 8006a0c:	4641      	mov	r1, r8
 8006a0e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006a12:	4649      	mov	r1, r9
 8006a14:	eb63 0b01 	sbc.w	fp, r3, r1
 8006a18:	f04f 0200 	mov.w	r2, #0
 8006a1c:	f04f 0300 	mov.w	r3, #0
 8006a20:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006a24:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006a28:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006a2c:	ebb2 040a 	subs.w	r4, r2, sl
 8006a30:	eb63 050b 	sbc.w	r5, r3, fp
 8006a34:	f04f 0200 	mov.w	r2, #0
 8006a38:	f04f 0300 	mov.w	r3, #0
 8006a3c:	00eb      	lsls	r3, r5, #3
 8006a3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a42:	00e2      	lsls	r2, r4, #3
 8006a44:	4614      	mov	r4, r2
 8006a46:	461d      	mov	r5, r3
 8006a48:	4643      	mov	r3, r8
 8006a4a:	18e3      	adds	r3, r4, r3
 8006a4c:	603b      	str	r3, [r7, #0]
 8006a4e:	464b      	mov	r3, r9
 8006a50:	eb45 0303 	adc.w	r3, r5, r3
 8006a54:	607b      	str	r3, [r7, #4]
 8006a56:	f04f 0200 	mov.w	r2, #0
 8006a5a:	f04f 0300 	mov.w	r3, #0
 8006a5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006a62:	4629      	mov	r1, r5
 8006a64:	028b      	lsls	r3, r1, #10
 8006a66:	4621      	mov	r1, r4
 8006a68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006a6c:	4621      	mov	r1, r4
 8006a6e:	028a      	lsls	r2, r1, #10
 8006a70:	4610      	mov	r0, r2
 8006a72:	4619      	mov	r1, r3
 8006a74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a76:	2200      	movs	r2, #0
 8006a78:	61bb      	str	r3, [r7, #24]
 8006a7a:	61fa      	str	r2, [r7, #28]
 8006a7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a80:	f7fa f820 	bl	8000ac4 <__aeabi_uldivmod>
 8006a84:	4602      	mov	r2, r0
 8006a86:	460b      	mov	r3, r1
 8006a88:	4613      	mov	r3, r2
 8006a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006a8c:	4b0b      	ldr	r3, [pc, #44]	; (8006abc <HAL_RCC_GetSysClockFreq+0x200>)
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	0c1b      	lsrs	r3, r3, #16
 8006a92:	f003 0303 	and.w	r3, r3, #3
 8006a96:	3301      	adds	r3, #1
 8006a98:	005b      	lsls	r3, r3, #1
 8006a9a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006a9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aa4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006aa6:	e002      	b.n	8006aae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006aa8:	4b05      	ldr	r3, [pc, #20]	; (8006ac0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006aaa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006aac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006aae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3750      	adds	r7, #80	; 0x50
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006aba:	bf00      	nop
 8006abc:	40023800 	.word	0x40023800
 8006ac0:	00f42400 	.word	0x00f42400
 8006ac4:	007a1200 	.word	0x007a1200

08006ac8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006acc:	4b03      	ldr	r3, [pc, #12]	; (8006adc <HAL_RCC_GetHCLKFreq+0x14>)
 8006ace:	681b      	ldr	r3, [r3, #0]
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr
 8006ada:	bf00      	nop
 8006adc:	20000000 	.word	0x20000000

08006ae0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006ae4:	f7ff fff0 	bl	8006ac8 <HAL_RCC_GetHCLKFreq>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	4b05      	ldr	r3, [pc, #20]	; (8006b00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	0a9b      	lsrs	r3, r3, #10
 8006af0:	f003 0307 	and.w	r3, r3, #7
 8006af4:	4903      	ldr	r1, [pc, #12]	; (8006b04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006af6:	5ccb      	ldrb	r3, [r1, r3]
 8006af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	40023800 	.word	0x40023800
 8006b04:	080091cc 	.word	0x080091cc

08006b08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006b0c:	f7ff ffdc 	bl	8006ac8 <HAL_RCC_GetHCLKFreq>
 8006b10:	4602      	mov	r2, r0
 8006b12:	4b05      	ldr	r3, [pc, #20]	; (8006b28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	0b5b      	lsrs	r3, r3, #13
 8006b18:	f003 0307 	and.w	r3, r3, #7
 8006b1c:	4903      	ldr	r1, [pc, #12]	; (8006b2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b1e:	5ccb      	ldrb	r3, [r1, r3]
 8006b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	40023800 	.word	0x40023800
 8006b2c:	080091cc 	.word	0x080091cc

08006b30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d101      	bne.n	8006b42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e041      	b.n	8006bc6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d106      	bne.n	8006b5c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f7fe fa08 	bl	8004f6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2202      	movs	r2, #2
 8006b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	3304      	adds	r3, #4
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	4610      	mov	r0, r2
 8006b70:	f000 faec 	bl	800714c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3708      	adds	r7, #8
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
	...

08006bd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d109      	bne.n	8006bf4 <HAL_TIM_PWM_Start+0x24>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	bf14      	ite	ne
 8006bec:	2301      	movne	r3, #1
 8006bee:	2300      	moveq	r3, #0
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	e022      	b.n	8006c3a <HAL_TIM_PWM_Start+0x6a>
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	2b04      	cmp	r3, #4
 8006bf8:	d109      	bne.n	8006c0e <HAL_TIM_PWM_Start+0x3e>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	bf14      	ite	ne
 8006c06:	2301      	movne	r3, #1
 8006c08:	2300      	moveq	r3, #0
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	e015      	b.n	8006c3a <HAL_TIM_PWM_Start+0x6a>
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	2b08      	cmp	r3, #8
 8006c12:	d109      	bne.n	8006c28 <HAL_TIM_PWM_Start+0x58>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	bf14      	ite	ne
 8006c20:	2301      	movne	r3, #1
 8006c22:	2300      	moveq	r3, #0
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	e008      	b.n	8006c3a <HAL_TIM_PWM_Start+0x6a>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	bf14      	ite	ne
 8006c34:	2301      	movne	r3, #1
 8006c36:	2300      	moveq	r3, #0
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d001      	beq.n	8006c42 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e07c      	b.n	8006d3c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d104      	bne.n	8006c52 <HAL_TIM_PWM_Start+0x82>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c50:	e013      	b.n	8006c7a <HAL_TIM_PWM_Start+0xaa>
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	2b04      	cmp	r3, #4
 8006c56:	d104      	bne.n	8006c62 <HAL_TIM_PWM_Start+0x92>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2202      	movs	r2, #2
 8006c5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c60:	e00b      	b.n	8006c7a <HAL_TIM_PWM_Start+0xaa>
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	2b08      	cmp	r3, #8
 8006c66:	d104      	bne.n	8006c72 <HAL_TIM_PWM_Start+0xa2>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2202      	movs	r2, #2
 8006c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c70:	e003      	b.n	8006c7a <HAL_TIM_PWM_Start+0xaa>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2202      	movs	r2, #2
 8006c76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	6839      	ldr	r1, [r7, #0]
 8006c82:	4618      	mov	r0, r3
 8006c84:	f000 fcb2 	bl	80075ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a2d      	ldr	r2, [pc, #180]	; (8006d44 <HAL_TIM_PWM_Start+0x174>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d004      	beq.n	8006c9c <HAL_TIM_PWM_Start+0xcc>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a2c      	ldr	r2, [pc, #176]	; (8006d48 <HAL_TIM_PWM_Start+0x178>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d101      	bne.n	8006ca0 <HAL_TIM_PWM_Start+0xd0>
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e000      	b.n	8006ca2 <HAL_TIM_PWM_Start+0xd2>
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d007      	beq.n	8006cb6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006cb4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a22      	ldr	r2, [pc, #136]	; (8006d44 <HAL_TIM_PWM_Start+0x174>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d022      	beq.n	8006d06 <HAL_TIM_PWM_Start+0x136>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cc8:	d01d      	beq.n	8006d06 <HAL_TIM_PWM_Start+0x136>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a1f      	ldr	r2, [pc, #124]	; (8006d4c <HAL_TIM_PWM_Start+0x17c>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d018      	beq.n	8006d06 <HAL_TIM_PWM_Start+0x136>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a1d      	ldr	r2, [pc, #116]	; (8006d50 <HAL_TIM_PWM_Start+0x180>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d013      	beq.n	8006d06 <HAL_TIM_PWM_Start+0x136>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a1c      	ldr	r2, [pc, #112]	; (8006d54 <HAL_TIM_PWM_Start+0x184>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d00e      	beq.n	8006d06 <HAL_TIM_PWM_Start+0x136>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a16      	ldr	r2, [pc, #88]	; (8006d48 <HAL_TIM_PWM_Start+0x178>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d009      	beq.n	8006d06 <HAL_TIM_PWM_Start+0x136>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a18      	ldr	r2, [pc, #96]	; (8006d58 <HAL_TIM_PWM_Start+0x188>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d004      	beq.n	8006d06 <HAL_TIM_PWM_Start+0x136>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a16      	ldr	r2, [pc, #88]	; (8006d5c <HAL_TIM_PWM_Start+0x18c>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d111      	bne.n	8006d2a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	f003 0307 	and.w	r3, r3, #7
 8006d10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2b06      	cmp	r3, #6
 8006d16:	d010      	beq.n	8006d3a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f042 0201 	orr.w	r2, r2, #1
 8006d26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d28:	e007      	b.n	8006d3a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f042 0201 	orr.w	r2, r2, #1
 8006d38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3710      	adds	r7, #16
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	40010000 	.word	0x40010000
 8006d48:	40010400 	.word	0x40010400
 8006d4c:	40000400 	.word	0x40000400
 8006d50:	40000800 	.word	0x40000800
 8006d54:	40000c00 	.word	0x40000c00
 8006d58:	40014000 	.word	0x40014000
 8006d5c:	40001800 	.word	0x40001800

08006d60 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b086      	sub	sp, #24
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d101      	bne.n	8006d74 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	e097      	b.n	8006ea4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d106      	bne.n	8006d8e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f7fe f871 	bl	8004e70 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2202      	movs	r2, #2
 8006d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	6812      	ldr	r2, [r2, #0]
 8006da0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006da4:	f023 0307 	bic.w	r3, r3, #7
 8006da8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	3304      	adds	r3, #4
 8006db2:	4619      	mov	r1, r3
 8006db4:	4610      	mov	r0, r2
 8006db6:	f000 f9c9 	bl	800714c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	699b      	ldr	r3, [r3, #24]
 8006dc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	6a1b      	ldr	r3, [r3, #32]
 8006dd0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	697a      	ldr	r2, [r7, #20]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006de2:	f023 0303 	bic.w	r3, r3, #3
 8006de6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	689a      	ldr	r2, [r3, #8]
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	699b      	ldr	r3, [r3, #24]
 8006df0:	021b      	lsls	r3, r3, #8
 8006df2:	4313      	orrs	r3, r2
 8006df4:	693a      	ldr	r2, [r7, #16]
 8006df6:	4313      	orrs	r3, r2
 8006df8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006e00:	f023 030c 	bic.w	r3, r3, #12
 8006e04:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	68da      	ldr	r2, [r3, #12]
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	69db      	ldr	r3, [r3, #28]
 8006e1a:	021b      	lsls	r3, r3, #8
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	693a      	ldr	r2, [r7, #16]
 8006e20:	4313      	orrs	r3, r2
 8006e22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	691b      	ldr	r3, [r3, #16]
 8006e28:	011a      	lsls	r2, r3, #4
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	6a1b      	ldr	r3, [r3, #32]
 8006e2e:	031b      	lsls	r3, r3, #12
 8006e30:	4313      	orrs	r3, r2
 8006e32:	693a      	ldr	r2, [r7, #16]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006e3e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006e46:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	685a      	ldr	r2, [r3, #4]
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	695b      	ldr	r3, [r3, #20]
 8006e50:	011b      	lsls	r3, r3, #4
 8006e52:	4313      	orrs	r3, r2
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	697a      	ldr	r2, [r7, #20]
 8006e60:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	693a      	ldr	r2, [r7, #16]
 8006e68:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	68fa      	ldr	r2, [r7, #12]
 8006e70:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2201      	movs	r2, #1
 8006e76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2201      	movs	r2, #1
 8006e86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2201      	movs	r2, #1
 8006e96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ea2:	2300      	movs	r3, #0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3718      	adds	r7, #24
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ebc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006ec4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006ecc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006ed4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d110      	bne.n	8006efe <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006edc:	7bfb      	ldrb	r3, [r7, #15]
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d102      	bne.n	8006ee8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006ee2:	7b7b      	ldrb	r3, [r7, #13]
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d001      	beq.n	8006eec <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e069      	b.n	8006fc0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2202      	movs	r2, #2
 8006ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2202      	movs	r2, #2
 8006ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006efc:	e031      	b.n	8006f62 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	2b04      	cmp	r3, #4
 8006f02:	d110      	bne.n	8006f26 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f04:	7bbb      	ldrb	r3, [r7, #14]
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d102      	bne.n	8006f10 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f0a:	7b3b      	ldrb	r3, [r7, #12]
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d001      	beq.n	8006f14 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	e055      	b.n	8006fc0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2202      	movs	r2, #2
 8006f18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2202      	movs	r2, #2
 8006f20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f24:	e01d      	b.n	8006f62 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f26:	7bfb      	ldrb	r3, [r7, #15]
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d108      	bne.n	8006f3e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f2c:	7bbb      	ldrb	r3, [r7, #14]
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d105      	bne.n	8006f3e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f32:	7b7b      	ldrb	r3, [r7, #13]
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d102      	bne.n	8006f3e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f38:	7b3b      	ldrb	r3, [r7, #12]
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d001      	beq.n	8006f42 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e03e      	b.n	8006fc0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2202      	movs	r2, #2
 8006f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2202      	movs	r2, #2
 8006f4e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2202      	movs	r2, #2
 8006f56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2202      	movs	r2, #2
 8006f5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d003      	beq.n	8006f70 <HAL_TIM_Encoder_Start+0xc4>
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	2b04      	cmp	r3, #4
 8006f6c:	d008      	beq.n	8006f80 <HAL_TIM_Encoder_Start+0xd4>
 8006f6e:	e00f      	b.n	8006f90 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2201      	movs	r2, #1
 8006f76:	2100      	movs	r1, #0
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f000 fb37 	bl	80075ec <TIM_CCxChannelCmd>
      break;
 8006f7e:	e016      	b.n	8006fae <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2201      	movs	r2, #1
 8006f86:	2104      	movs	r1, #4
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f000 fb2f 	bl	80075ec <TIM_CCxChannelCmd>
      break;
 8006f8e:	e00e      	b.n	8006fae <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	2201      	movs	r2, #1
 8006f96:	2100      	movs	r1, #0
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f000 fb27 	bl	80075ec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	2104      	movs	r1, #4
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f000 fb20 	bl	80075ec <TIM_CCxChannelCmd>
      break;
 8006fac:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f042 0201 	orr.w	r2, r2, #1
 8006fbc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3710      	adds	r7, #16
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b086      	sub	sp, #24
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d101      	bne.n	8006fe6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006fe2:	2302      	movs	r3, #2
 8006fe4:	e0ae      	b.n	8007144 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2201      	movs	r2, #1
 8006fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2b0c      	cmp	r3, #12
 8006ff2:	f200 809f 	bhi.w	8007134 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006ff6:	a201      	add	r2, pc, #4	; (adr r2, 8006ffc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ffc:	08007031 	.word	0x08007031
 8007000:	08007135 	.word	0x08007135
 8007004:	08007135 	.word	0x08007135
 8007008:	08007135 	.word	0x08007135
 800700c:	08007071 	.word	0x08007071
 8007010:	08007135 	.word	0x08007135
 8007014:	08007135 	.word	0x08007135
 8007018:	08007135 	.word	0x08007135
 800701c:	080070b3 	.word	0x080070b3
 8007020:	08007135 	.word	0x08007135
 8007024:	08007135 	.word	0x08007135
 8007028:	08007135 	.word	0x08007135
 800702c:	080070f3 	.word	0x080070f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	68b9      	ldr	r1, [r7, #8]
 8007036:	4618      	mov	r0, r3
 8007038:	f000 f928 	bl	800728c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	699a      	ldr	r2, [r3, #24]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f042 0208 	orr.w	r2, r2, #8
 800704a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	699a      	ldr	r2, [r3, #24]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f022 0204 	bic.w	r2, r2, #4
 800705a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	6999      	ldr	r1, [r3, #24]
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	691a      	ldr	r2, [r3, #16]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	430a      	orrs	r2, r1
 800706c:	619a      	str	r2, [r3, #24]
      break;
 800706e:	e064      	b.n	800713a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68b9      	ldr	r1, [r7, #8]
 8007076:	4618      	mov	r0, r3
 8007078:	f000 f978 	bl	800736c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	699a      	ldr	r2, [r3, #24]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800708a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	699a      	ldr	r2, [r3, #24]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800709a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	6999      	ldr	r1, [r3, #24]
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	691b      	ldr	r3, [r3, #16]
 80070a6:	021a      	lsls	r2, r3, #8
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	430a      	orrs	r2, r1
 80070ae:	619a      	str	r2, [r3, #24]
      break;
 80070b0:	e043      	b.n	800713a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	68b9      	ldr	r1, [r7, #8]
 80070b8:	4618      	mov	r0, r3
 80070ba:	f000 f9cd 	bl	8007458 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	69da      	ldr	r2, [r3, #28]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f042 0208 	orr.w	r2, r2, #8
 80070cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	69da      	ldr	r2, [r3, #28]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f022 0204 	bic.w	r2, r2, #4
 80070dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	69d9      	ldr	r1, [r3, #28]
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	691a      	ldr	r2, [r3, #16]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	430a      	orrs	r2, r1
 80070ee:	61da      	str	r2, [r3, #28]
      break;
 80070f0:	e023      	b.n	800713a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	68b9      	ldr	r1, [r7, #8]
 80070f8:	4618      	mov	r0, r3
 80070fa:	f000 fa21 	bl	8007540 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	69da      	ldr	r2, [r3, #28]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800710c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	69da      	ldr	r2, [r3, #28]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800711c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	69d9      	ldr	r1, [r3, #28]
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	021a      	lsls	r2, r3, #8
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	430a      	orrs	r2, r1
 8007130:	61da      	str	r2, [r3, #28]
      break;
 8007132:	e002      	b.n	800713a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	75fb      	strb	r3, [r7, #23]
      break;
 8007138:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2200      	movs	r2, #0
 800713e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007142:	7dfb      	ldrb	r3, [r7, #23]
}
 8007144:	4618      	mov	r0, r3
 8007146:	3718      	adds	r7, #24
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800714c:	b480      	push	{r7}
 800714e:	b085      	sub	sp, #20
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	4a40      	ldr	r2, [pc, #256]	; (8007260 <TIM_Base_SetConfig+0x114>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d013      	beq.n	800718c <TIM_Base_SetConfig+0x40>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800716a:	d00f      	beq.n	800718c <TIM_Base_SetConfig+0x40>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	4a3d      	ldr	r2, [pc, #244]	; (8007264 <TIM_Base_SetConfig+0x118>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d00b      	beq.n	800718c <TIM_Base_SetConfig+0x40>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	4a3c      	ldr	r2, [pc, #240]	; (8007268 <TIM_Base_SetConfig+0x11c>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d007      	beq.n	800718c <TIM_Base_SetConfig+0x40>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	4a3b      	ldr	r2, [pc, #236]	; (800726c <TIM_Base_SetConfig+0x120>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d003      	beq.n	800718c <TIM_Base_SetConfig+0x40>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4a3a      	ldr	r2, [pc, #232]	; (8007270 <TIM_Base_SetConfig+0x124>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d108      	bne.n	800719e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007192:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	68fa      	ldr	r2, [r7, #12]
 800719a:	4313      	orrs	r3, r2
 800719c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4a2f      	ldr	r2, [pc, #188]	; (8007260 <TIM_Base_SetConfig+0x114>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d02b      	beq.n	80071fe <TIM_Base_SetConfig+0xb2>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071ac:	d027      	beq.n	80071fe <TIM_Base_SetConfig+0xb2>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	4a2c      	ldr	r2, [pc, #176]	; (8007264 <TIM_Base_SetConfig+0x118>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d023      	beq.n	80071fe <TIM_Base_SetConfig+0xb2>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4a2b      	ldr	r2, [pc, #172]	; (8007268 <TIM_Base_SetConfig+0x11c>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d01f      	beq.n	80071fe <TIM_Base_SetConfig+0xb2>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	4a2a      	ldr	r2, [pc, #168]	; (800726c <TIM_Base_SetConfig+0x120>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d01b      	beq.n	80071fe <TIM_Base_SetConfig+0xb2>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4a29      	ldr	r2, [pc, #164]	; (8007270 <TIM_Base_SetConfig+0x124>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d017      	beq.n	80071fe <TIM_Base_SetConfig+0xb2>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	4a28      	ldr	r2, [pc, #160]	; (8007274 <TIM_Base_SetConfig+0x128>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d013      	beq.n	80071fe <TIM_Base_SetConfig+0xb2>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	4a27      	ldr	r2, [pc, #156]	; (8007278 <TIM_Base_SetConfig+0x12c>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d00f      	beq.n	80071fe <TIM_Base_SetConfig+0xb2>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4a26      	ldr	r2, [pc, #152]	; (800727c <TIM_Base_SetConfig+0x130>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d00b      	beq.n	80071fe <TIM_Base_SetConfig+0xb2>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	4a25      	ldr	r2, [pc, #148]	; (8007280 <TIM_Base_SetConfig+0x134>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d007      	beq.n	80071fe <TIM_Base_SetConfig+0xb2>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4a24      	ldr	r2, [pc, #144]	; (8007284 <TIM_Base_SetConfig+0x138>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d003      	beq.n	80071fe <TIM_Base_SetConfig+0xb2>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	4a23      	ldr	r2, [pc, #140]	; (8007288 <TIM_Base_SetConfig+0x13c>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d108      	bne.n	8007210 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007204:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	68db      	ldr	r3, [r3, #12]
 800720a:	68fa      	ldr	r2, [r7, #12]
 800720c:	4313      	orrs	r3, r2
 800720e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	695b      	ldr	r3, [r3, #20]
 800721a:	4313      	orrs	r3, r2
 800721c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	68fa      	ldr	r2, [r7, #12]
 8007222:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	689a      	ldr	r2, [r3, #8]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	4a0a      	ldr	r2, [pc, #40]	; (8007260 <TIM_Base_SetConfig+0x114>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d003      	beq.n	8007244 <TIM_Base_SetConfig+0xf8>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	4a0c      	ldr	r2, [pc, #48]	; (8007270 <TIM_Base_SetConfig+0x124>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d103      	bne.n	800724c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	691a      	ldr	r2, [r3, #16]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2201      	movs	r2, #1
 8007250:	615a      	str	r2, [r3, #20]
}
 8007252:	bf00      	nop
 8007254:	3714      	adds	r7, #20
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr
 800725e:	bf00      	nop
 8007260:	40010000 	.word	0x40010000
 8007264:	40000400 	.word	0x40000400
 8007268:	40000800 	.word	0x40000800
 800726c:	40000c00 	.word	0x40000c00
 8007270:	40010400 	.word	0x40010400
 8007274:	40014000 	.word	0x40014000
 8007278:	40014400 	.word	0x40014400
 800727c:	40014800 	.word	0x40014800
 8007280:	40001800 	.word	0x40001800
 8007284:	40001c00 	.word	0x40001c00
 8007288:	40002000 	.word	0x40002000

0800728c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800728c:	b480      	push	{r7}
 800728e:	b087      	sub	sp, #28
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a1b      	ldr	r3, [r3, #32]
 800729a:	f023 0201 	bic.w	r2, r3, #1
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6a1b      	ldr	r3, [r3, #32]
 80072a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	699b      	ldr	r3, [r3, #24]
 80072b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f023 0303 	bic.w	r3, r3, #3
 80072c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	4313      	orrs	r3, r2
 80072cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	f023 0302 	bic.w	r3, r3, #2
 80072d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	697a      	ldr	r2, [r7, #20]
 80072dc:	4313      	orrs	r3, r2
 80072de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	4a20      	ldr	r2, [pc, #128]	; (8007364 <TIM_OC1_SetConfig+0xd8>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d003      	beq.n	80072f0 <TIM_OC1_SetConfig+0x64>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	4a1f      	ldr	r2, [pc, #124]	; (8007368 <TIM_OC1_SetConfig+0xdc>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d10c      	bne.n	800730a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	f023 0308 	bic.w	r3, r3, #8
 80072f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	697a      	ldr	r2, [r7, #20]
 80072fe:	4313      	orrs	r3, r2
 8007300:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	f023 0304 	bic.w	r3, r3, #4
 8007308:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4a15      	ldr	r2, [pc, #84]	; (8007364 <TIM_OC1_SetConfig+0xd8>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d003      	beq.n	800731a <TIM_OC1_SetConfig+0x8e>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	4a14      	ldr	r2, [pc, #80]	; (8007368 <TIM_OC1_SetConfig+0xdc>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d111      	bne.n	800733e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007320:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007328:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	695b      	ldr	r3, [r3, #20]
 800732e:	693a      	ldr	r2, [r7, #16]
 8007330:	4313      	orrs	r3, r2
 8007332:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	699b      	ldr	r3, [r3, #24]
 8007338:	693a      	ldr	r2, [r7, #16]
 800733a:	4313      	orrs	r3, r2
 800733c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	693a      	ldr	r2, [r7, #16]
 8007342:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	68fa      	ldr	r2, [r7, #12]
 8007348:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	685a      	ldr	r2, [r3, #4]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	697a      	ldr	r2, [r7, #20]
 8007356:	621a      	str	r2, [r3, #32]
}
 8007358:	bf00      	nop
 800735a:	371c      	adds	r7, #28
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr
 8007364:	40010000 	.word	0x40010000
 8007368:	40010400 	.word	0x40010400

0800736c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800736c:	b480      	push	{r7}
 800736e:	b087      	sub	sp, #28
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6a1b      	ldr	r3, [r3, #32]
 800737a:	f023 0210 	bic.w	r2, r3, #16
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a1b      	ldr	r3, [r3, #32]
 8007386:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	699b      	ldr	r3, [r3, #24]
 8007392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800739a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	021b      	lsls	r3, r3, #8
 80073aa:	68fa      	ldr	r2, [r7, #12]
 80073ac:	4313      	orrs	r3, r2
 80073ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	f023 0320 	bic.w	r3, r3, #32
 80073b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	011b      	lsls	r3, r3, #4
 80073be:	697a      	ldr	r2, [r7, #20]
 80073c0:	4313      	orrs	r3, r2
 80073c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	4a22      	ldr	r2, [pc, #136]	; (8007450 <TIM_OC2_SetConfig+0xe4>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d003      	beq.n	80073d4 <TIM_OC2_SetConfig+0x68>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	4a21      	ldr	r2, [pc, #132]	; (8007454 <TIM_OC2_SetConfig+0xe8>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d10d      	bne.n	80073f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	011b      	lsls	r3, r3, #4
 80073e2:	697a      	ldr	r2, [r7, #20]
 80073e4:	4313      	orrs	r3, r2
 80073e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4a17      	ldr	r2, [pc, #92]	; (8007450 <TIM_OC2_SetConfig+0xe4>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d003      	beq.n	8007400 <TIM_OC2_SetConfig+0x94>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	4a16      	ldr	r2, [pc, #88]	; (8007454 <TIM_OC2_SetConfig+0xe8>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d113      	bne.n	8007428 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007406:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800740e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	695b      	ldr	r3, [r3, #20]
 8007414:	009b      	lsls	r3, r3, #2
 8007416:	693a      	ldr	r2, [r7, #16]
 8007418:	4313      	orrs	r3, r2
 800741a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	699b      	ldr	r3, [r3, #24]
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	693a      	ldr	r2, [r7, #16]
 8007424:	4313      	orrs	r3, r2
 8007426:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	693a      	ldr	r2, [r7, #16]
 800742c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	68fa      	ldr	r2, [r7, #12]
 8007432:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	685a      	ldr	r2, [r3, #4]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	697a      	ldr	r2, [r7, #20]
 8007440:	621a      	str	r2, [r3, #32]
}
 8007442:	bf00      	nop
 8007444:	371c      	adds	r7, #28
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr
 800744e:	bf00      	nop
 8007450:	40010000 	.word	0x40010000
 8007454:	40010400 	.word	0x40010400

08007458 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007458:	b480      	push	{r7}
 800745a:	b087      	sub	sp, #28
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a1b      	ldr	r3, [r3, #32]
 8007466:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a1b      	ldr	r3, [r3, #32]
 8007472:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	69db      	ldr	r3, [r3, #28]
 800747e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f023 0303 	bic.w	r3, r3, #3
 800748e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	68fa      	ldr	r2, [r7, #12]
 8007496:	4313      	orrs	r3, r2
 8007498:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80074a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	021b      	lsls	r3, r3, #8
 80074a8:	697a      	ldr	r2, [r7, #20]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4a21      	ldr	r2, [pc, #132]	; (8007538 <TIM_OC3_SetConfig+0xe0>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d003      	beq.n	80074be <TIM_OC3_SetConfig+0x66>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4a20      	ldr	r2, [pc, #128]	; (800753c <TIM_OC3_SetConfig+0xe4>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d10d      	bne.n	80074da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80074c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	68db      	ldr	r3, [r3, #12]
 80074ca:	021b      	lsls	r3, r3, #8
 80074cc:	697a      	ldr	r2, [r7, #20]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80074d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4a16      	ldr	r2, [pc, #88]	; (8007538 <TIM_OC3_SetConfig+0xe0>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d003      	beq.n	80074ea <TIM_OC3_SetConfig+0x92>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4a15      	ldr	r2, [pc, #84]	; (800753c <TIM_OC3_SetConfig+0xe4>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d113      	bne.n	8007512 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	695b      	ldr	r3, [r3, #20]
 80074fe:	011b      	lsls	r3, r3, #4
 8007500:	693a      	ldr	r2, [r7, #16]
 8007502:	4313      	orrs	r3, r2
 8007504:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	699b      	ldr	r3, [r3, #24]
 800750a:	011b      	lsls	r3, r3, #4
 800750c:	693a      	ldr	r2, [r7, #16]
 800750e:	4313      	orrs	r3, r2
 8007510:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	693a      	ldr	r2, [r7, #16]
 8007516:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	68fa      	ldr	r2, [r7, #12]
 800751c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	685a      	ldr	r2, [r3, #4]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	697a      	ldr	r2, [r7, #20]
 800752a:	621a      	str	r2, [r3, #32]
}
 800752c:	bf00      	nop
 800752e:	371c      	adds	r7, #28
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr
 8007538:	40010000 	.word	0x40010000
 800753c:	40010400 	.word	0x40010400

08007540 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007540:	b480      	push	{r7}
 8007542:	b087      	sub	sp, #28
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a1b      	ldr	r3, [r3, #32]
 800754e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a1b      	ldr	r3, [r3, #32]
 800755a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	69db      	ldr	r3, [r3, #28]
 8007566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800756e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007576:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	021b      	lsls	r3, r3, #8
 800757e:	68fa      	ldr	r2, [r7, #12]
 8007580:	4313      	orrs	r3, r2
 8007582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800758a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	031b      	lsls	r3, r3, #12
 8007592:	693a      	ldr	r2, [r7, #16]
 8007594:	4313      	orrs	r3, r2
 8007596:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4a12      	ldr	r2, [pc, #72]	; (80075e4 <TIM_OC4_SetConfig+0xa4>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d003      	beq.n	80075a8 <TIM_OC4_SetConfig+0x68>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4a11      	ldr	r2, [pc, #68]	; (80075e8 <TIM_OC4_SetConfig+0xa8>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d109      	bne.n	80075bc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	695b      	ldr	r3, [r3, #20]
 80075b4:	019b      	lsls	r3, r3, #6
 80075b6:	697a      	ldr	r2, [r7, #20]
 80075b8:	4313      	orrs	r3, r2
 80075ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	697a      	ldr	r2, [r7, #20]
 80075c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	68fa      	ldr	r2, [r7, #12]
 80075c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	685a      	ldr	r2, [r3, #4]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	693a      	ldr	r2, [r7, #16]
 80075d4:	621a      	str	r2, [r3, #32]
}
 80075d6:	bf00      	nop
 80075d8:	371c      	adds	r7, #28
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	40010000 	.word	0x40010000
 80075e8:	40010400 	.word	0x40010400

080075ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b087      	sub	sp, #28
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	60f8      	str	r0, [r7, #12]
 80075f4:	60b9      	str	r1, [r7, #8]
 80075f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	f003 031f 	and.w	r3, r3, #31
 80075fe:	2201      	movs	r2, #1
 8007600:	fa02 f303 	lsl.w	r3, r2, r3
 8007604:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6a1a      	ldr	r2, [r3, #32]
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	43db      	mvns	r3, r3
 800760e:	401a      	ands	r2, r3
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6a1a      	ldr	r2, [r3, #32]
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	f003 031f 	and.w	r3, r3, #31
 800761e:	6879      	ldr	r1, [r7, #4]
 8007620:	fa01 f303 	lsl.w	r3, r1, r3
 8007624:	431a      	orrs	r2, r3
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	621a      	str	r2, [r3, #32]
}
 800762a:	bf00      	nop
 800762c:	371c      	adds	r7, #28
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr
	...

08007638 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007638:	b480      	push	{r7}
 800763a:	b085      	sub	sp, #20
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007648:	2b01      	cmp	r3, #1
 800764a:	d101      	bne.n	8007650 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800764c:	2302      	movs	r3, #2
 800764e:	e05a      	b.n	8007706 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2202      	movs	r2, #2
 800765c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007676:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	68fa      	ldr	r2, [r7, #12]
 800767e:	4313      	orrs	r3, r2
 8007680:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a21      	ldr	r2, [pc, #132]	; (8007714 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d022      	beq.n	80076da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800769c:	d01d      	beq.n	80076da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a1d      	ldr	r2, [pc, #116]	; (8007718 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d018      	beq.n	80076da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a1b      	ldr	r2, [pc, #108]	; (800771c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d013      	beq.n	80076da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a1a      	ldr	r2, [pc, #104]	; (8007720 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d00e      	beq.n	80076da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a18      	ldr	r2, [pc, #96]	; (8007724 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d009      	beq.n	80076da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a17      	ldr	r2, [pc, #92]	; (8007728 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d004      	beq.n	80076da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a15      	ldr	r2, [pc, #84]	; (800772c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d10c      	bne.n	80076f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	68ba      	ldr	r2, [r7, #8]
 80076e8:	4313      	orrs	r3, r2
 80076ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68ba      	ldr	r2, [r7, #8]
 80076f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007704:	2300      	movs	r3, #0
}
 8007706:	4618      	mov	r0, r3
 8007708:	3714      	adds	r7, #20
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr
 8007712:	bf00      	nop
 8007714:	40010000 	.word	0x40010000
 8007718:	40000400 	.word	0x40000400
 800771c:	40000800 	.word	0x40000800
 8007720:	40000c00 	.word	0x40000c00
 8007724:	40010400 	.word	0x40010400
 8007728:	40014000 	.word	0x40014000
 800772c:	40001800 	.word	0x40001800

08007730 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d101      	bne.n	8007742 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	e03f      	b.n	80077c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007748:	b2db      	uxtb	r3, r3
 800774a:	2b00      	cmp	r3, #0
 800774c:	d106      	bne.n	800775c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2200      	movs	r2, #0
 8007752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f7fd fc60 	bl	800501c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2224      	movs	r2, #36	; 0x24
 8007760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	68da      	ldr	r2, [r3, #12]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007772:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 ff43 	bl	8008600 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	691a      	ldr	r2, [r3, #16]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007788:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	695a      	ldr	r2, [r3, #20]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007798:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	68da      	ldr	r2, [r3, #12]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80077a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2220      	movs	r2, #32
 80077b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2220      	movs	r2, #32
 80077bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80077c0:	2300      	movs	r3, #0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3708      	adds	r7, #8
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
	...

080077cc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b08c      	sub	sp, #48	; 0x30
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	4613      	mov	r3, r2
 80077d8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	2b20      	cmp	r3, #32
 80077e4:	d165      	bne.n	80078b2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d002      	beq.n	80077f2 <HAL_UART_Transmit_DMA+0x26>
 80077ec:	88fb      	ldrh	r3, [r7, #6]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d101      	bne.n	80077f6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	e05e      	b.n	80078b4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d101      	bne.n	8007804 <HAL_UART_Transmit_DMA+0x38>
 8007800:	2302      	movs	r3, #2
 8007802:	e057      	b.n	80078b4 <HAL_UART_Transmit_DMA+0xe8>
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800780c:	68ba      	ldr	r2, [r7, #8]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	88fa      	ldrh	r2, [r7, #6]
 8007816:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	88fa      	ldrh	r2, [r7, #6]
 800781c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2200      	movs	r2, #0
 8007822:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2221      	movs	r2, #33	; 0x21
 8007828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007830:	4a22      	ldr	r2, [pc, #136]	; (80078bc <HAL_UART_Transmit_DMA+0xf0>)
 8007832:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007838:	4a21      	ldr	r2, [pc, #132]	; (80078c0 <HAL_UART_Transmit_DMA+0xf4>)
 800783a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007840:	4a20      	ldr	r2, [pc, #128]	; (80078c4 <HAL_UART_Transmit_DMA+0xf8>)
 8007842:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007848:	2200      	movs	r2, #0
 800784a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800784c:	f107 0308 	add.w	r3, r7, #8
 8007850:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007858:	6819      	ldr	r1, [r3, #0]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	3304      	adds	r3, #4
 8007860:	461a      	mov	r2, r3
 8007862:	88fb      	ldrh	r3, [r7, #6]
 8007864:	f7fd ffc2 	bl	80057ec <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007870:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2200      	movs	r2, #0
 8007876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	3314      	adds	r3, #20
 8007880:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007882:	69bb      	ldr	r3, [r7, #24]
 8007884:	e853 3f00 	ldrex	r3, [r3]
 8007888:	617b      	str	r3, [r7, #20]
   return(result);
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007890:	62bb      	str	r3, [r7, #40]	; 0x28
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	3314      	adds	r3, #20
 8007898:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800789a:	627a      	str	r2, [r7, #36]	; 0x24
 800789c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800789e:	6a39      	ldr	r1, [r7, #32]
 80078a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078a2:	e841 2300 	strex	r3, r2, [r1]
 80078a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80078a8:	69fb      	ldr	r3, [r7, #28]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d1e5      	bne.n	800787a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80078ae:	2300      	movs	r3, #0
 80078b0:	e000      	b.n	80078b4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80078b2:	2302      	movs	r3, #2
  }
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3730      	adds	r7, #48	; 0x30
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}
 80078bc:	08007e99 	.word	0x08007e99
 80078c0:	08007f33 	.word	0x08007f33
 80078c4:	080080ab 	.word	0x080080ab

080078c8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	60b9      	str	r1, [r7, #8]
 80078d2:	4613      	mov	r3, r2
 80078d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	2b20      	cmp	r3, #32
 80078e0:	d11d      	bne.n	800791e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d002      	beq.n	80078ee <HAL_UART_Receive_DMA+0x26>
 80078e8:	88fb      	ldrh	r3, [r7, #6]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d101      	bne.n	80078f2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80078ee:	2301      	movs	r3, #1
 80078f0:	e016      	b.n	8007920 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d101      	bne.n	8007900 <HAL_UART_Receive_DMA+0x38>
 80078fc:	2302      	movs	r3, #2
 80078fe:	e00f      	b.n	8007920 <HAL_UART_Receive_DMA+0x58>
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2201      	movs	r2, #1
 8007904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2200      	movs	r2, #0
 800790c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800790e:	88fb      	ldrh	r3, [r7, #6]
 8007910:	461a      	mov	r2, r3
 8007912:	68b9      	ldr	r1, [r7, #8]
 8007914:	68f8      	ldr	r0, [r7, #12]
 8007916:	f000 fc13 	bl	8008140 <UART_Start_Receive_DMA>
 800791a:	4603      	mov	r3, r0
 800791c:	e000      	b.n	8007920 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800791e:	2302      	movs	r3, #2
  }
}
 8007920:	4618      	mov	r0, r3
 8007922:	3710      	adds	r7, #16
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b0ba      	sub	sp, #232	; 0xe8
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	695b      	ldr	r3, [r3, #20]
 800794a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800794e:	2300      	movs	r3, #0
 8007950:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007954:	2300      	movs	r3, #0
 8007956:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800795a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800795e:	f003 030f 	and.w	r3, r3, #15
 8007962:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007966:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800796a:	2b00      	cmp	r3, #0
 800796c:	d10f      	bne.n	800798e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800796e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007972:	f003 0320 	and.w	r3, r3, #32
 8007976:	2b00      	cmp	r3, #0
 8007978:	d009      	beq.n	800798e <HAL_UART_IRQHandler+0x66>
 800797a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800797e:	f003 0320 	and.w	r3, r3, #32
 8007982:	2b00      	cmp	r3, #0
 8007984:	d003      	beq.n	800798e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 fd7f 	bl	800848a <UART_Receive_IT>
      return;
 800798c:	e256      	b.n	8007e3c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800798e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007992:	2b00      	cmp	r3, #0
 8007994:	f000 80de 	beq.w	8007b54 <HAL_UART_IRQHandler+0x22c>
 8007998:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800799c:	f003 0301 	and.w	r3, r3, #1
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d106      	bne.n	80079b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80079a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	f000 80d1 	beq.w	8007b54 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80079b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079b6:	f003 0301 	and.w	r3, r3, #1
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d00b      	beq.n	80079d6 <HAL_UART_IRQHandler+0xae>
 80079be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d005      	beq.n	80079d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ce:	f043 0201 	orr.w	r2, r3, #1
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80079d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079da:	f003 0304 	and.w	r3, r3, #4
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d00b      	beq.n	80079fa <HAL_UART_IRQHandler+0xd2>
 80079e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079e6:	f003 0301 	and.w	r3, r3, #1
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d005      	beq.n	80079fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f2:	f043 0202 	orr.w	r2, r3, #2
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80079fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079fe:	f003 0302 	and.w	r3, r3, #2
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00b      	beq.n	8007a1e <HAL_UART_IRQHandler+0xf6>
 8007a06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a0a:	f003 0301 	and.w	r3, r3, #1
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d005      	beq.n	8007a1e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a16:	f043 0204 	orr.w	r2, r3, #4
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a22:	f003 0308 	and.w	r3, r3, #8
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d011      	beq.n	8007a4e <HAL_UART_IRQHandler+0x126>
 8007a2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a2e:	f003 0320 	and.w	r3, r3, #32
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d105      	bne.n	8007a42 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007a36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a3a:	f003 0301 	and.w	r3, r3, #1
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d005      	beq.n	8007a4e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a46:	f043 0208 	orr.w	r2, r3, #8
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	f000 81ed 	beq.w	8007e32 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a5c:	f003 0320 	and.w	r3, r3, #32
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d008      	beq.n	8007a76 <HAL_UART_IRQHandler+0x14e>
 8007a64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a68:	f003 0320 	and.w	r3, r3, #32
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d002      	beq.n	8007a76 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 fd0a 	bl	800848a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	695b      	ldr	r3, [r3, #20]
 8007a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a80:	2b40      	cmp	r3, #64	; 0x40
 8007a82:	bf0c      	ite	eq
 8007a84:	2301      	moveq	r3, #1
 8007a86:	2300      	movne	r3, #0
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a92:	f003 0308 	and.w	r3, r3, #8
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d103      	bne.n	8007aa2 <HAL_UART_IRQHandler+0x17a>
 8007a9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d04f      	beq.n	8007b42 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 fc12 	bl	80082cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	695b      	ldr	r3, [r3, #20]
 8007aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ab2:	2b40      	cmp	r3, #64	; 0x40
 8007ab4:	d141      	bne.n	8007b3a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	3314      	adds	r3, #20
 8007abc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ac4:	e853 3f00 	ldrex	r3, [r3]
 8007ac8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007acc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ad0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ad4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	3314      	adds	r3, #20
 8007ade:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007ae2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007ae6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007aee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007af2:	e841 2300 	strex	r3, r2, [r1]
 8007af6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007afa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d1d9      	bne.n	8007ab6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d013      	beq.n	8007b32 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0e:	4a7d      	ldr	r2, [pc, #500]	; (8007d04 <HAL_UART_IRQHandler+0x3dc>)
 8007b10:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b16:	4618      	mov	r0, r3
 8007b18:	f7fd ff30 	bl	800597c <HAL_DMA_Abort_IT>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d016      	beq.n	8007b50 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007b2c:	4610      	mov	r0, r2
 8007b2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b30:	e00e      	b.n	8007b50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 f99a 	bl	8007e6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b38:	e00a      	b.n	8007b50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 f996 	bl	8007e6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b40:	e006      	b.n	8007b50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 f992 	bl	8007e6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007b4e:	e170      	b.n	8007e32 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b50:	bf00      	nop
    return;
 8007b52:	e16e      	b.n	8007e32 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	f040 814a 	bne.w	8007df2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b62:	f003 0310 	and.w	r3, r3, #16
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	f000 8143 	beq.w	8007df2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b70:	f003 0310 	and.w	r3, r3, #16
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	f000 813c 	beq.w	8007df2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	60bb      	str	r3, [r7, #8]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	60bb      	str	r3, [r7, #8]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	60bb      	str	r3, [r7, #8]
 8007b8e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	695b      	ldr	r3, [r3, #20]
 8007b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b9a:	2b40      	cmp	r3, #64	; 0x40
 8007b9c:	f040 80b4 	bne.w	8007d08 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007bac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	f000 8140 	beq.w	8007e36 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007bba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	f080 8139 	bcs.w	8007e36 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007bca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd0:	69db      	ldr	r3, [r3, #28]
 8007bd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bd6:	f000 8088 	beq.w	8007cea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	330c      	adds	r3, #12
 8007be0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007be8:	e853 3f00 	ldrex	r3, [r3]
 8007bec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007bf0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007bf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bf8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	330c      	adds	r3, #12
 8007c02:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007c06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007c0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007c12:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007c16:	e841 2300 	strex	r3, r2, [r1]
 8007c1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007c1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d1d9      	bne.n	8007bda <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	3314      	adds	r3, #20
 8007c2c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c30:	e853 3f00 	ldrex	r3, [r3]
 8007c34:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007c36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c38:	f023 0301 	bic.w	r3, r3, #1
 8007c3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	3314      	adds	r3, #20
 8007c46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007c4a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007c4e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c50:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007c52:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007c56:	e841 2300 	strex	r3, r2, [r1]
 8007c5a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007c5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d1e1      	bne.n	8007c26 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	3314      	adds	r3, #20
 8007c68:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c6c:	e853 3f00 	ldrex	r3, [r3]
 8007c70:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007c72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	3314      	adds	r3, #20
 8007c82:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007c86:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007c88:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c8a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007c8c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007c8e:	e841 2300 	strex	r3, r2, [r1]
 8007c92:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007c94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d1e3      	bne.n	8007c62 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2220      	movs	r2, #32
 8007c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	330c      	adds	r3, #12
 8007cae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cb2:	e853 3f00 	ldrex	r3, [r3]
 8007cb6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007cb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cba:	f023 0310 	bic.w	r3, r3, #16
 8007cbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	330c      	adds	r3, #12
 8007cc8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007ccc:	65ba      	str	r2, [r7, #88]	; 0x58
 8007cce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007cd2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007cd4:	e841 2300 	strex	r3, r2, [r1]
 8007cd8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007cda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d1e3      	bne.n	8007ca8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f7fd fdd9 	bl	800589c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	1ad3      	subs	r3, r2, r3
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 f8c0 	bl	8007e80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007d00:	e099      	b.n	8007e36 <HAL_UART_IRQHandler+0x50e>
 8007d02:	bf00      	nop
 8007d04:	08008393 	.word	0x08008393
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d10:	b29b      	uxth	r3, r3
 8007d12:	1ad3      	subs	r3, r2, r3
 8007d14:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	f000 808b 	beq.w	8007e3a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007d24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	f000 8086 	beq.w	8007e3a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	330c      	adds	r3, #12
 8007d34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d38:	e853 3f00 	ldrex	r3, [r3]
 8007d3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	330c      	adds	r3, #12
 8007d4e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007d52:	647a      	str	r2, [r7, #68]	; 0x44
 8007d54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d5a:	e841 2300 	strex	r3, r2, [r1]
 8007d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d1e3      	bne.n	8007d2e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	3314      	adds	r3, #20
 8007d6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d70:	e853 3f00 	ldrex	r3, [r3]
 8007d74:	623b      	str	r3, [r7, #32]
   return(result);
 8007d76:	6a3b      	ldr	r3, [r7, #32]
 8007d78:	f023 0301 	bic.w	r3, r3, #1
 8007d7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	3314      	adds	r3, #20
 8007d86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007d8a:	633a      	str	r2, [r7, #48]	; 0x30
 8007d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d92:	e841 2300 	strex	r3, r2, [r1]
 8007d96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d1e3      	bne.n	8007d66 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2220      	movs	r2, #32
 8007da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	330c      	adds	r3, #12
 8007db2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	e853 3f00 	ldrex	r3, [r3]
 8007dba:	60fb      	str	r3, [r7, #12]
   return(result);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f023 0310 	bic.w	r3, r3, #16
 8007dc2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	330c      	adds	r3, #12
 8007dcc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007dd0:	61fa      	str	r2, [r7, #28]
 8007dd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd4:	69b9      	ldr	r1, [r7, #24]
 8007dd6:	69fa      	ldr	r2, [r7, #28]
 8007dd8:	e841 2300 	strex	r3, r2, [r1]
 8007ddc:	617b      	str	r3, [r7, #20]
   return(result);
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d1e3      	bne.n	8007dac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007de4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007de8:	4619      	mov	r1, r3
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 f848 	bl	8007e80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007df0:	e023      	b.n	8007e3a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d009      	beq.n	8007e12 <HAL_UART_IRQHandler+0x4ea>
 8007dfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d003      	beq.n	8007e12 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 fad5 	bl	80083ba <UART_Transmit_IT>
    return;
 8007e10:	e014      	b.n	8007e3c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d00e      	beq.n	8007e3c <HAL_UART_IRQHandler+0x514>
 8007e1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d008      	beq.n	8007e3c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 fb15 	bl	800845a <UART_EndTransmit_IT>
    return;
 8007e30:	e004      	b.n	8007e3c <HAL_UART_IRQHandler+0x514>
    return;
 8007e32:	bf00      	nop
 8007e34:	e002      	b.n	8007e3c <HAL_UART_IRQHandler+0x514>
      return;
 8007e36:	bf00      	nop
 8007e38:	e000      	b.n	8007e3c <HAL_UART_IRQHandler+0x514>
      return;
 8007e3a:	bf00      	nop
  }
}
 8007e3c:	37e8      	adds	r7, #232	; 0xe8
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop

08007e44 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b083      	sub	sp, #12
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007e4c:	bf00      	nop
 8007e4e:	370c      	adds	r7, #12
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr

08007e58 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007e60:	bf00      	nop
 8007e62:	370c      	adds	r7, #12
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr

08007e6c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b083      	sub	sp, #12
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007e74:	bf00      	nop
 8007e76:	370c      	adds	r7, #12
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr

08007e80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b083      	sub	sp, #12
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	460b      	mov	r3, r1
 8007e8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007e8c:	bf00      	nop
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b090      	sub	sp, #64	; 0x40
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d137      	bne.n	8007f24 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007eb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	3314      	adds	r3, #20
 8007ec0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec4:	e853 3f00 	ldrex	r3, [r3]
 8007ec8:	623b      	str	r3, [r7, #32]
   return(result);
 8007eca:	6a3b      	ldr	r3, [r7, #32]
 8007ecc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ed0:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ed2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	3314      	adds	r3, #20
 8007ed8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007eda:	633a      	str	r2, [r7, #48]	; 0x30
 8007edc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ede:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ee0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ee2:	e841 2300 	strex	r3, r2, [r1]
 8007ee6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d1e5      	bne.n	8007eba <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007eee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	330c      	adds	r3, #12
 8007ef4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	e853 3f00 	ldrex	r3, [r3]
 8007efc:	60fb      	str	r3, [r7, #12]
   return(result);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f04:	637b      	str	r3, [r7, #52]	; 0x34
 8007f06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	330c      	adds	r3, #12
 8007f0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f0e:	61fa      	str	r2, [r7, #28]
 8007f10:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f12:	69b9      	ldr	r1, [r7, #24]
 8007f14:	69fa      	ldr	r2, [r7, #28]
 8007f16:	e841 2300 	strex	r3, r2, [r1]
 8007f1a:	617b      	str	r3, [r7, #20]
   return(result);
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d1e5      	bne.n	8007eee <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007f22:	e002      	b.n	8007f2a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007f24:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007f26:	f7fc f935 	bl	8004194 <HAL_UART_TxCpltCallback>
}
 8007f2a:	bf00      	nop
 8007f2c:	3740      	adds	r7, #64	; 0x40
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}

08007f32 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007f32:	b580      	push	{r7, lr}
 8007f34:	b084      	sub	sp, #16
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f3e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f7ff ff7f 	bl	8007e44 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f46:	bf00      	nop
 8007f48:	3710      	adds	r7, #16
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}

08007f4e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	b09c      	sub	sp, #112	; 0x70
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f5a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d172      	bne.n	8008050 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	330c      	adds	r3, #12
 8007f76:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f7a:	e853 3f00 	ldrex	r3, [r3]
 8007f7e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007f80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f86:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	330c      	adds	r3, #12
 8007f8e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007f90:	65ba      	str	r2, [r7, #88]	; 0x58
 8007f92:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f94:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007f96:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007f98:	e841 2300 	strex	r3, r2, [r1]
 8007f9c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007f9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d1e5      	bne.n	8007f70 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	3314      	adds	r3, #20
 8007faa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fae:	e853 3f00 	ldrex	r3, [r3]
 8007fb2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fb6:	f023 0301 	bic.w	r3, r3, #1
 8007fba:	667b      	str	r3, [r7, #100]	; 0x64
 8007fbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	3314      	adds	r3, #20
 8007fc2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007fc4:	647a      	str	r2, [r7, #68]	; 0x44
 8007fc6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007fca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007fcc:	e841 2300 	strex	r3, r2, [r1]
 8007fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d1e5      	bne.n	8007fa4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	3314      	adds	r3, #20
 8007fde:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe2:	e853 3f00 	ldrex	r3, [r3]
 8007fe6:	623b      	str	r3, [r7, #32]
   return(result);
 8007fe8:	6a3b      	ldr	r3, [r7, #32]
 8007fea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fee:	663b      	str	r3, [r7, #96]	; 0x60
 8007ff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	3314      	adds	r3, #20
 8007ff6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007ff8:	633a      	str	r2, [r7, #48]	; 0x30
 8007ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ffc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ffe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008000:	e841 2300 	strex	r3, r2, [r1]
 8008004:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008008:	2b00      	cmp	r3, #0
 800800a:	d1e5      	bne.n	8007fd8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800800c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800800e:	2220      	movs	r2, #32
 8008010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008014:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008018:	2b01      	cmp	r3, #1
 800801a:	d119      	bne.n	8008050 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800801c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	330c      	adds	r3, #12
 8008022:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	e853 3f00 	ldrex	r3, [r3]
 800802a:	60fb      	str	r3, [r7, #12]
   return(result);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f023 0310 	bic.w	r3, r3, #16
 8008032:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	330c      	adds	r3, #12
 800803a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800803c:	61fa      	str	r2, [r7, #28]
 800803e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008040:	69b9      	ldr	r1, [r7, #24]
 8008042:	69fa      	ldr	r2, [r7, #28]
 8008044:	e841 2300 	strex	r3, r2, [r1]
 8008048:	617b      	str	r3, [r7, #20]
   return(result);
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d1e5      	bne.n	800801c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008054:	2b01      	cmp	r3, #1
 8008056:	d106      	bne.n	8008066 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800805a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800805c:	4619      	mov	r1, r3
 800805e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008060:	f7ff ff0e 	bl	8007e80 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008064:	e002      	b.n	800806c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008066:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008068:	f7fc f8ac 	bl	80041c4 <HAL_UART_RxCpltCallback>
}
 800806c:	bf00      	nop
 800806e:	3770      	adds	r7, #112	; 0x70
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b084      	sub	sp, #16
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008080:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008086:	2b01      	cmp	r3, #1
 8008088:	d108      	bne.n	800809c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800808e:	085b      	lsrs	r3, r3, #1
 8008090:	b29b      	uxth	r3, r3
 8008092:	4619      	mov	r1, r3
 8008094:	68f8      	ldr	r0, [r7, #12]
 8008096:	f7ff fef3 	bl	8007e80 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800809a:	e002      	b.n	80080a2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800809c:	68f8      	ldr	r0, [r7, #12]
 800809e:	f7ff fedb 	bl	8007e58 <HAL_UART_RxHalfCpltCallback>
}
 80080a2:	bf00      	nop
 80080a4:	3710      	adds	r7, #16
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}

080080aa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80080aa:	b580      	push	{r7, lr}
 80080ac:	b084      	sub	sp, #16
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80080b2:	2300      	movs	r3, #0
 80080b4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ba:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	695b      	ldr	r3, [r3, #20]
 80080c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080c6:	2b80      	cmp	r3, #128	; 0x80
 80080c8:	bf0c      	ite	eq
 80080ca:	2301      	moveq	r3, #1
 80080cc:	2300      	movne	r3, #0
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	2b21      	cmp	r3, #33	; 0x21
 80080dc:	d108      	bne.n	80080f0 <UART_DMAError+0x46>
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d005      	beq.n	80080f0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	2200      	movs	r2, #0
 80080e8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80080ea:	68b8      	ldr	r0, [r7, #8]
 80080ec:	f000 f8c6 	bl	800827c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	695b      	ldr	r3, [r3, #20]
 80080f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080fa:	2b40      	cmp	r3, #64	; 0x40
 80080fc:	bf0c      	ite	eq
 80080fe:	2301      	moveq	r3, #1
 8008100:	2300      	movne	r3, #0
 8008102:	b2db      	uxtb	r3, r3
 8008104:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800810c:	b2db      	uxtb	r3, r3
 800810e:	2b22      	cmp	r3, #34	; 0x22
 8008110:	d108      	bne.n	8008124 <UART_DMAError+0x7a>
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d005      	beq.n	8008124 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	2200      	movs	r2, #0
 800811c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800811e:	68b8      	ldr	r0, [r7, #8]
 8008120:	f000 f8d4 	bl	80082cc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008128:	f043 0210 	orr.w	r2, r3, #16
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008130:	68b8      	ldr	r0, [r7, #8]
 8008132:	f7ff fe9b 	bl	8007e6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008136:	bf00      	nop
 8008138:	3710      	adds	r7, #16
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
	...

08008140 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b098      	sub	sp, #96	; 0x60
 8008144:	af00      	add	r7, sp, #0
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	60b9      	str	r1, [r7, #8]
 800814a:	4613      	mov	r3, r2
 800814c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800814e:	68ba      	ldr	r2, [r7, #8]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	88fa      	ldrh	r2, [r7, #6]
 8008158:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2200      	movs	r2, #0
 800815e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2222      	movs	r2, #34	; 0x22
 8008164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800816c:	4a40      	ldr	r2, [pc, #256]	; (8008270 <UART_Start_Receive_DMA+0x130>)
 800816e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008174:	4a3f      	ldr	r2, [pc, #252]	; (8008274 <UART_Start_Receive_DMA+0x134>)
 8008176:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800817c:	4a3e      	ldr	r2, [pc, #248]	; (8008278 <UART_Start_Receive_DMA+0x138>)
 800817e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008184:	2200      	movs	r2, #0
 8008186:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008188:	f107 0308 	add.w	r3, r7, #8
 800818c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	3304      	adds	r3, #4
 8008198:	4619      	mov	r1, r3
 800819a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	88fb      	ldrh	r3, [r7, #6]
 80081a0:	f7fd fb24 	bl	80057ec <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80081a4:	2300      	movs	r3, #0
 80081a6:	613b      	str	r3, [r7, #16]
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	613b      	str	r3, [r7, #16]
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	613b      	str	r3, [r7, #16]
 80081b8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2200      	movs	r2, #0
 80081be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	691b      	ldr	r3, [r3, #16]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d019      	beq.n	80081fe <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	330c      	adds	r3, #12
 80081d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081d4:	e853 3f00 	ldrex	r3, [r3]
 80081d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80081da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	330c      	adds	r3, #12
 80081e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80081ea:	64fa      	str	r2, [r7, #76]	; 0x4c
 80081ec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ee:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80081f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80081f2:	e841 2300 	strex	r3, r2, [r1]
 80081f6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80081f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d1e5      	bne.n	80081ca <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	3314      	adds	r3, #20
 8008204:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008208:	e853 3f00 	ldrex	r3, [r3]
 800820c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800820e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008210:	f043 0301 	orr.w	r3, r3, #1
 8008214:	657b      	str	r3, [r7, #84]	; 0x54
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	3314      	adds	r3, #20
 800821c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800821e:	63ba      	str	r2, [r7, #56]	; 0x38
 8008220:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008222:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008224:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008226:	e841 2300 	strex	r3, r2, [r1]
 800822a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800822c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822e:	2b00      	cmp	r3, #0
 8008230:	d1e5      	bne.n	80081fe <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	3314      	adds	r3, #20
 8008238:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800823a:	69bb      	ldr	r3, [r7, #24]
 800823c:	e853 3f00 	ldrex	r3, [r3]
 8008240:	617b      	str	r3, [r7, #20]
   return(result);
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008248:	653b      	str	r3, [r7, #80]	; 0x50
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	3314      	adds	r3, #20
 8008250:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008252:	627a      	str	r2, [r7, #36]	; 0x24
 8008254:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008256:	6a39      	ldr	r1, [r7, #32]
 8008258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800825a:	e841 2300 	strex	r3, r2, [r1]
 800825e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008260:	69fb      	ldr	r3, [r7, #28]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d1e5      	bne.n	8008232 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8008266:	2300      	movs	r3, #0
}
 8008268:	4618      	mov	r0, r3
 800826a:	3760      	adds	r7, #96	; 0x60
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}
 8008270:	08007f4f 	.word	0x08007f4f
 8008274:	08008075 	.word	0x08008075
 8008278:	080080ab 	.word	0x080080ab

0800827c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800827c:	b480      	push	{r7}
 800827e:	b089      	sub	sp, #36	; 0x24
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	330c      	adds	r3, #12
 800828a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	e853 3f00 	ldrex	r3, [r3]
 8008292:	60bb      	str	r3, [r7, #8]
   return(result);
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800829a:	61fb      	str	r3, [r7, #28]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	330c      	adds	r3, #12
 80082a2:	69fa      	ldr	r2, [r7, #28]
 80082a4:	61ba      	str	r2, [r7, #24]
 80082a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a8:	6979      	ldr	r1, [r7, #20]
 80082aa:	69ba      	ldr	r2, [r7, #24]
 80082ac:	e841 2300 	strex	r3, r2, [r1]
 80082b0:	613b      	str	r3, [r7, #16]
   return(result);
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d1e5      	bne.n	8008284 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2220      	movs	r2, #32
 80082bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80082c0:	bf00      	nop
 80082c2:	3724      	adds	r7, #36	; 0x24
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b095      	sub	sp, #84	; 0x54
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	330c      	adds	r3, #12
 80082da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082de:	e853 3f00 	ldrex	r3, [r3]
 80082e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80082e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80082ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	330c      	adds	r3, #12
 80082f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80082f4:	643a      	str	r2, [r7, #64]	; 0x40
 80082f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80082fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80082fc:	e841 2300 	strex	r3, r2, [r1]
 8008300:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008304:	2b00      	cmp	r3, #0
 8008306:	d1e5      	bne.n	80082d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	3314      	adds	r3, #20
 800830e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008310:	6a3b      	ldr	r3, [r7, #32]
 8008312:	e853 3f00 	ldrex	r3, [r3]
 8008316:	61fb      	str	r3, [r7, #28]
   return(result);
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	f023 0301 	bic.w	r3, r3, #1
 800831e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	3314      	adds	r3, #20
 8008326:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008328:	62fa      	str	r2, [r7, #44]	; 0x2c
 800832a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800832e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008330:	e841 2300 	strex	r3, r2, [r1]
 8008334:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008338:	2b00      	cmp	r3, #0
 800833a:	d1e5      	bne.n	8008308 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008340:	2b01      	cmp	r3, #1
 8008342:	d119      	bne.n	8008378 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	330c      	adds	r3, #12
 800834a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	e853 3f00 	ldrex	r3, [r3]
 8008352:	60bb      	str	r3, [r7, #8]
   return(result);
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	f023 0310 	bic.w	r3, r3, #16
 800835a:	647b      	str	r3, [r7, #68]	; 0x44
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	330c      	adds	r3, #12
 8008362:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008364:	61ba      	str	r2, [r7, #24]
 8008366:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008368:	6979      	ldr	r1, [r7, #20]
 800836a:	69ba      	ldr	r2, [r7, #24]
 800836c:	e841 2300 	strex	r3, r2, [r1]
 8008370:	613b      	str	r3, [r7, #16]
   return(result);
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d1e5      	bne.n	8008344 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2220      	movs	r2, #32
 800837c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2200      	movs	r2, #0
 8008384:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008386:	bf00      	nop
 8008388:	3754      	adds	r7, #84	; 0x54
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr

08008392 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008392:	b580      	push	{r7, lr}
 8008394:	b084      	sub	sp, #16
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800839e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2200      	movs	r2, #0
 80083a4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2200      	movs	r2, #0
 80083aa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80083ac:	68f8      	ldr	r0, [r7, #12]
 80083ae:	f7ff fd5d 	bl	8007e6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083b2:	bf00      	nop
 80083b4:	3710      	adds	r7, #16
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}

080083ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80083ba:	b480      	push	{r7}
 80083bc:	b085      	sub	sp, #20
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	2b21      	cmp	r3, #33	; 0x21
 80083cc:	d13e      	bne.n	800844c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	689b      	ldr	r3, [r3, #8]
 80083d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083d6:	d114      	bne.n	8008402 <UART_Transmit_IT+0x48>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	691b      	ldr	r3, [r3, #16]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d110      	bne.n	8008402 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6a1b      	ldr	r3, [r3, #32]
 80083e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	881b      	ldrh	r3, [r3, #0]
 80083ea:	461a      	mov	r2, r3
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80083f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6a1b      	ldr	r3, [r3, #32]
 80083fa:	1c9a      	adds	r2, r3, #2
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	621a      	str	r2, [r3, #32]
 8008400:	e008      	b.n	8008414 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6a1b      	ldr	r3, [r3, #32]
 8008406:	1c59      	adds	r1, r3, #1
 8008408:	687a      	ldr	r2, [r7, #4]
 800840a:	6211      	str	r1, [r2, #32]
 800840c:	781a      	ldrb	r2, [r3, #0]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008418:	b29b      	uxth	r3, r3
 800841a:	3b01      	subs	r3, #1
 800841c:	b29b      	uxth	r3, r3
 800841e:	687a      	ldr	r2, [r7, #4]
 8008420:	4619      	mov	r1, r3
 8008422:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008424:	2b00      	cmp	r3, #0
 8008426:	d10f      	bne.n	8008448 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	68da      	ldr	r2, [r3, #12]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008436:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	68da      	ldr	r2, [r3, #12]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008446:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008448:	2300      	movs	r3, #0
 800844a:	e000      	b.n	800844e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800844c:	2302      	movs	r3, #2
  }
}
 800844e:	4618      	mov	r0, r3
 8008450:	3714      	adds	r7, #20
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr

0800845a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800845a:	b580      	push	{r7, lr}
 800845c:	b082      	sub	sp, #8
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	68da      	ldr	r2, [r3, #12]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008470:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2220      	movs	r2, #32
 8008476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f7fb fe8a 	bl	8004194 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008480:	2300      	movs	r3, #0
}
 8008482:	4618      	mov	r0, r3
 8008484:	3708      	adds	r7, #8
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}

0800848a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800848a:	b580      	push	{r7, lr}
 800848c:	b08c      	sub	sp, #48	; 0x30
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008498:	b2db      	uxtb	r3, r3
 800849a:	2b22      	cmp	r3, #34	; 0x22
 800849c:	f040 80ab 	bne.w	80085f6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	689b      	ldr	r3, [r3, #8]
 80084a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084a8:	d117      	bne.n	80084da <UART_Receive_IT+0x50>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	691b      	ldr	r3, [r3, #16]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d113      	bne.n	80084da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80084b2:	2300      	movs	r3, #0
 80084b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084c8:	b29a      	uxth	r2, r3
 80084ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084d2:	1c9a      	adds	r2, r3, #2
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	629a      	str	r2, [r3, #40]	; 0x28
 80084d8:	e026      	b.n	8008528 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084de:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80084e0:	2300      	movs	r3, #0
 80084e2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084ec:	d007      	beq.n	80084fe <UART_Receive_IT+0x74>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d10a      	bne.n	800850c <UART_Receive_IT+0x82>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	691b      	ldr	r3, [r3, #16]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d106      	bne.n	800850c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	b2da      	uxtb	r2, r3
 8008506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008508:	701a      	strb	r2, [r3, #0]
 800850a:	e008      	b.n	800851e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	b2db      	uxtb	r3, r3
 8008514:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008518:	b2da      	uxtb	r2, r3
 800851a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800851c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008522:	1c5a      	adds	r2, r3, #1
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800852c:	b29b      	uxth	r3, r3
 800852e:	3b01      	subs	r3, #1
 8008530:	b29b      	uxth	r3, r3
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	4619      	mov	r1, r3
 8008536:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008538:	2b00      	cmp	r3, #0
 800853a:	d15a      	bne.n	80085f2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	68da      	ldr	r2, [r3, #12]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f022 0220 	bic.w	r2, r2, #32
 800854a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	68da      	ldr	r2, [r3, #12]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800855a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	695a      	ldr	r2, [r3, #20]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f022 0201 	bic.w	r2, r2, #1
 800856a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2220      	movs	r2, #32
 8008570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008578:	2b01      	cmp	r3, #1
 800857a:	d135      	bne.n	80085e8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2200      	movs	r2, #0
 8008580:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	330c      	adds	r3, #12
 8008588:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	e853 3f00 	ldrex	r3, [r3]
 8008590:	613b      	str	r3, [r7, #16]
   return(result);
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	f023 0310 	bic.w	r3, r3, #16
 8008598:	627b      	str	r3, [r7, #36]	; 0x24
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	330c      	adds	r3, #12
 80085a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085a2:	623a      	str	r2, [r7, #32]
 80085a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a6:	69f9      	ldr	r1, [r7, #28]
 80085a8:	6a3a      	ldr	r2, [r7, #32]
 80085aa:	e841 2300 	strex	r3, r2, [r1]
 80085ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80085b0:	69bb      	ldr	r3, [r7, #24]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d1e5      	bne.n	8008582 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f003 0310 	and.w	r3, r3, #16
 80085c0:	2b10      	cmp	r3, #16
 80085c2:	d10a      	bne.n	80085da <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80085c4:	2300      	movs	r3, #0
 80085c6:	60fb      	str	r3, [r7, #12]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	60fb      	str	r3, [r7, #12]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	60fb      	str	r3, [r7, #12]
 80085d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80085de:	4619      	mov	r1, r3
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f7ff fc4d 	bl	8007e80 <HAL_UARTEx_RxEventCallback>
 80085e6:	e002      	b.n	80085ee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f7fb fdeb 	bl	80041c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80085ee:	2300      	movs	r3, #0
 80085f0:	e002      	b.n	80085f8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80085f2:	2300      	movs	r3, #0
 80085f4:	e000      	b.n	80085f8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80085f6:	2302      	movs	r3, #2
  }
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3730      	adds	r7, #48	; 0x30
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008600:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008604:	b0c0      	sub	sp, #256	; 0x100
 8008606:	af00      	add	r7, sp, #0
 8008608:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800860c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	691b      	ldr	r3, [r3, #16]
 8008614:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800861c:	68d9      	ldr	r1, [r3, #12]
 800861e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	ea40 0301 	orr.w	r3, r0, r1
 8008628:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800862a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800862e:	689a      	ldr	r2, [r3, #8]
 8008630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008634:	691b      	ldr	r3, [r3, #16]
 8008636:	431a      	orrs	r2, r3
 8008638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800863c:	695b      	ldr	r3, [r3, #20]
 800863e:	431a      	orrs	r2, r3
 8008640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008644:	69db      	ldr	r3, [r3, #28]
 8008646:	4313      	orrs	r3, r2
 8008648:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800864c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	68db      	ldr	r3, [r3, #12]
 8008654:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008658:	f021 010c 	bic.w	r1, r1, #12
 800865c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008666:	430b      	orrs	r3, r1
 8008668:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800866a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	695b      	ldr	r3, [r3, #20]
 8008672:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800867a:	6999      	ldr	r1, [r3, #24]
 800867c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	ea40 0301 	orr.w	r3, r0, r1
 8008686:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800868c:	681a      	ldr	r2, [r3, #0]
 800868e:	4b8f      	ldr	r3, [pc, #572]	; (80088cc <UART_SetConfig+0x2cc>)
 8008690:	429a      	cmp	r2, r3
 8008692:	d005      	beq.n	80086a0 <UART_SetConfig+0xa0>
 8008694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	4b8d      	ldr	r3, [pc, #564]	; (80088d0 <UART_SetConfig+0x2d0>)
 800869c:	429a      	cmp	r2, r3
 800869e:	d104      	bne.n	80086aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80086a0:	f7fe fa32 	bl	8006b08 <HAL_RCC_GetPCLK2Freq>
 80086a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80086a8:	e003      	b.n	80086b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80086aa:	f7fe fa19 	bl	8006ae0 <HAL_RCC_GetPCLK1Freq>
 80086ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80086b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086b6:	69db      	ldr	r3, [r3, #28]
 80086b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086bc:	f040 810c 	bne.w	80088d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80086c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086c4:	2200      	movs	r2, #0
 80086c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80086ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80086ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80086d2:	4622      	mov	r2, r4
 80086d4:	462b      	mov	r3, r5
 80086d6:	1891      	adds	r1, r2, r2
 80086d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80086da:	415b      	adcs	r3, r3
 80086dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80086de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80086e2:	4621      	mov	r1, r4
 80086e4:	eb12 0801 	adds.w	r8, r2, r1
 80086e8:	4629      	mov	r1, r5
 80086ea:	eb43 0901 	adc.w	r9, r3, r1
 80086ee:	f04f 0200 	mov.w	r2, #0
 80086f2:	f04f 0300 	mov.w	r3, #0
 80086f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80086fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80086fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008702:	4690      	mov	r8, r2
 8008704:	4699      	mov	r9, r3
 8008706:	4623      	mov	r3, r4
 8008708:	eb18 0303 	adds.w	r3, r8, r3
 800870c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008710:	462b      	mov	r3, r5
 8008712:	eb49 0303 	adc.w	r3, r9, r3
 8008716:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800871a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	2200      	movs	r2, #0
 8008722:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008726:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800872a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800872e:	460b      	mov	r3, r1
 8008730:	18db      	adds	r3, r3, r3
 8008732:	653b      	str	r3, [r7, #80]	; 0x50
 8008734:	4613      	mov	r3, r2
 8008736:	eb42 0303 	adc.w	r3, r2, r3
 800873a:	657b      	str	r3, [r7, #84]	; 0x54
 800873c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008740:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008744:	f7f8 f9be 	bl	8000ac4 <__aeabi_uldivmod>
 8008748:	4602      	mov	r2, r0
 800874a:	460b      	mov	r3, r1
 800874c:	4b61      	ldr	r3, [pc, #388]	; (80088d4 <UART_SetConfig+0x2d4>)
 800874e:	fba3 2302 	umull	r2, r3, r3, r2
 8008752:	095b      	lsrs	r3, r3, #5
 8008754:	011c      	lsls	r4, r3, #4
 8008756:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800875a:	2200      	movs	r2, #0
 800875c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008760:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008764:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008768:	4642      	mov	r2, r8
 800876a:	464b      	mov	r3, r9
 800876c:	1891      	adds	r1, r2, r2
 800876e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008770:	415b      	adcs	r3, r3
 8008772:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008774:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008778:	4641      	mov	r1, r8
 800877a:	eb12 0a01 	adds.w	sl, r2, r1
 800877e:	4649      	mov	r1, r9
 8008780:	eb43 0b01 	adc.w	fp, r3, r1
 8008784:	f04f 0200 	mov.w	r2, #0
 8008788:	f04f 0300 	mov.w	r3, #0
 800878c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008790:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008794:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008798:	4692      	mov	sl, r2
 800879a:	469b      	mov	fp, r3
 800879c:	4643      	mov	r3, r8
 800879e:	eb1a 0303 	adds.w	r3, sl, r3
 80087a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80087a6:	464b      	mov	r3, r9
 80087a8:	eb4b 0303 	adc.w	r3, fp, r3
 80087ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80087b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	2200      	movs	r2, #0
 80087b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80087bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80087c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80087c4:	460b      	mov	r3, r1
 80087c6:	18db      	adds	r3, r3, r3
 80087c8:	643b      	str	r3, [r7, #64]	; 0x40
 80087ca:	4613      	mov	r3, r2
 80087cc:	eb42 0303 	adc.w	r3, r2, r3
 80087d0:	647b      	str	r3, [r7, #68]	; 0x44
 80087d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80087d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80087da:	f7f8 f973 	bl	8000ac4 <__aeabi_uldivmod>
 80087de:	4602      	mov	r2, r0
 80087e0:	460b      	mov	r3, r1
 80087e2:	4611      	mov	r1, r2
 80087e4:	4b3b      	ldr	r3, [pc, #236]	; (80088d4 <UART_SetConfig+0x2d4>)
 80087e6:	fba3 2301 	umull	r2, r3, r3, r1
 80087ea:	095b      	lsrs	r3, r3, #5
 80087ec:	2264      	movs	r2, #100	; 0x64
 80087ee:	fb02 f303 	mul.w	r3, r2, r3
 80087f2:	1acb      	subs	r3, r1, r3
 80087f4:	00db      	lsls	r3, r3, #3
 80087f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80087fa:	4b36      	ldr	r3, [pc, #216]	; (80088d4 <UART_SetConfig+0x2d4>)
 80087fc:	fba3 2302 	umull	r2, r3, r3, r2
 8008800:	095b      	lsrs	r3, r3, #5
 8008802:	005b      	lsls	r3, r3, #1
 8008804:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008808:	441c      	add	r4, r3
 800880a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800880e:	2200      	movs	r2, #0
 8008810:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008814:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008818:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800881c:	4642      	mov	r2, r8
 800881e:	464b      	mov	r3, r9
 8008820:	1891      	adds	r1, r2, r2
 8008822:	63b9      	str	r1, [r7, #56]	; 0x38
 8008824:	415b      	adcs	r3, r3
 8008826:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008828:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800882c:	4641      	mov	r1, r8
 800882e:	1851      	adds	r1, r2, r1
 8008830:	6339      	str	r1, [r7, #48]	; 0x30
 8008832:	4649      	mov	r1, r9
 8008834:	414b      	adcs	r3, r1
 8008836:	637b      	str	r3, [r7, #52]	; 0x34
 8008838:	f04f 0200 	mov.w	r2, #0
 800883c:	f04f 0300 	mov.w	r3, #0
 8008840:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008844:	4659      	mov	r1, fp
 8008846:	00cb      	lsls	r3, r1, #3
 8008848:	4651      	mov	r1, sl
 800884a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800884e:	4651      	mov	r1, sl
 8008850:	00ca      	lsls	r2, r1, #3
 8008852:	4610      	mov	r0, r2
 8008854:	4619      	mov	r1, r3
 8008856:	4603      	mov	r3, r0
 8008858:	4642      	mov	r2, r8
 800885a:	189b      	adds	r3, r3, r2
 800885c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008860:	464b      	mov	r3, r9
 8008862:	460a      	mov	r2, r1
 8008864:	eb42 0303 	adc.w	r3, r2, r3
 8008868:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800886c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	2200      	movs	r2, #0
 8008874:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008878:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800887c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008880:	460b      	mov	r3, r1
 8008882:	18db      	adds	r3, r3, r3
 8008884:	62bb      	str	r3, [r7, #40]	; 0x28
 8008886:	4613      	mov	r3, r2
 8008888:	eb42 0303 	adc.w	r3, r2, r3
 800888c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800888e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008892:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008896:	f7f8 f915 	bl	8000ac4 <__aeabi_uldivmod>
 800889a:	4602      	mov	r2, r0
 800889c:	460b      	mov	r3, r1
 800889e:	4b0d      	ldr	r3, [pc, #52]	; (80088d4 <UART_SetConfig+0x2d4>)
 80088a0:	fba3 1302 	umull	r1, r3, r3, r2
 80088a4:	095b      	lsrs	r3, r3, #5
 80088a6:	2164      	movs	r1, #100	; 0x64
 80088a8:	fb01 f303 	mul.w	r3, r1, r3
 80088ac:	1ad3      	subs	r3, r2, r3
 80088ae:	00db      	lsls	r3, r3, #3
 80088b0:	3332      	adds	r3, #50	; 0x32
 80088b2:	4a08      	ldr	r2, [pc, #32]	; (80088d4 <UART_SetConfig+0x2d4>)
 80088b4:	fba2 2303 	umull	r2, r3, r2, r3
 80088b8:	095b      	lsrs	r3, r3, #5
 80088ba:	f003 0207 	and.w	r2, r3, #7
 80088be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4422      	add	r2, r4
 80088c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80088c8:	e105      	b.n	8008ad6 <UART_SetConfig+0x4d6>
 80088ca:	bf00      	nop
 80088cc:	40011000 	.word	0x40011000
 80088d0:	40011400 	.word	0x40011400
 80088d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80088d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80088dc:	2200      	movs	r2, #0
 80088de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80088e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80088e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80088ea:	4642      	mov	r2, r8
 80088ec:	464b      	mov	r3, r9
 80088ee:	1891      	adds	r1, r2, r2
 80088f0:	6239      	str	r1, [r7, #32]
 80088f2:	415b      	adcs	r3, r3
 80088f4:	627b      	str	r3, [r7, #36]	; 0x24
 80088f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80088fa:	4641      	mov	r1, r8
 80088fc:	1854      	adds	r4, r2, r1
 80088fe:	4649      	mov	r1, r9
 8008900:	eb43 0501 	adc.w	r5, r3, r1
 8008904:	f04f 0200 	mov.w	r2, #0
 8008908:	f04f 0300 	mov.w	r3, #0
 800890c:	00eb      	lsls	r3, r5, #3
 800890e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008912:	00e2      	lsls	r2, r4, #3
 8008914:	4614      	mov	r4, r2
 8008916:	461d      	mov	r5, r3
 8008918:	4643      	mov	r3, r8
 800891a:	18e3      	adds	r3, r4, r3
 800891c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008920:	464b      	mov	r3, r9
 8008922:	eb45 0303 	adc.w	r3, r5, r3
 8008926:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800892a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	2200      	movs	r2, #0
 8008932:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008936:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800893a:	f04f 0200 	mov.w	r2, #0
 800893e:	f04f 0300 	mov.w	r3, #0
 8008942:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008946:	4629      	mov	r1, r5
 8008948:	008b      	lsls	r3, r1, #2
 800894a:	4621      	mov	r1, r4
 800894c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008950:	4621      	mov	r1, r4
 8008952:	008a      	lsls	r2, r1, #2
 8008954:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008958:	f7f8 f8b4 	bl	8000ac4 <__aeabi_uldivmod>
 800895c:	4602      	mov	r2, r0
 800895e:	460b      	mov	r3, r1
 8008960:	4b60      	ldr	r3, [pc, #384]	; (8008ae4 <UART_SetConfig+0x4e4>)
 8008962:	fba3 2302 	umull	r2, r3, r3, r2
 8008966:	095b      	lsrs	r3, r3, #5
 8008968:	011c      	lsls	r4, r3, #4
 800896a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800896e:	2200      	movs	r2, #0
 8008970:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008974:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008978:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800897c:	4642      	mov	r2, r8
 800897e:	464b      	mov	r3, r9
 8008980:	1891      	adds	r1, r2, r2
 8008982:	61b9      	str	r1, [r7, #24]
 8008984:	415b      	adcs	r3, r3
 8008986:	61fb      	str	r3, [r7, #28]
 8008988:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800898c:	4641      	mov	r1, r8
 800898e:	1851      	adds	r1, r2, r1
 8008990:	6139      	str	r1, [r7, #16]
 8008992:	4649      	mov	r1, r9
 8008994:	414b      	adcs	r3, r1
 8008996:	617b      	str	r3, [r7, #20]
 8008998:	f04f 0200 	mov.w	r2, #0
 800899c:	f04f 0300 	mov.w	r3, #0
 80089a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80089a4:	4659      	mov	r1, fp
 80089a6:	00cb      	lsls	r3, r1, #3
 80089a8:	4651      	mov	r1, sl
 80089aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80089ae:	4651      	mov	r1, sl
 80089b0:	00ca      	lsls	r2, r1, #3
 80089b2:	4610      	mov	r0, r2
 80089b4:	4619      	mov	r1, r3
 80089b6:	4603      	mov	r3, r0
 80089b8:	4642      	mov	r2, r8
 80089ba:	189b      	adds	r3, r3, r2
 80089bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80089c0:	464b      	mov	r3, r9
 80089c2:	460a      	mov	r2, r1
 80089c4:	eb42 0303 	adc.w	r3, r2, r3
 80089c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80089cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	2200      	movs	r2, #0
 80089d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80089d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80089d8:	f04f 0200 	mov.w	r2, #0
 80089dc:	f04f 0300 	mov.w	r3, #0
 80089e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80089e4:	4649      	mov	r1, r9
 80089e6:	008b      	lsls	r3, r1, #2
 80089e8:	4641      	mov	r1, r8
 80089ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80089ee:	4641      	mov	r1, r8
 80089f0:	008a      	lsls	r2, r1, #2
 80089f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80089f6:	f7f8 f865 	bl	8000ac4 <__aeabi_uldivmod>
 80089fa:	4602      	mov	r2, r0
 80089fc:	460b      	mov	r3, r1
 80089fe:	4b39      	ldr	r3, [pc, #228]	; (8008ae4 <UART_SetConfig+0x4e4>)
 8008a00:	fba3 1302 	umull	r1, r3, r3, r2
 8008a04:	095b      	lsrs	r3, r3, #5
 8008a06:	2164      	movs	r1, #100	; 0x64
 8008a08:	fb01 f303 	mul.w	r3, r1, r3
 8008a0c:	1ad3      	subs	r3, r2, r3
 8008a0e:	011b      	lsls	r3, r3, #4
 8008a10:	3332      	adds	r3, #50	; 0x32
 8008a12:	4a34      	ldr	r2, [pc, #208]	; (8008ae4 <UART_SetConfig+0x4e4>)
 8008a14:	fba2 2303 	umull	r2, r3, r2, r3
 8008a18:	095b      	lsrs	r3, r3, #5
 8008a1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a1e:	441c      	add	r4, r3
 8008a20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a24:	2200      	movs	r2, #0
 8008a26:	673b      	str	r3, [r7, #112]	; 0x70
 8008a28:	677a      	str	r2, [r7, #116]	; 0x74
 8008a2a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008a2e:	4642      	mov	r2, r8
 8008a30:	464b      	mov	r3, r9
 8008a32:	1891      	adds	r1, r2, r2
 8008a34:	60b9      	str	r1, [r7, #8]
 8008a36:	415b      	adcs	r3, r3
 8008a38:	60fb      	str	r3, [r7, #12]
 8008a3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008a3e:	4641      	mov	r1, r8
 8008a40:	1851      	adds	r1, r2, r1
 8008a42:	6039      	str	r1, [r7, #0]
 8008a44:	4649      	mov	r1, r9
 8008a46:	414b      	adcs	r3, r1
 8008a48:	607b      	str	r3, [r7, #4]
 8008a4a:	f04f 0200 	mov.w	r2, #0
 8008a4e:	f04f 0300 	mov.w	r3, #0
 8008a52:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008a56:	4659      	mov	r1, fp
 8008a58:	00cb      	lsls	r3, r1, #3
 8008a5a:	4651      	mov	r1, sl
 8008a5c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008a60:	4651      	mov	r1, sl
 8008a62:	00ca      	lsls	r2, r1, #3
 8008a64:	4610      	mov	r0, r2
 8008a66:	4619      	mov	r1, r3
 8008a68:	4603      	mov	r3, r0
 8008a6a:	4642      	mov	r2, r8
 8008a6c:	189b      	adds	r3, r3, r2
 8008a6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a70:	464b      	mov	r3, r9
 8008a72:	460a      	mov	r2, r1
 8008a74:	eb42 0303 	adc.w	r3, r2, r3
 8008a78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	2200      	movs	r2, #0
 8008a82:	663b      	str	r3, [r7, #96]	; 0x60
 8008a84:	667a      	str	r2, [r7, #100]	; 0x64
 8008a86:	f04f 0200 	mov.w	r2, #0
 8008a8a:	f04f 0300 	mov.w	r3, #0
 8008a8e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008a92:	4649      	mov	r1, r9
 8008a94:	008b      	lsls	r3, r1, #2
 8008a96:	4641      	mov	r1, r8
 8008a98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008a9c:	4641      	mov	r1, r8
 8008a9e:	008a      	lsls	r2, r1, #2
 8008aa0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008aa4:	f7f8 f80e 	bl	8000ac4 <__aeabi_uldivmod>
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	460b      	mov	r3, r1
 8008aac:	4b0d      	ldr	r3, [pc, #52]	; (8008ae4 <UART_SetConfig+0x4e4>)
 8008aae:	fba3 1302 	umull	r1, r3, r3, r2
 8008ab2:	095b      	lsrs	r3, r3, #5
 8008ab4:	2164      	movs	r1, #100	; 0x64
 8008ab6:	fb01 f303 	mul.w	r3, r1, r3
 8008aba:	1ad3      	subs	r3, r2, r3
 8008abc:	011b      	lsls	r3, r3, #4
 8008abe:	3332      	adds	r3, #50	; 0x32
 8008ac0:	4a08      	ldr	r2, [pc, #32]	; (8008ae4 <UART_SetConfig+0x4e4>)
 8008ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ac6:	095b      	lsrs	r3, r3, #5
 8008ac8:	f003 020f 	and.w	r2, r3, #15
 8008acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4422      	add	r2, r4
 8008ad4:	609a      	str	r2, [r3, #8]
}
 8008ad6:	bf00      	nop
 8008ad8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008adc:	46bd      	mov	sp, r7
 8008ade:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ae2:	bf00      	nop
 8008ae4:	51eb851f 	.word	0x51eb851f

08008ae8 <__cxa_pure_virtual>:
 8008ae8:	b508      	push	{r3, lr}
 8008aea:	f000 f80d 	bl	8008b08 <_ZSt9terminatev>

08008aee <_ZN10__cxxabiv111__terminateEPFvvE>:
 8008aee:	b508      	push	{r3, lr}
 8008af0:	4780      	blx	r0
 8008af2:	f000 f80e 	bl	8008b12 <abort>
	...

08008af8 <_ZSt13get_terminatev>:
 8008af8:	4b02      	ldr	r3, [pc, #8]	; (8008b04 <_ZSt13get_terminatev+0xc>)
 8008afa:	6818      	ldr	r0, [r3, #0]
 8008afc:	f3bf 8f5b 	dmb	ish
 8008b00:	4770      	bx	lr
 8008b02:	bf00      	nop
 8008b04:	2000000c 	.word	0x2000000c

08008b08 <_ZSt9terminatev>:
 8008b08:	b508      	push	{r3, lr}
 8008b0a:	f7ff fff5 	bl	8008af8 <_ZSt13get_terminatev>
 8008b0e:	f7ff ffee 	bl	8008aee <_ZN10__cxxabiv111__terminateEPFvvE>

08008b12 <abort>:
 8008b12:	b508      	push	{r3, lr}
 8008b14:	2006      	movs	r0, #6
 8008b16:	f000 f873 	bl	8008c00 <raise>
 8008b1a:	2001      	movs	r0, #1
 8008b1c:	f7fc fb94 	bl	8005248 <_exit>

08008b20 <__errno>:
 8008b20:	4b01      	ldr	r3, [pc, #4]	; (8008b28 <__errno+0x8>)
 8008b22:	6818      	ldr	r0, [r3, #0]
 8008b24:	4770      	bx	lr
 8008b26:	bf00      	nop
 8008b28:	20000010 	.word	0x20000010

08008b2c <__libc_init_array>:
 8008b2c:	b570      	push	{r4, r5, r6, lr}
 8008b2e:	4d0d      	ldr	r5, [pc, #52]	; (8008b64 <__libc_init_array+0x38>)
 8008b30:	4c0d      	ldr	r4, [pc, #52]	; (8008b68 <__libc_init_array+0x3c>)
 8008b32:	1b64      	subs	r4, r4, r5
 8008b34:	10a4      	asrs	r4, r4, #2
 8008b36:	2600      	movs	r6, #0
 8008b38:	42a6      	cmp	r6, r4
 8008b3a:	d109      	bne.n	8008b50 <__libc_init_array+0x24>
 8008b3c:	4d0b      	ldr	r5, [pc, #44]	; (8008b6c <__libc_init_array+0x40>)
 8008b3e:	4c0c      	ldr	r4, [pc, #48]	; (8008b70 <__libc_init_array+0x44>)
 8008b40:	f000 f9b0 	bl	8008ea4 <_init>
 8008b44:	1b64      	subs	r4, r4, r5
 8008b46:	10a4      	asrs	r4, r4, #2
 8008b48:	2600      	movs	r6, #0
 8008b4a:	42a6      	cmp	r6, r4
 8008b4c:	d105      	bne.n	8008b5a <__libc_init_array+0x2e>
 8008b4e:	bd70      	pop	{r4, r5, r6, pc}
 8008b50:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b54:	4798      	blx	r3
 8008b56:	3601      	adds	r6, #1
 8008b58:	e7ee      	b.n	8008b38 <__libc_init_array+0xc>
 8008b5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b5e:	4798      	blx	r3
 8008b60:	3601      	adds	r6, #1
 8008b62:	e7f2      	b.n	8008b4a <__libc_init_array+0x1e>
 8008b64:	080091e4 	.word	0x080091e4
 8008b68:	080091e4 	.word	0x080091e4
 8008b6c:	080091e4 	.word	0x080091e4
 8008b70:	080091ec 	.word	0x080091ec

08008b74 <memcpy>:
 8008b74:	440a      	add	r2, r1
 8008b76:	4291      	cmp	r1, r2
 8008b78:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b7c:	d100      	bne.n	8008b80 <memcpy+0xc>
 8008b7e:	4770      	bx	lr
 8008b80:	b510      	push	{r4, lr}
 8008b82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b8a:	4291      	cmp	r1, r2
 8008b8c:	d1f9      	bne.n	8008b82 <memcpy+0xe>
 8008b8e:	bd10      	pop	{r4, pc}

08008b90 <memset>:
 8008b90:	4402      	add	r2, r0
 8008b92:	4603      	mov	r3, r0
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d100      	bne.n	8008b9a <memset+0xa>
 8008b98:	4770      	bx	lr
 8008b9a:	f803 1b01 	strb.w	r1, [r3], #1
 8008b9e:	e7f9      	b.n	8008b94 <memset+0x4>

08008ba0 <realloc>:
 8008ba0:	4b02      	ldr	r3, [pc, #8]	; (8008bac <realloc+0xc>)
 8008ba2:	460a      	mov	r2, r1
 8008ba4:	4601      	mov	r1, r0
 8008ba6:	6818      	ldr	r0, [r3, #0]
 8008ba8:	f000 b8da 	b.w	8008d60 <_realloc_r>
 8008bac:	20000010 	.word	0x20000010

08008bb0 <_raise_r>:
 8008bb0:	291f      	cmp	r1, #31
 8008bb2:	b538      	push	{r3, r4, r5, lr}
 8008bb4:	4604      	mov	r4, r0
 8008bb6:	460d      	mov	r5, r1
 8008bb8:	d904      	bls.n	8008bc4 <_raise_r+0x14>
 8008bba:	2316      	movs	r3, #22
 8008bbc:	6003      	str	r3, [r0, #0]
 8008bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8008bc2:	bd38      	pop	{r3, r4, r5, pc}
 8008bc4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008bc6:	b112      	cbz	r2, 8008bce <_raise_r+0x1e>
 8008bc8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008bcc:	b94b      	cbnz	r3, 8008be2 <_raise_r+0x32>
 8008bce:	4620      	mov	r0, r4
 8008bd0:	f000 f830 	bl	8008c34 <_getpid_r>
 8008bd4:	462a      	mov	r2, r5
 8008bd6:	4601      	mov	r1, r0
 8008bd8:	4620      	mov	r0, r4
 8008bda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bde:	f000 b817 	b.w	8008c10 <_kill_r>
 8008be2:	2b01      	cmp	r3, #1
 8008be4:	d00a      	beq.n	8008bfc <_raise_r+0x4c>
 8008be6:	1c59      	adds	r1, r3, #1
 8008be8:	d103      	bne.n	8008bf2 <_raise_r+0x42>
 8008bea:	2316      	movs	r3, #22
 8008bec:	6003      	str	r3, [r0, #0]
 8008bee:	2001      	movs	r0, #1
 8008bf0:	e7e7      	b.n	8008bc2 <_raise_r+0x12>
 8008bf2:	2400      	movs	r4, #0
 8008bf4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008bf8:	4628      	mov	r0, r5
 8008bfa:	4798      	blx	r3
 8008bfc:	2000      	movs	r0, #0
 8008bfe:	e7e0      	b.n	8008bc2 <_raise_r+0x12>

08008c00 <raise>:
 8008c00:	4b02      	ldr	r3, [pc, #8]	; (8008c0c <raise+0xc>)
 8008c02:	4601      	mov	r1, r0
 8008c04:	6818      	ldr	r0, [r3, #0]
 8008c06:	f7ff bfd3 	b.w	8008bb0 <_raise_r>
 8008c0a:	bf00      	nop
 8008c0c:	20000010 	.word	0x20000010

08008c10 <_kill_r>:
 8008c10:	b538      	push	{r3, r4, r5, lr}
 8008c12:	4d07      	ldr	r5, [pc, #28]	; (8008c30 <_kill_r+0x20>)
 8008c14:	2300      	movs	r3, #0
 8008c16:	4604      	mov	r4, r0
 8008c18:	4608      	mov	r0, r1
 8008c1a:	4611      	mov	r1, r2
 8008c1c:	602b      	str	r3, [r5, #0]
 8008c1e:	f7fc fb03 	bl	8005228 <_kill>
 8008c22:	1c43      	adds	r3, r0, #1
 8008c24:	d102      	bne.n	8008c2c <_kill_r+0x1c>
 8008c26:	682b      	ldr	r3, [r5, #0]
 8008c28:	b103      	cbz	r3, 8008c2c <_kill_r+0x1c>
 8008c2a:	6023      	str	r3, [r4, #0]
 8008c2c:	bd38      	pop	{r3, r4, r5, pc}
 8008c2e:	bf00      	nop
 8008c30:	20000eb0 	.word	0x20000eb0

08008c34 <_getpid_r>:
 8008c34:	f7fc baf0 	b.w	8005218 <_getpid>

08008c38 <sbrk_aligned>:
 8008c38:	b570      	push	{r4, r5, r6, lr}
 8008c3a:	4e0e      	ldr	r6, [pc, #56]	; (8008c74 <sbrk_aligned+0x3c>)
 8008c3c:	460c      	mov	r4, r1
 8008c3e:	6831      	ldr	r1, [r6, #0]
 8008c40:	4605      	mov	r5, r0
 8008c42:	b911      	cbnz	r1, 8008c4a <sbrk_aligned+0x12>
 8008c44:	f000 f8bc 	bl	8008dc0 <_sbrk_r>
 8008c48:	6030      	str	r0, [r6, #0]
 8008c4a:	4621      	mov	r1, r4
 8008c4c:	4628      	mov	r0, r5
 8008c4e:	f000 f8b7 	bl	8008dc0 <_sbrk_r>
 8008c52:	1c43      	adds	r3, r0, #1
 8008c54:	d00a      	beq.n	8008c6c <sbrk_aligned+0x34>
 8008c56:	1cc4      	adds	r4, r0, #3
 8008c58:	f024 0403 	bic.w	r4, r4, #3
 8008c5c:	42a0      	cmp	r0, r4
 8008c5e:	d007      	beq.n	8008c70 <sbrk_aligned+0x38>
 8008c60:	1a21      	subs	r1, r4, r0
 8008c62:	4628      	mov	r0, r5
 8008c64:	f000 f8ac 	bl	8008dc0 <_sbrk_r>
 8008c68:	3001      	adds	r0, #1
 8008c6a:	d101      	bne.n	8008c70 <sbrk_aligned+0x38>
 8008c6c:	f04f 34ff 	mov.w	r4, #4294967295
 8008c70:	4620      	mov	r0, r4
 8008c72:	bd70      	pop	{r4, r5, r6, pc}
 8008c74:	20000eac 	.word	0x20000eac

08008c78 <_malloc_r>:
 8008c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c7c:	1ccd      	adds	r5, r1, #3
 8008c7e:	f025 0503 	bic.w	r5, r5, #3
 8008c82:	3508      	adds	r5, #8
 8008c84:	2d0c      	cmp	r5, #12
 8008c86:	bf38      	it	cc
 8008c88:	250c      	movcc	r5, #12
 8008c8a:	2d00      	cmp	r5, #0
 8008c8c:	4607      	mov	r7, r0
 8008c8e:	db01      	blt.n	8008c94 <_malloc_r+0x1c>
 8008c90:	42a9      	cmp	r1, r5
 8008c92:	d905      	bls.n	8008ca0 <_malloc_r+0x28>
 8008c94:	230c      	movs	r3, #12
 8008c96:	603b      	str	r3, [r7, #0]
 8008c98:	2600      	movs	r6, #0
 8008c9a:	4630      	mov	r0, r6
 8008c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ca0:	4e2e      	ldr	r6, [pc, #184]	; (8008d5c <_malloc_r+0xe4>)
 8008ca2:	f000 f89d 	bl	8008de0 <__malloc_lock>
 8008ca6:	6833      	ldr	r3, [r6, #0]
 8008ca8:	461c      	mov	r4, r3
 8008caa:	bb34      	cbnz	r4, 8008cfa <_malloc_r+0x82>
 8008cac:	4629      	mov	r1, r5
 8008cae:	4638      	mov	r0, r7
 8008cb0:	f7ff ffc2 	bl	8008c38 <sbrk_aligned>
 8008cb4:	1c43      	adds	r3, r0, #1
 8008cb6:	4604      	mov	r4, r0
 8008cb8:	d14d      	bne.n	8008d56 <_malloc_r+0xde>
 8008cba:	6834      	ldr	r4, [r6, #0]
 8008cbc:	4626      	mov	r6, r4
 8008cbe:	2e00      	cmp	r6, #0
 8008cc0:	d140      	bne.n	8008d44 <_malloc_r+0xcc>
 8008cc2:	6823      	ldr	r3, [r4, #0]
 8008cc4:	4631      	mov	r1, r6
 8008cc6:	4638      	mov	r0, r7
 8008cc8:	eb04 0803 	add.w	r8, r4, r3
 8008ccc:	f000 f878 	bl	8008dc0 <_sbrk_r>
 8008cd0:	4580      	cmp	r8, r0
 8008cd2:	d13a      	bne.n	8008d4a <_malloc_r+0xd2>
 8008cd4:	6821      	ldr	r1, [r4, #0]
 8008cd6:	3503      	adds	r5, #3
 8008cd8:	1a6d      	subs	r5, r5, r1
 8008cda:	f025 0503 	bic.w	r5, r5, #3
 8008cde:	3508      	adds	r5, #8
 8008ce0:	2d0c      	cmp	r5, #12
 8008ce2:	bf38      	it	cc
 8008ce4:	250c      	movcc	r5, #12
 8008ce6:	4629      	mov	r1, r5
 8008ce8:	4638      	mov	r0, r7
 8008cea:	f7ff ffa5 	bl	8008c38 <sbrk_aligned>
 8008cee:	3001      	adds	r0, #1
 8008cf0:	d02b      	beq.n	8008d4a <_malloc_r+0xd2>
 8008cf2:	6823      	ldr	r3, [r4, #0]
 8008cf4:	442b      	add	r3, r5
 8008cf6:	6023      	str	r3, [r4, #0]
 8008cf8:	e00e      	b.n	8008d18 <_malloc_r+0xa0>
 8008cfa:	6822      	ldr	r2, [r4, #0]
 8008cfc:	1b52      	subs	r2, r2, r5
 8008cfe:	d41e      	bmi.n	8008d3e <_malloc_r+0xc6>
 8008d00:	2a0b      	cmp	r2, #11
 8008d02:	d916      	bls.n	8008d32 <_malloc_r+0xba>
 8008d04:	1961      	adds	r1, r4, r5
 8008d06:	42a3      	cmp	r3, r4
 8008d08:	6025      	str	r5, [r4, #0]
 8008d0a:	bf18      	it	ne
 8008d0c:	6059      	strne	r1, [r3, #4]
 8008d0e:	6863      	ldr	r3, [r4, #4]
 8008d10:	bf08      	it	eq
 8008d12:	6031      	streq	r1, [r6, #0]
 8008d14:	5162      	str	r2, [r4, r5]
 8008d16:	604b      	str	r3, [r1, #4]
 8008d18:	4638      	mov	r0, r7
 8008d1a:	f104 060b 	add.w	r6, r4, #11
 8008d1e:	f000 f865 	bl	8008dec <__malloc_unlock>
 8008d22:	f026 0607 	bic.w	r6, r6, #7
 8008d26:	1d23      	adds	r3, r4, #4
 8008d28:	1af2      	subs	r2, r6, r3
 8008d2a:	d0b6      	beq.n	8008c9a <_malloc_r+0x22>
 8008d2c:	1b9b      	subs	r3, r3, r6
 8008d2e:	50a3      	str	r3, [r4, r2]
 8008d30:	e7b3      	b.n	8008c9a <_malloc_r+0x22>
 8008d32:	6862      	ldr	r2, [r4, #4]
 8008d34:	42a3      	cmp	r3, r4
 8008d36:	bf0c      	ite	eq
 8008d38:	6032      	streq	r2, [r6, #0]
 8008d3a:	605a      	strne	r2, [r3, #4]
 8008d3c:	e7ec      	b.n	8008d18 <_malloc_r+0xa0>
 8008d3e:	4623      	mov	r3, r4
 8008d40:	6864      	ldr	r4, [r4, #4]
 8008d42:	e7b2      	b.n	8008caa <_malloc_r+0x32>
 8008d44:	4634      	mov	r4, r6
 8008d46:	6876      	ldr	r6, [r6, #4]
 8008d48:	e7b9      	b.n	8008cbe <_malloc_r+0x46>
 8008d4a:	230c      	movs	r3, #12
 8008d4c:	603b      	str	r3, [r7, #0]
 8008d4e:	4638      	mov	r0, r7
 8008d50:	f000 f84c 	bl	8008dec <__malloc_unlock>
 8008d54:	e7a1      	b.n	8008c9a <_malloc_r+0x22>
 8008d56:	6025      	str	r5, [r4, #0]
 8008d58:	e7de      	b.n	8008d18 <_malloc_r+0xa0>
 8008d5a:	bf00      	nop
 8008d5c:	20000ea8 	.word	0x20000ea8

08008d60 <_realloc_r>:
 8008d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d64:	4680      	mov	r8, r0
 8008d66:	4614      	mov	r4, r2
 8008d68:	460e      	mov	r6, r1
 8008d6a:	b921      	cbnz	r1, 8008d76 <_realloc_r+0x16>
 8008d6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d70:	4611      	mov	r1, r2
 8008d72:	f7ff bf81 	b.w	8008c78 <_malloc_r>
 8008d76:	b92a      	cbnz	r2, 8008d84 <_realloc_r+0x24>
 8008d78:	f000 f83e 	bl	8008df8 <_free_r>
 8008d7c:	4625      	mov	r5, r4
 8008d7e:	4628      	mov	r0, r5
 8008d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d84:	f000 f884 	bl	8008e90 <_malloc_usable_size_r>
 8008d88:	4284      	cmp	r4, r0
 8008d8a:	4607      	mov	r7, r0
 8008d8c:	d802      	bhi.n	8008d94 <_realloc_r+0x34>
 8008d8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008d92:	d812      	bhi.n	8008dba <_realloc_r+0x5a>
 8008d94:	4621      	mov	r1, r4
 8008d96:	4640      	mov	r0, r8
 8008d98:	f7ff ff6e 	bl	8008c78 <_malloc_r>
 8008d9c:	4605      	mov	r5, r0
 8008d9e:	2800      	cmp	r0, #0
 8008da0:	d0ed      	beq.n	8008d7e <_realloc_r+0x1e>
 8008da2:	42bc      	cmp	r4, r7
 8008da4:	4622      	mov	r2, r4
 8008da6:	4631      	mov	r1, r6
 8008da8:	bf28      	it	cs
 8008daa:	463a      	movcs	r2, r7
 8008dac:	f7ff fee2 	bl	8008b74 <memcpy>
 8008db0:	4631      	mov	r1, r6
 8008db2:	4640      	mov	r0, r8
 8008db4:	f000 f820 	bl	8008df8 <_free_r>
 8008db8:	e7e1      	b.n	8008d7e <_realloc_r+0x1e>
 8008dba:	4635      	mov	r5, r6
 8008dbc:	e7df      	b.n	8008d7e <_realloc_r+0x1e>
	...

08008dc0 <_sbrk_r>:
 8008dc0:	b538      	push	{r3, r4, r5, lr}
 8008dc2:	4d06      	ldr	r5, [pc, #24]	; (8008ddc <_sbrk_r+0x1c>)
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	4604      	mov	r4, r0
 8008dc8:	4608      	mov	r0, r1
 8008dca:	602b      	str	r3, [r5, #0]
 8008dcc:	f7fc fa46 	bl	800525c <_sbrk>
 8008dd0:	1c43      	adds	r3, r0, #1
 8008dd2:	d102      	bne.n	8008dda <_sbrk_r+0x1a>
 8008dd4:	682b      	ldr	r3, [r5, #0]
 8008dd6:	b103      	cbz	r3, 8008dda <_sbrk_r+0x1a>
 8008dd8:	6023      	str	r3, [r4, #0]
 8008dda:	bd38      	pop	{r3, r4, r5, pc}
 8008ddc:	20000eb0 	.word	0x20000eb0

08008de0 <__malloc_lock>:
 8008de0:	4801      	ldr	r0, [pc, #4]	; (8008de8 <__malloc_lock+0x8>)
 8008de2:	f000 b85d 	b.w	8008ea0 <__retarget_lock_acquire_recursive>
 8008de6:	bf00      	nop
 8008de8:	20000eb4 	.word	0x20000eb4

08008dec <__malloc_unlock>:
 8008dec:	4801      	ldr	r0, [pc, #4]	; (8008df4 <__malloc_unlock+0x8>)
 8008dee:	f000 b858 	b.w	8008ea2 <__retarget_lock_release_recursive>
 8008df2:	bf00      	nop
 8008df4:	20000eb4 	.word	0x20000eb4

08008df8 <_free_r>:
 8008df8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008dfa:	2900      	cmp	r1, #0
 8008dfc:	d044      	beq.n	8008e88 <_free_r+0x90>
 8008dfe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e02:	9001      	str	r0, [sp, #4]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	f1a1 0404 	sub.w	r4, r1, #4
 8008e0a:	bfb8      	it	lt
 8008e0c:	18e4      	addlt	r4, r4, r3
 8008e0e:	f7ff ffe7 	bl	8008de0 <__malloc_lock>
 8008e12:	4a1e      	ldr	r2, [pc, #120]	; (8008e8c <_free_r+0x94>)
 8008e14:	9801      	ldr	r0, [sp, #4]
 8008e16:	6813      	ldr	r3, [r2, #0]
 8008e18:	b933      	cbnz	r3, 8008e28 <_free_r+0x30>
 8008e1a:	6063      	str	r3, [r4, #4]
 8008e1c:	6014      	str	r4, [r2, #0]
 8008e1e:	b003      	add	sp, #12
 8008e20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e24:	f7ff bfe2 	b.w	8008dec <__malloc_unlock>
 8008e28:	42a3      	cmp	r3, r4
 8008e2a:	d908      	bls.n	8008e3e <_free_r+0x46>
 8008e2c:	6825      	ldr	r5, [r4, #0]
 8008e2e:	1961      	adds	r1, r4, r5
 8008e30:	428b      	cmp	r3, r1
 8008e32:	bf01      	itttt	eq
 8008e34:	6819      	ldreq	r1, [r3, #0]
 8008e36:	685b      	ldreq	r3, [r3, #4]
 8008e38:	1949      	addeq	r1, r1, r5
 8008e3a:	6021      	streq	r1, [r4, #0]
 8008e3c:	e7ed      	b.n	8008e1a <_free_r+0x22>
 8008e3e:	461a      	mov	r2, r3
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	b10b      	cbz	r3, 8008e48 <_free_r+0x50>
 8008e44:	42a3      	cmp	r3, r4
 8008e46:	d9fa      	bls.n	8008e3e <_free_r+0x46>
 8008e48:	6811      	ldr	r1, [r2, #0]
 8008e4a:	1855      	adds	r5, r2, r1
 8008e4c:	42a5      	cmp	r5, r4
 8008e4e:	d10b      	bne.n	8008e68 <_free_r+0x70>
 8008e50:	6824      	ldr	r4, [r4, #0]
 8008e52:	4421      	add	r1, r4
 8008e54:	1854      	adds	r4, r2, r1
 8008e56:	42a3      	cmp	r3, r4
 8008e58:	6011      	str	r1, [r2, #0]
 8008e5a:	d1e0      	bne.n	8008e1e <_free_r+0x26>
 8008e5c:	681c      	ldr	r4, [r3, #0]
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	6053      	str	r3, [r2, #4]
 8008e62:	4421      	add	r1, r4
 8008e64:	6011      	str	r1, [r2, #0]
 8008e66:	e7da      	b.n	8008e1e <_free_r+0x26>
 8008e68:	d902      	bls.n	8008e70 <_free_r+0x78>
 8008e6a:	230c      	movs	r3, #12
 8008e6c:	6003      	str	r3, [r0, #0]
 8008e6e:	e7d6      	b.n	8008e1e <_free_r+0x26>
 8008e70:	6825      	ldr	r5, [r4, #0]
 8008e72:	1961      	adds	r1, r4, r5
 8008e74:	428b      	cmp	r3, r1
 8008e76:	bf04      	itt	eq
 8008e78:	6819      	ldreq	r1, [r3, #0]
 8008e7a:	685b      	ldreq	r3, [r3, #4]
 8008e7c:	6063      	str	r3, [r4, #4]
 8008e7e:	bf04      	itt	eq
 8008e80:	1949      	addeq	r1, r1, r5
 8008e82:	6021      	streq	r1, [r4, #0]
 8008e84:	6054      	str	r4, [r2, #4]
 8008e86:	e7ca      	b.n	8008e1e <_free_r+0x26>
 8008e88:	b003      	add	sp, #12
 8008e8a:	bd30      	pop	{r4, r5, pc}
 8008e8c:	20000ea8 	.word	0x20000ea8

08008e90 <_malloc_usable_size_r>:
 8008e90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e94:	1f18      	subs	r0, r3, #4
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	bfbc      	itt	lt
 8008e9a:	580b      	ldrlt	r3, [r1, r0]
 8008e9c:	18c0      	addlt	r0, r0, r3
 8008e9e:	4770      	bx	lr

08008ea0 <__retarget_lock_acquire_recursive>:
 8008ea0:	4770      	bx	lr

08008ea2 <__retarget_lock_release_recursive>:
 8008ea2:	4770      	bx	lr

08008ea4 <_init>:
 8008ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ea6:	bf00      	nop
 8008ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eaa:	bc08      	pop	{r3}
 8008eac:	469e      	mov	lr, r3
 8008eae:	4770      	bx	lr

08008eb0 <_fini>:
 8008eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eb2:	bf00      	nop
 8008eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eb6:	bc08      	pop	{r3}
 8008eb8:	469e      	mov	lr, r3
 8008eba:	4770      	bx	lr
